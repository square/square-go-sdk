// This file was auto-generated by Fern from our API Definition.

package client

import (
	context "context"
	fmt "fmt"
	v40 "github.com/square/square-go-sdk/v40"
	core "github.com/square/square-go-sdk/v40/core"
	cards "github.com/square/square-go-sdk/v40/customers/cards"
	customattributedefinitions "github.com/square/square-go-sdk/v40/customers/customattributedefinitions"
	customattributes "github.com/square/square-go-sdk/v40/customers/customattributes"
	groups "github.com/square/square-go-sdk/v40/customers/groups"
	segments "github.com/square/square-go-sdk/v40/customers/segments"
	internal "github.com/square/square-go-sdk/v40/internal"
	option "github.com/square/square-go-sdk/v40/option"
	http "net/http"
	os "os"
)

type Client struct {
	baseURL string
	caller  *internal.Caller
	header  http.Header

	CustomAttributeDefinitions *customattributedefinitions.Client
	Groups                     *groups.Client
	Segments                   *segments.Client
	Cards                      *cards.Client
	CustomAttributes           *customattributes.Client
}

func NewClient(opts ...option.RequestOption) *Client {
	options := core.NewRequestOptions(opts...)
	if options.Token == "" {
		options.Token = os.Getenv("SQUARE_TOKEN")
	}
	if options.Version == "" {
		options.Version = os.Getenv("VERSION")
	}
	return &Client{
		baseURL: options.BaseURL,
		caller: internal.NewCaller(
			&internal.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
		header:                     options.ToHeader(),
		CustomAttributeDefinitions: customattributedefinitions.NewClient(opts...),
		Groups:                     groups.NewClient(opts...),
		Segments:                   segments.NewClient(opts...),
		Cards:                      cards.NewClient(opts...),
		CustomAttributes:           customattributes.NewClient(opts...),
	}
}

// Lists customer profiles associated with a Square account.
//
// Under normal operating conditions, newly created or updated customer profiles become available
// for the listing operation in well under 30 seconds. Occasionally, propagation of the new or updated
// profiles can take closer to one minute or longer, especially during network incidents and outages.
func (c *Client) List(
	ctx context.Context,
	request *v40.CustomersListRequest,
	opts ...option.RequestOption,
) (*core.Page[*v40.Customer], error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://connect.squareup.com",
	)
	endpointURL := baseURL + "/v2/customers"
	queryParams, err := internal.QueryValues(request)
	if err != nil {
		return nil, err
	}
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)

	prepareCall := func(pageRequest *internal.PageRequest[*string]) *internal.CallParams {
		if pageRequest.Cursor != nil {
			queryParams.Set("cursor", fmt.Sprintf("%v", *pageRequest.Cursor))
		}
		nextURL := endpointURL
		if len(queryParams) > 0 {
			nextURL += "?" + queryParams.Encode()
		}
		return &internal.CallParams{
			URL:             nextURL,
			Method:          http.MethodGet,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        pageRequest.Response,
		}
	}
	readPageResponse := func(response *v40.ListCustomersResponse) *internal.PageResponse[*string, *v40.Customer] {
		next := response.Cursor
		results := response.Customers
		return &internal.PageResponse[*string, *v40.Customer]{
			Next:    next,
			Results: results,
		}
	}
	pager := internal.NewCursorPager(
		c.caller,
		prepareCall,
		readPageResponse,
	)
	return pager.GetPage(ctx, request.Cursor)
}

// Creates a new customer for a business.
//
// You must provide at least one of the following values in your request to this
// endpoint:
//
// - `given_name`
// - `family_name`
// - `company_name`
// - `email_address`
// - `phone_number`
func (c *Client) Create(
	ctx context.Context,
	request *v40.CreateCustomerRequest,
	opts ...option.RequestOption,
) (*v40.CreateCustomerResponse, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://connect.squareup.com",
	)
	endpointURL := baseURL + "/v2/customers"
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)
	headers.Set("Content-Type", "application/json")

	var response *v40.CreateCustomerResponse
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPost,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         request,
			Response:        &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Creates multiple [customer profiles](entity:Customer) for a business.
//
// This endpoint takes a map of individual create requests and returns a map of responses.
//
// You must provide at least one of the following values in each create request:
//
// - `given_name`
// - `family_name`
// - `company_name`
// - `email_address`
// - `phone_number`
func (c *Client) BatchCreate(
	ctx context.Context,
	request *v40.BulkCreateCustomersRequest,
	opts ...option.RequestOption,
) (*v40.BulkCreateCustomersResponse, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://connect.squareup.com",
	)
	endpointURL := baseURL + "/v2/customers/bulk-create"
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)
	headers.Set("Content-Type", "application/json")

	var response *v40.BulkCreateCustomersResponse
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPost,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         request,
			Response:        &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Deletes multiple customer profiles.
//
// The endpoint takes a list of customer IDs and returns a map of responses.
func (c *Client) BulkDeleteCustomers(
	ctx context.Context,
	request *v40.BulkDeleteCustomersRequest,
	opts ...option.RequestOption,
) (*v40.BulkDeleteCustomersResponse, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://connect.squareup.com",
	)
	endpointURL := baseURL + "/v2/customers/bulk-delete"
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)
	headers.Set("Content-Type", "application/json")

	var response *v40.BulkDeleteCustomersResponse
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPost,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         request,
			Response:        &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Retrieves multiple customer profiles.
//
// This endpoint takes a list of customer IDs and returns a map of responses.
func (c *Client) BulkRetrieveCustomers(
	ctx context.Context,
	request *v40.BulkRetrieveCustomersRequest,
	opts ...option.RequestOption,
) (*v40.BulkRetrieveCustomersResponse, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://connect.squareup.com",
	)
	endpointURL := baseURL + "/v2/customers/bulk-retrieve"
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)
	headers.Set("Content-Type", "application/json")

	var response *v40.BulkRetrieveCustomersResponse
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPost,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         request,
			Response:        &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Updates multiple customer profiles.
//
// This endpoint takes a map of individual update requests and returns a map of responses.
func (c *Client) BulkUpdateCustomers(
	ctx context.Context,
	request *v40.BulkUpdateCustomersRequest,
	opts ...option.RequestOption,
) (*v40.BulkUpdateCustomersResponse, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://connect.squareup.com",
	)
	endpointURL := baseURL + "/v2/customers/bulk-update"
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)
	headers.Set("Content-Type", "application/json")

	var response *v40.BulkUpdateCustomersResponse
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPost,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         request,
			Response:        &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Searches the customer profiles associated with a Square account using one or more supported query filters.
//
// Calling `SearchCustomers` without any explicit query filter returns all
// customer profiles ordered alphabetically based on `given_name` and
// `family_name`.
//
// Under normal operating conditions, newly created or updated customer profiles become available
// for the search operation in well under 30 seconds. Occasionally, propagation of the new or updated
// profiles can take closer to one minute or longer, especially during network incidents and outages.
func (c *Client) Search(
	ctx context.Context,
	request *v40.SearchCustomersRequest,
	opts ...option.RequestOption,
) (*v40.SearchCustomersResponse, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://connect.squareup.com",
	)
	endpointURL := baseURL + "/v2/customers/search"
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)
	headers.Set("Content-Type", "application/json")

	var response *v40.SearchCustomersResponse
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPost,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         request,
			Response:        &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Returns details for a single customer.
func (c *Client) Get(
	ctx context.Context,
	request *v40.CustomersGetRequest,
	opts ...option.RequestOption,
) (*v40.GetCustomerResponse, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://connect.squareup.com",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/v2/customers/%v",
		request.CustomerID,
	)
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)

	var response *v40.GetCustomerResponse
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodGet,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Updates a customer profile. This endpoint supports sparse updates, so only new or changed fields are required in the request.
// To add or update a field, specify the new value. To remove a field, specify `null`.
//
// To update a customer profile that was created by merging existing profiles, you must use the ID of the newly created profile.
func (c *Client) Update(
	ctx context.Context,
	request *v40.UpdateCustomerRequest,
	opts ...option.RequestOption,
) (*v40.UpdateCustomerResponse, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://connect.squareup.com",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/v2/customers/%v",
		request.CustomerID,
	)
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)
	headers.Set("Content-Type", "application/json")

	var response *v40.UpdateCustomerResponse
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPut,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         request,
			Response:        &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Deletes a customer profile from a business.
//
// To delete a customer profile that was created by merging existing profiles, you must use the ID of the newly created profile.
func (c *Client) Delete(
	ctx context.Context,
	request *v40.CustomersDeleteRequest,
	opts ...option.RequestOption,
) (*v40.DeleteCustomerResponse, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://connect.squareup.com",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/v2/customers/%v",
		request.CustomerID,
	)
	queryParams, err := internal.QueryValues(request)
	if err != nil {
		return nil, err
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)

	var response *v40.DeleteCustomerResponse
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodDelete,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}
