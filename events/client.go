// Code generated by Fern. DO NOT EDIT.

package events

import (
	context "context"
	v2 "github.com/square/square-go-sdk/v2"
	core "github.com/square/square-go-sdk/v2/core"
	internal "github.com/square/square-go-sdk/v2/internal"
	option "github.com/square/square-go-sdk/v2/option"
	http "net/http"
	os "os"
)

type Client struct {
	WithRawResponse *RawClient

	baseURL string
	caller  *internal.Caller
	header  http.Header
}

func NewClient(opts ...option.RequestOption) *Client {
	options := core.NewRequestOptions(opts...)
	if options.Token == "" {
		options.Token = os.Getenv("SQUARE_TOKEN")
	}
	if options.Version == "" {
		options.Version = os.Getenv("VERSION")
	}
	return &Client{
		WithRawResponse: NewRawClient(options),
		baseURL:         options.BaseURL,
		caller: internal.NewCaller(
			&internal.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
		header: options.ToHeader(),
	}
}

// Search for Square API events that occur within a 28-day timeframe.
func (c *Client) SearchEvents(
	ctx context.Context,
	request *v2.SearchEventsRequest,
	opts ...option.RequestOption,
) (*v2.SearchEventsResponse, error) {
	response, err := c.WithRawResponse.SearchEvents(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Disables events to prevent them from being searchable.
// All events are disabled by default. You must enable events to make them searchable.
// Disabling events for a specific time period prevents them from being searchable, even if you re-enable them later.
func (c *Client) DisableEvents(
	ctx context.Context,
	opts ...option.RequestOption,
) (*v2.DisableEventsResponse, error) {
	response, err := c.WithRawResponse.DisableEvents(
		ctx,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Enables events to make them searchable. Only events that occur while in the enabled state are searchable.
func (c *Client) EnableEvents(
	ctx context.Context,
	opts ...option.RequestOption,
) (*v2.EnableEventsResponse, error) {
	response, err := c.WithRawResponse.EnableEvents(
		ctx,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Lists all event types that you can subscribe to as webhooks or query using the Events API.
func (c *Client) ListEventTypes(
	ctx context.Context,
	request *v2.ListEventTypesRequest,
	opts ...option.RequestOption,
) (*v2.ListEventTypesResponse, error) {
	response, err := c.WithRawResponse.ListEventTypes(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}
