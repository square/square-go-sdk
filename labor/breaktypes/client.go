// Code generated by Fern. DO NOT EDIT.

package breaktypes

import (
	context "context"
	v2 "github.com/square/square-go-sdk/v2"
	core "github.com/square/square-go-sdk/v2/core"
	internal "github.com/square/square-go-sdk/v2/internal"
	labor "github.com/square/square-go-sdk/v2/labor"
	option "github.com/square/square-go-sdk/v2/option"
	http "net/http"
	os "os"
)

type Client struct {
	WithRawResponse *RawClient

	baseURL string
	caller  *internal.Caller
	header  http.Header
}

func NewClient(opts ...option.RequestOption) *Client {
	options := core.NewRequestOptions(opts...)
	if options.Token == "" {
		options.Token = os.Getenv("SQUARE_TOKEN")
	}
	if options.Version == "" {
		options.Version = os.Getenv("VERSION")
	}
	return &Client{
		WithRawResponse: NewRawClient(options),
		baseURL:         options.BaseURL,
		caller: internal.NewCaller(
			&internal.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
		header: options.ToHeader(),
	}
}

// Returns a paginated list of `BreakType` instances for a business.
func (c *Client) List(
	ctx context.Context,
	request *labor.ListBreakTypesRequest,
	opts ...option.RequestOption,
) (*core.Page[*v2.BreakType], error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://connect.squareup.com",
	)
	endpointURL := baseURL + "/v2/labor/break-types"
	queryParams, err := internal.QueryValues(request)
	if err != nil {
		return nil, err
	}
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)
	prepareCall := func(pageRequest *internal.PageRequest[*string]) *internal.CallParams {
		if pageRequest.Cursor != nil {
			queryParams.Set("cursor", *pageRequest.Cursor)
		}
		nextURL := endpointURL
		if len(queryParams) > 0 {
			nextURL += "?" + queryParams.Encode()
		}
		return &internal.CallParams{
			URL:             nextURL,
			Method:          http.MethodGet,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        pageRequest.Response,
		}
	}
	readPageResponse := func(response *v2.ListBreakTypesResponse) *internal.PageResponse[*string, *v2.BreakType] {
		var zeroValue *string
		next := response.GetCursor()
		results := response.GetBreakTypes()
		return &internal.PageResponse[*string, *v2.BreakType]{
			Next:    next,
			Results: results,
			Done:    next == zeroValue,
		}
	}
	pager := internal.NewCursorPager(
		c.caller,
		prepareCall,
		readPageResponse,
	)
	return pager.GetPage(ctx, request.Cursor)
}

// Creates a new `BreakType`.
//
// A `BreakType` is a template for creating `Break` objects.
// You must provide the following values in your request to this
// endpoint:
//
// - `location_id`
// - `break_name`
// - `expected_duration`
// - `is_paid`
//
// You can only have three `BreakType` instances per location. If you attempt to add a fourth
// `BreakType` for a location, an `INVALID_REQUEST_ERROR` "Exceeded limit of 3 breaks per location."
// is returned.
func (c *Client) Create(
	ctx context.Context,
	request *labor.CreateBreakTypeRequest,
	opts ...option.RequestOption,
) (*v2.CreateBreakTypeResponse, error) {
	response, err := c.WithRawResponse.Create(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Returns a single `BreakType` specified by `id`.
func (c *Client) Get(
	ctx context.Context,
	request *labor.GetBreakTypesRequest,
	opts ...option.RequestOption,
) (*v2.GetBreakTypeResponse, error) {
	response, err := c.WithRawResponse.Get(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Updates an existing `BreakType`.
func (c *Client) Update(
	ctx context.Context,
	request *labor.UpdateBreakTypeRequest,
	opts ...option.RequestOption,
) (*v2.UpdateBreakTypeResponse, error) {
	response, err := c.WithRawResponse.Update(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Deletes an existing `BreakType`.
//
// A `BreakType` can be deleted even if it is referenced from a `Shift`.
func (c *Client) Delete(
	ctx context.Context,
	request *labor.DeleteBreakTypesRequest,
	opts ...option.RequestOption,
) (*v2.DeleteBreakTypeResponse, error) {
	response, err := c.WithRawResponse.Delete(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}
