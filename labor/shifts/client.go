// This file was auto-generated by Fern from our API Definition.

package shifts

import (
	context "context"
	squaregosdk "github.com/square/square-go-sdk"
	core "github.com/square/square-go-sdk/core"
	internal "github.com/square/square-go-sdk/internal"
	labor "github.com/square/square-go-sdk/labor"
	option "github.com/square/square-go-sdk/option"
	http "net/http"
	os "os"
)

type Client struct {
	baseURL string
	caller  *internal.Caller
	header  http.Header
}

func NewClient(opts ...option.RequestOption) *Client {
	options := core.NewRequestOptions(opts...)
	if options.Token == "" {
		options.Token = os.Getenv("SQUARE_TOKEN")
	}
	if options.Version == "" {
		options.Version = os.Getenv("VERSION")
	}
	return &Client{
		baseURL: options.BaseURL,
		caller: internal.NewCaller(
			&internal.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
		header: options.ToHeader(),
	}
}

// Creates a new `Shift`.
//
// A `Shift` represents a complete workday for a single team member.
// You must provide the following values in your request to this
// endpoint:
//
// - `location_id`
// - `team_member_id`
// - `start_at`
//
// An attempt to create a new `Shift` can result in a `BAD_REQUEST` error when:
//
//   - The `status` of the new `Shift` is `OPEN` and the team member has another
//     shift with an `OPEN` status.
//   - The `start_at` date is in the future.
//   - The `start_at` or `end_at` date overlaps another shift for the same team member.
//   - The `Break` instances are set in the request and a break `start_at`
//     is before the `Shift.start_at`, a break `end_at` is after
//     the `Shift.end_at`, or both.
func (c *Client) Create(
	ctx context.Context,
	request *labor.CreateShiftRequest,
	opts ...option.RequestOption,
) (*squaregosdk.CreateShiftResponse, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://connect.squareup.com",
	)
	endpointURL := baseURL + "/v2/labor/shifts"
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)
	headers.Set("Content-Type", "application/json")

	var response *squaregosdk.CreateShiftResponse
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPost,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         request,
			Response:        &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Returns a paginated list of `Shift` records for a business.
// The list to be returned can be filtered by:
//
// - Location IDs
// - Team member IDs
// - Shift status (`OPEN` or `CLOSED`)
// - Shift start
// - Shift end
// - Workday details
//
// The list can be sorted by:
//
// - `START_AT`
// - `END_AT`
// - `CREATED_AT`
// - `UPDATED_AT`
func (c *Client) Search(
	ctx context.Context,
	request *labor.SearchShiftsRequest,
	opts ...option.RequestOption,
) (*squaregosdk.SearchShiftsResponse, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://connect.squareup.com",
	)
	endpointURL := baseURL + "/v2/labor/shifts/search"
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)
	headers.Set("Content-Type", "application/json")

	var response *squaregosdk.SearchShiftsResponse
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPost,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         request,
			Response:        &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Returns a single `Shift` specified by `id`.
func (c *Client) Get(
	ctx context.Context,
	request *labor.ShiftsGetRequest,
	opts ...option.RequestOption,
) (*squaregosdk.GetShiftResponse, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://connect.squareup.com",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/v2/labor/shifts/%v",
		request.ID,
	)
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)

	var response *squaregosdk.GetShiftResponse
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodGet,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Updates an existing `Shift`.
//
// When adding a `Break` to a `Shift`, any earlier `Break` instances in the `Shift` have
// the `end_at` property set to a valid RFC-3339 datetime string.
//
// When closing a `Shift`, all `Break` instances in the `Shift` must be complete with `end_at`
// set on each `Break`.
func (c *Client) Update(
	ctx context.Context,
	request *labor.UpdateShiftRequest,
	opts ...option.RequestOption,
) (*squaregosdk.UpdateShiftResponse, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://connect.squareup.com",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/v2/labor/shifts/%v",
		request.ID,
	)
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)
	headers.Set("Content-Type", "application/json")

	var response *squaregosdk.UpdateShiftResponse
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPut,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         request,
			Response:        &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Deletes a `Shift`.
func (c *Client) Delete(
	ctx context.Context,
	request *labor.ShiftsDeleteRequest,
	opts ...option.RequestOption,
) (*squaregosdk.DeleteShiftResponse, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://connect.squareup.com",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/v2/labor/shifts/%v",
		request.ID,
	)
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)

	var response *squaregosdk.DeleteShiftResponse
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodDelete,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}
