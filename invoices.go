// This file was auto-generated by Fern from our API Definition.

package square

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/square/square-go-sdk/internal"
	io "io"
)

type CreateInvoiceAttachmentRequest struct {
	// The ID of the [invoice](entity:Invoice) to attach the file to.
	InvoiceID string      `json:"-" url:"-"`
	ImageFile io.Reader   `json:"-" url:"-"`
	Request   interface{} `json:"request,omitempty" url:"-"`
}

type DeleteInvoiceAttachmentRequest struct {
	// The ID of the [invoice](entity:Invoice) to delete the attachment from.
	InvoiceID string `json:"-" url:"-"`
	// The ID of the [attachment](entity:InvoiceAttachment) to delete.
	AttachmentID string `json:"-" url:"-"`
}

type CancelInvoiceRequest struct {
	// The ID of the [invoice](entity:Invoice) to cancel.
	InvoiceID string `json:"-" url:"-"`
	// The version of the [invoice](entity:Invoice) to cancel.
	// If you do not know the version, you can call
	// [GetInvoice](api-endpoint:Invoices-GetInvoice) or [ListInvoices](api-endpoint:Invoices-ListInvoices).
	Version int `json:"version" url:"-"`
}

type CreateInvoiceRequest struct {
	// The invoice to create.
	Invoice *Invoice `json:"invoice,omitempty" url:"-"`
	// A unique string that identifies the `CreateInvoice` request. If you do not
	// provide `idempotency_key` (or provide an empty string as the value), the endpoint
	// treats each request as independent.
	//
	// For more information, see [Idempotency](https://developer.squareup.com/docs/build-basics/common-api-patterns/idempotency).
	IdempotencyKey *string `json:"idempotency_key,omitempty" url:"-"`
}

type InvoicesDeleteRequest struct {
	// The ID of the invoice to delete.
	InvoiceID string `json:"-" url:"-"`
	// The version of the [invoice](entity:Invoice) to delete.
	// If you do not know the version, you can call [GetInvoice](api-endpoint:Invoices-GetInvoice) or
	// [ListInvoices](api-endpoint:Invoices-ListInvoices).
	Version *int `json:"-" url:"version,omitempty"`
}

type InvoicesGetRequest struct {
	// The ID of the invoice to retrieve.
	InvoiceID string `json:"-" url:"-"`
}

type InvoicesListRequest struct {
	// The ID of the location for which to list invoices.
	LocationID string `json:"-" url:"location_id"`
	// A pagination cursor returned by a previous call to this endpoint.
	// Provide this cursor to retrieve the next set of results for your original query.
	//
	// For more information, see [Pagination](https://developer.squareup.com/docs/build-basics/common-api-patterns/pagination).
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// The maximum number of invoices to return (200 is the maximum `limit`).
	// If not provided, the server uses a default limit of 100 invoices.
	Limit *int `json:"-" url:"limit,omitempty"`
}

type PublishInvoiceRequest struct {
	// The ID of the invoice to publish.
	InvoiceID string `json:"-" url:"-"`
	// The version of the [invoice](entity:Invoice) to publish.
	// This must match the current version of the invoice; otherwise, the request is rejected.
	Version int `json:"version" url:"-"`
	// A unique string that identifies the `PublishInvoice` request. If you do not
	// provide `idempotency_key` (or provide an empty string as the value), the endpoint
	// treats each request as independent.
	//
	// For more information, see [Idempotency](https://developer.squareup.com/docs/build-basics/common-api-patterns/idempotency).
	IdempotencyKey *string `json:"idempotency_key,omitempty" url:"-"`
}

type SearchInvoicesRequest struct {
	// Describes the query criteria for searching invoices.
	Query *InvoiceQuery `json:"query,omitempty" url:"-"`
	// The maximum number of invoices to return (200 is the maximum `limit`).
	// If not provided, the server uses a default limit of 100 invoices.
	Limit *int `json:"limit,omitempty" url:"-"`
	// A pagination cursor returned by a previous call to this endpoint.
	// Provide this cursor to retrieve the next set of results for your original query.
	//
	// For more information, see [Pagination](https://developer.squareup.com/docs/build-basics/common-api-patterns/pagination).
	Cursor *string `json:"cursor,omitempty" url:"-"`
}

// The response returned by the `CancelInvoice` request.
type CancelInvoiceResponse struct {
	// The canceled invoice.
	Invoice *Invoice `json:"invoice,omitempty" url:"invoice,omitempty"`
	// Information about errors encountered during the request.
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CancelInvoiceResponse) GetInvoice() *Invoice {
	if c == nil {
		return nil
	}
	return c.Invoice
}

func (c *CancelInvoiceResponse) GetErrors() []*Error {
	if c == nil {
		return nil
	}
	return c.Errors
}

func (c *CancelInvoiceResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CancelInvoiceResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CancelInvoiceResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CancelInvoiceResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CancelInvoiceResponse) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// Represents a [CreateInvoiceAttachment](api-endpoint:Invoices-CreateInvoiceAttachment) response.
type CreateInvoiceAttachmentResponse struct {
	// Metadata about the attachment that was added to the invoice.
	Attachment *InvoiceAttachment `json:"attachment,omitempty" url:"attachment,omitempty"`
	// Information about errors encountered during the request.
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CreateInvoiceAttachmentResponse) GetAttachment() *InvoiceAttachment {
	if c == nil {
		return nil
	}
	return c.Attachment
}

func (c *CreateInvoiceAttachmentResponse) GetErrors() []*Error {
	if c == nil {
		return nil
	}
	return c.Errors
}

func (c *CreateInvoiceAttachmentResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateInvoiceAttachmentResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateInvoiceAttachmentResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateInvoiceAttachmentResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateInvoiceAttachmentResponse) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// The response returned by the `CreateInvoice` request.
type CreateInvoiceResponse struct {
	// The newly created invoice.
	Invoice *Invoice `json:"invoice,omitempty" url:"invoice,omitempty"`
	// Information about errors encountered during the request.
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CreateInvoiceResponse) GetInvoice() *Invoice {
	if c == nil {
		return nil
	}
	return c.Invoice
}

func (c *CreateInvoiceResponse) GetErrors() []*Error {
	if c == nil {
		return nil
	}
	return c.Errors
}

func (c *CreateInvoiceResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateInvoiceResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateInvoiceResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateInvoiceResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateInvoiceResponse) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// Represents a [DeleteInvoiceAttachment](api-endpoint:Invoices-DeleteInvoiceAttachment) response.
type DeleteInvoiceAttachmentResponse struct {
	// Information about errors encountered during the request.
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DeleteInvoiceAttachmentResponse) GetErrors() []*Error {
	if d == nil {
		return nil
	}
	return d.Errors
}

func (d *DeleteInvoiceAttachmentResponse) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DeleteInvoiceAttachmentResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler DeleteInvoiceAttachmentResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DeleteInvoiceAttachmentResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DeleteInvoiceAttachmentResponse) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

// Describes a `DeleteInvoice` response.
type DeleteInvoiceResponse struct {
	// Information about errors encountered during the request.
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DeleteInvoiceResponse) GetErrors() []*Error {
	if d == nil {
		return nil
	}
	return d.Errors
}

func (d *DeleteInvoiceResponse) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DeleteInvoiceResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler DeleteInvoiceResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DeleteInvoiceResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DeleteInvoiceResponse) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

// Describes a `GetInvoice` response.
type GetInvoiceResponse struct {
	// The invoice requested.
	Invoice *Invoice `json:"invoice,omitempty" url:"invoice,omitempty"`
	// Information about errors encountered during the request.
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetInvoiceResponse) GetInvoice() *Invoice {
	if g == nil {
		return nil
	}
	return g.Invoice
}

func (g *GetInvoiceResponse) GetErrors() []*Error {
	if g == nil {
		return nil
	}
	return g.Errors
}

func (g *GetInvoiceResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetInvoiceResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetInvoiceResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetInvoiceResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetInvoiceResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

// Stores information about an invoice. You use the Invoices API to create and manage
// invoices. For more information, see [Invoices API Overview](https://developer.squareup.com/docs/invoices-api/overview).
type Invoice struct {
	// The Square-assigned ID of the invoice.
	ID *string `json:"id,omitempty" url:"id,omitempty"`
	// The Square-assigned version number, which is incremented each time an update is committed to the invoice.
	Version *int `json:"version,omitempty" url:"version,omitempty"`
	// The ID of the location that this invoice is associated with.
	//
	// If specified in a `CreateInvoice` request, the value must match the `location_id` of the associated order.
	LocationID *string `json:"location_id,omitempty" url:"location_id,omitempty"`
	// The ID of the [order](entity:Order) for which the invoice is created.
	// This field is required when creating an invoice, and the order must be in the `OPEN` state.
	//
	// To view the line items and other information for the associated order, call the
	// [RetrieveOrder](api-endpoint:Orders-RetrieveOrder) endpoint using the order ID.
	OrderID *string `json:"order_id,omitempty" url:"order_id,omitempty"`
	// The customer who receives the invoice. This customer data is displayed on the invoice and used by Square to deliver the invoice.
	//
	// This field is required to publish an invoice, and it must specify the `customer_id`.
	PrimaryRecipient *InvoiceRecipient `json:"primary_recipient,omitempty" url:"primary_recipient,omitempty"`
	// The payment schedule for the invoice, represented by one or more payment requests that
	// define payment settings, such as amount due and due date. An invoice supports the following payment request combinations:
	//
	// - One balance
	// - One deposit with one balance
	// - 2–12 installments
	// - One deposit with 2–12 installments
	//
	// This field is required when creating an invoice. It must contain at least one payment request.
	// All payment requests for the invoice must equal the total order amount. For more information, see
	// [Configuring payment requests](https://developer.squareup.com/docs/invoices-api/create-publish-invoices#payment-requests).
	//
	// Adding `INSTALLMENT` payment requests to an invoice requires an
	// [Invoices Plus subscription](https://developer.squareup.com/docs/invoices-api/overview#invoices-plus-subscription).
	PaymentRequests []*InvoicePaymentRequest `json:"payment_requests,omitempty" url:"payment_requests,omitempty"`
	// The delivery method that Square uses to send the invoice, reminders, and receipts to
	// the customer. After the invoice is published, Square processes the invoice based on the delivery
	// method and payment request settings, either immediately or on the `scheduled_at` date, if specified.
	// For example, Square might send the invoice or receipt for an automatic payment. For invoices with
	// automatic payments, this field must be set to `EMAIL`.
	//
	// One of the following is required when creating an invoice:
	//
	//   - (Recommended) This `delivery_method` field. To configure an automatic payment, the
	//     `automatic_payment_source` field of the payment request is also required.
	//   - The deprecated `request_method` field of the payment request. Note that `invoice`
	//     objects returned in responses do not include `request_method`.
	//     See [InvoiceDeliveryMethod](#type-invoicedeliverymethod) for possible values
	DeliveryMethod *InvoiceDeliveryMethod `json:"delivery_method,omitempty" url:"delivery_method,omitempty"`
	// A user-friendly invoice number that is displayed on the invoice. The value is unique within a location.
	// If not provided when creating an invoice, Square assigns a value.
	// It increments from 1 and is padded with zeros making it 7 characters long
	// (for example, 0000001 and 0000002).
	InvoiceNumber *string `json:"invoice_number,omitempty" url:"invoice_number,omitempty"`
	// The title of the invoice, which is displayed on the invoice.
	Title *string `json:"title,omitempty" url:"title,omitempty"`
	// The description of the invoice, which is displayed on the invoice.
	Description *string `json:"description,omitempty" url:"description,omitempty"`
	// The timestamp when the invoice is scheduled for processing, in RFC 3339 format.
	// After the invoice is published, Square processes the invoice on the specified date,
	// according to the delivery method and payment request settings.
	//
	// If the field is not set, Square processes the invoice immediately after it is published.
	ScheduledAt *string `json:"scheduled_at,omitempty" url:"scheduled_at,omitempty"`
	// The URL of the Square-hosted invoice page.
	// After you publish the invoice using the `PublishInvoice` endpoint, Square hosts the invoice
	// page and returns the page URL in the response.
	PublicURL *string `json:"public_url,omitempty" url:"public_url,omitempty"`
	// The current amount due for the invoice. In addition to the
	// amount due on the next payment request, this includes any overdue payment amounts.
	NextPaymentAmountMoney *Money `json:"next_payment_amount_money,omitempty" url:"next_payment_amount_money,omitempty"`
	// The status of the invoice.
	// See [InvoiceStatus](#type-invoicestatus) for possible values
	Status *InvoiceStatus `json:"status,omitempty" url:"status,omitempty"`
	// The time zone used to interpret calendar dates on the invoice, such as `due_date`.
	// When an invoice is created, this field is set to the `timezone` specified for the seller
	// location. The value cannot be changed.
	//
	// For example, a payment `due_date` of 2021-03-09 with a `timezone` of America/Los_Angeles
	// becomes overdue at midnight on March 9 in America/Los_Angeles (which equals a UTC timestamp
	// of 2021-03-10T08:00:00Z).
	Timezone *string `json:"timezone,omitempty" url:"timezone,omitempty"`
	// The timestamp when the invoice was created, in RFC 3339 format.
	CreatedAt *string `json:"created_at,omitempty" url:"created_at,omitempty"`
	// The timestamp when the invoice was last updated, in RFC 3339 format.
	UpdatedAt *string `json:"updated_at,omitempty" url:"updated_at,omitempty"`
	// The payment methods that customers can use to pay the invoice on the Square-hosted
	// invoice page. This setting is independent of any automatic payment requests for the invoice.
	//
	// This field is required when creating an invoice and must set at least one payment method to `true`.
	AcceptedPaymentMethods *InvoiceAcceptedPaymentMethods `json:"accepted_payment_methods,omitempty" url:"accepted_payment_methods,omitempty"`
	// Additional seller-defined fields that are displayed on the invoice. For more information, see
	// [Custom fields](https://developer.squareup.com/docs/invoices-api/overview#custom-fields).
	//
	// Adding custom fields to an invoice requires an
	// [Invoices Plus subscription](https://developer.squareup.com/docs/invoices-api/overview#invoices-plus-subscription).
	//
	// Max: 2 custom fields
	CustomFields []*InvoiceCustomField `json:"custom_fields,omitempty" url:"custom_fields,omitempty"`
	// The ID of the [subscription](entity:Subscription) associated with the invoice.
	// This field is present only on subscription billing invoices.
	SubscriptionID *string `json:"subscription_id,omitempty" url:"subscription_id,omitempty"`
	// The date of the sale or the date that the service is rendered, in `YYYY-MM-DD` format.
	// This field can be used to specify a past or future date which is displayed on the invoice.
	SaleOrServiceDate *string `json:"sale_or_service_date,omitempty" url:"sale_or_service_date,omitempty"`
	// **France only.** The payment terms and conditions that are displayed on the invoice. For more information,
	// see [Payment conditions](https://developer.squareup.com/docs/invoices-api/overview#payment-conditions).
	//
	// For countries other than France, Square returns an `INVALID_REQUEST_ERROR` with a `BAD_REQUEST` code and
	// "Payment conditions are not supported for this location's country" detail if this field is included in `CreateInvoice` or `UpdateInvoice` requests.
	PaymentConditions *string `json:"payment_conditions,omitempty" url:"payment_conditions,omitempty"`
	// Indicates whether to allow a customer to save a credit or debit card as a card on file or a bank transfer as a
	// bank account on file. If `true`, Square displays a **Save my card on file** or **Save my bank on file** checkbox on the
	// invoice payment page. Stored payment information can be used for future automatic payments. The default value is `false`.
	StorePaymentMethodEnabled *bool `json:"store_payment_method_enabled,omitempty" url:"store_payment_method_enabled,omitempty"`
	// Metadata about the attachments on the invoice. Invoice attachments are managed using the
	// [CreateInvoiceAttachment](api-endpoint:Invoices-CreateInvoiceAttachment) and [DeleteInvoiceAttachment](api-endpoint:Invoices-DeleteInvoiceAttachment) endpoints.
	Attachments []*InvoiceAttachment `json:"attachments,omitempty" url:"attachments,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (i *Invoice) GetID() *string {
	if i == nil {
		return nil
	}
	return i.ID
}

func (i *Invoice) GetVersion() *int {
	if i == nil {
		return nil
	}
	return i.Version
}

func (i *Invoice) GetLocationID() *string {
	if i == nil {
		return nil
	}
	return i.LocationID
}

func (i *Invoice) GetOrderID() *string {
	if i == nil {
		return nil
	}
	return i.OrderID
}

func (i *Invoice) GetPrimaryRecipient() *InvoiceRecipient {
	if i == nil {
		return nil
	}
	return i.PrimaryRecipient
}

func (i *Invoice) GetPaymentRequests() []*InvoicePaymentRequest {
	if i == nil {
		return nil
	}
	return i.PaymentRequests
}

func (i *Invoice) GetDeliveryMethod() *InvoiceDeliveryMethod {
	if i == nil {
		return nil
	}
	return i.DeliveryMethod
}

func (i *Invoice) GetInvoiceNumber() *string {
	if i == nil {
		return nil
	}
	return i.InvoiceNumber
}

func (i *Invoice) GetTitle() *string {
	if i == nil {
		return nil
	}
	return i.Title
}

func (i *Invoice) GetDescription() *string {
	if i == nil {
		return nil
	}
	return i.Description
}

func (i *Invoice) GetScheduledAt() *string {
	if i == nil {
		return nil
	}
	return i.ScheduledAt
}

func (i *Invoice) GetPublicURL() *string {
	if i == nil {
		return nil
	}
	return i.PublicURL
}

func (i *Invoice) GetNextPaymentAmountMoney() *Money {
	if i == nil {
		return nil
	}
	return i.NextPaymentAmountMoney
}

func (i *Invoice) GetStatus() *InvoiceStatus {
	if i == nil {
		return nil
	}
	return i.Status
}

func (i *Invoice) GetTimezone() *string {
	if i == nil {
		return nil
	}
	return i.Timezone
}

func (i *Invoice) GetCreatedAt() *string {
	if i == nil {
		return nil
	}
	return i.CreatedAt
}

func (i *Invoice) GetUpdatedAt() *string {
	if i == nil {
		return nil
	}
	return i.UpdatedAt
}

func (i *Invoice) GetAcceptedPaymentMethods() *InvoiceAcceptedPaymentMethods {
	if i == nil {
		return nil
	}
	return i.AcceptedPaymentMethods
}

func (i *Invoice) GetCustomFields() []*InvoiceCustomField {
	if i == nil {
		return nil
	}
	return i.CustomFields
}

func (i *Invoice) GetSubscriptionID() *string {
	if i == nil {
		return nil
	}
	return i.SubscriptionID
}

func (i *Invoice) GetSaleOrServiceDate() *string {
	if i == nil {
		return nil
	}
	return i.SaleOrServiceDate
}

func (i *Invoice) GetPaymentConditions() *string {
	if i == nil {
		return nil
	}
	return i.PaymentConditions
}

func (i *Invoice) GetStorePaymentMethodEnabled() *bool {
	if i == nil {
		return nil
	}
	return i.StorePaymentMethodEnabled
}

func (i *Invoice) GetAttachments() []*InvoiceAttachment {
	if i == nil {
		return nil
	}
	return i.Attachments
}

func (i *Invoice) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *Invoice) UnmarshalJSON(data []byte) error {
	type unmarshaler Invoice
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = Invoice(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *i)
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties
	i.rawJSON = json.RawMessage(data)
	return nil
}

func (i *Invoice) String() string {
	if len(i.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(i.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

// The payment methods that customers can use to pay an [invoice](entity:Invoice) on the Square-hosted invoice payment page.
type InvoiceAcceptedPaymentMethods struct {
	// Indicates whether credit card or debit card payments are accepted. The default value is `false`.
	Card *bool `json:"card,omitempty" url:"card,omitempty"`
	// Indicates whether Square gift card payments are accepted. The default value is `false`.
	SquareGiftCard *bool `json:"square_gift_card,omitempty" url:"square_gift_card,omitempty"`
	// Indicates whether ACH bank transfer payments are accepted. The default value is `false`.
	BankAccount *bool `json:"bank_account,omitempty" url:"bank_account,omitempty"`
	// Indicates whether Afterpay (also known as Clearpay) payments are accepted. The default value is `false`.
	//
	// This option is allowed only for invoices that have a single payment request of the `BALANCE` type. This payment method is
	// supported if the seller account accepts Afterpay payments and the seller location is in a country where Afterpay
	// invoice payments are supported. As a best practice, consider enabling an additional payment method when allowing
	// `buy_now_pay_later` payments. For more information, including detailed requirements and processing limits, see
	// [Buy Now Pay Later payments with Afterpay](https://developer.squareup.com/docs/invoices-api/overview#buy-now-pay-later).
	BuyNowPayLater *bool `json:"buy_now_pay_later,omitempty" url:"buy_now_pay_later,omitempty"`
	// Indicates whether Cash App payments are accepted. The default value is `false`.
	//
	// This payment method is supported only for seller [locations](entity:Location) in the United States.
	CashAppPay *bool `json:"cash_app_pay,omitempty" url:"cash_app_pay,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (i *InvoiceAcceptedPaymentMethods) GetCard() *bool {
	if i == nil {
		return nil
	}
	return i.Card
}

func (i *InvoiceAcceptedPaymentMethods) GetSquareGiftCard() *bool {
	if i == nil {
		return nil
	}
	return i.SquareGiftCard
}

func (i *InvoiceAcceptedPaymentMethods) GetBankAccount() *bool {
	if i == nil {
		return nil
	}
	return i.BankAccount
}

func (i *InvoiceAcceptedPaymentMethods) GetBuyNowPayLater() *bool {
	if i == nil {
		return nil
	}
	return i.BuyNowPayLater
}

func (i *InvoiceAcceptedPaymentMethods) GetCashAppPay() *bool {
	if i == nil {
		return nil
	}
	return i.CashAppPay
}

func (i *InvoiceAcceptedPaymentMethods) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *InvoiceAcceptedPaymentMethods) UnmarshalJSON(data []byte) error {
	type unmarshaler InvoiceAcceptedPaymentMethods
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = InvoiceAcceptedPaymentMethods(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *i)
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties
	i.rawJSON = json.RawMessage(data)
	return nil
}

func (i *InvoiceAcceptedPaymentMethods) String() string {
	if len(i.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(i.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

// Represents a file attached to an [invoice](entity:Invoice).
type InvoiceAttachment struct {
	// The Square-assigned ID of the attachment.
	ID *string `json:"id,omitempty" url:"id,omitempty"`
	// The file name of the attachment, which is displayed on the invoice.
	Filename *string `json:"filename,omitempty" url:"filename,omitempty"`
	// The description of the attachment, which is displayed on the invoice.
	// This field maps to the seller-defined **Message** field.
	Description *string `json:"description,omitempty" url:"description,omitempty"`
	// The file size of the attachment in bytes.
	Filesize *int `json:"filesize,omitempty" url:"filesize,omitempty"`
	// The MD5 hash that was generated from the file contents.
	Hash *string `json:"hash,omitempty" url:"hash,omitempty"`
	// The mime type of the attachment.
	// The following mime types are supported:
	// image/gif, image/jpeg, image/png, image/tiff, image/bmp, application/pdf.
	MimeType *string `json:"mime_type,omitempty" url:"mime_type,omitempty"`
	// The timestamp when the attachment was uploaded, in RFC 3339 format.
	UploadedAt *string `json:"uploaded_at,omitempty" url:"uploaded_at,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (i *InvoiceAttachment) GetID() *string {
	if i == nil {
		return nil
	}
	return i.ID
}

func (i *InvoiceAttachment) GetFilename() *string {
	if i == nil {
		return nil
	}
	return i.Filename
}

func (i *InvoiceAttachment) GetDescription() *string {
	if i == nil {
		return nil
	}
	return i.Description
}

func (i *InvoiceAttachment) GetFilesize() *int {
	if i == nil {
		return nil
	}
	return i.Filesize
}

func (i *InvoiceAttachment) GetHash() *string {
	if i == nil {
		return nil
	}
	return i.Hash
}

func (i *InvoiceAttachment) GetMimeType() *string {
	if i == nil {
		return nil
	}
	return i.MimeType
}

func (i *InvoiceAttachment) GetUploadedAt() *string {
	if i == nil {
		return nil
	}
	return i.UploadedAt
}

func (i *InvoiceAttachment) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *InvoiceAttachment) UnmarshalJSON(data []byte) error {
	type unmarshaler InvoiceAttachment
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = InvoiceAttachment(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *i)
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties
	i.rawJSON = json.RawMessage(data)
	return nil
}

func (i *InvoiceAttachment) String() string {
	if len(i.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(i.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

// Indicates the automatic payment method for an [invoice payment request](entity:InvoicePaymentRequest).
type InvoiceAutomaticPaymentSource string

const (
	InvoiceAutomaticPaymentSourceNone       InvoiceAutomaticPaymentSource = "NONE"
	InvoiceAutomaticPaymentSourceCardOnFile InvoiceAutomaticPaymentSource = "CARD_ON_FILE"
	InvoiceAutomaticPaymentSourceBankOnFile InvoiceAutomaticPaymentSource = "BANK_ON_FILE"
)

func NewInvoiceAutomaticPaymentSourceFromString(s string) (InvoiceAutomaticPaymentSource, error) {
	switch s {
	case "NONE":
		return InvoiceAutomaticPaymentSourceNone, nil
	case "CARD_ON_FILE":
		return InvoiceAutomaticPaymentSourceCardOnFile, nil
	case "BANK_ON_FILE":
		return InvoiceAutomaticPaymentSourceBankOnFile, nil
	}
	var t InvoiceAutomaticPaymentSource
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (i InvoiceAutomaticPaymentSource) Ptr() *InvoiceAutomaticPaymentSource {
	return &i
}

// An additional seller-defined and customer-facing field to include on the invoice. For more information,
// see [Custom fields](https://developer.squareup.com/docs/invoices-api/overview#custom-fields).
//
// Adding custom fields to an invoice requires an
// [Invoices Plus subscription](https://developer.squareup.com/docs/invoices-api/overview#invoices-plus-subscription).
type InvoiceCustomField struct {
	// The label or title of the custom field. This field is required for a custom field.
	Label *string `json:"label,omitempty" url:"label,omitempty"`
	// The text of the custom field. If omitted, only the label is rendered.
	Value *string `json:"value,omitempty" url:"value,omitempty"`
	// The location of the custom field on the invoice. This field is required for a custom field.
	// See [InvoiceCustomFieldPlacement](#type-invoicecustomfieldplacement) for possible values
	Placement *InvoiceCustomFieldPlacement `json:"placement,omitempty" url:"placement,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (i *InvoiceCustomField) GetLabel() *string {
	if i == nil {
		return nil
	}
	return i.Label
}

func (i *InvoiceCustomField) GetValue() *string {
	if i == nil {
		return nil
	}
	return i.Value
}

func (i *InvoiceCustomField) GetPlacement() *InvoiceCustomFieldPlacement {
	if i == nil {
		return nil
	}
	return i.Placement
}

func (i *InvoiceCustomField) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *InvoiceCustomField) UnmarshalJSON(data []byte) error {
	type unmarshaler InvoiceCustomField
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = InvoiceCustomField(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *i)
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties
	i.rawJSON = json.RawMessage(data)
	return nil
}

func (i *InvoiceCustomField) String() string {
	if len(i.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(i.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

// Indicates where to render a custom field on the Square-hosted invoice page and in emailed or PDF
// copies of the invoice.
type InvoiceCustomFieldPlacement string

const (
	InvoiceCustomFieldPlacementAboveLineItems InvoiceCustomFieldPlacement = "ABOVE_LINE_ITEMS"
	InvoiceCustomFieldPlacementBelowLineItems InvoiceCustomFieldPlacement = "BELOW_LINE_ITEMS"
)

func NewInvoiceCustomFieldPlacementFromString(s string) (InvoiceCustomFieldPlacement, error) {
	switch s {
	case "ABOVE_LINE_ITEMS":
		return InvoiceCustomFieldPlacementAboveLineItems, nil
	case "BELOW_LINE_ITEMS":
		return InvoiceCustomFieldPlacementBelowLineItems, nil
	}
	var t InvoiceCustomFieldPlacement
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (i InvoiceCustomFieldPlacement) Ptr() *InvoiceCustomFieldPlacement {
	return &i
}

// Indicates how Square delivers the [invoice](entity:Invoice) to the customer.
type InvoiceDeliveryMethod string

const (
	InvoiceDeliveryMethodEmail         InvoiceDeliveryMethod = "EMAIL"
	InvoiceDeliveryMethodShareManually InvoiceDeliveryMethod = "SHARE_MANUALLY"
	InvoiceDeliveryMethodSms           InvoiceDeliveryMethod = "SMS"
)

func NewInvoiceDeliveryMethodFromString(s string) (InvoiceDeliveryMethod, error) {
	switch s {
	case "EMAIL":
		return InvoiceDeliveryMethodEmail, nil
	case "SHARE_MANUALLY":
		return InvoiceDeliveryMethodShareManually, nil
	case "SMS":
		return InvoiceDeliveryMethodSms, nil
	}
	var t InvoiceDeliveryMethod
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (i InvoiceDeliveryMethod) Ptr() *InvoiceDeliveryMethod {
	return &i
}

// Describes query filters to apply.
type InvoiceFilter struct {
	// Limits the search to the specified locations. A location is required.
	// In the current implementation, only one location can be specified.
	LocationIDs []string `json:"location_ids,omitempty" url:"location_ids,omitempty"`
	// Limits the search to the specified customers, within the specified locations.
	// Specifying a customer is optional. In the current implementation,
	// a maximum of one customer can be specified.
	CustomerIDs []string `json:"customer_ids,omitempty" url:"customer_ids,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (i *InvoiceFilter) GetLocationIDs() []string {
	if i == nil {
		return nil
	}
	return i.LocationIDs
}

func (i *InvoiceFilter) GetCustomerIDs() []string {
	if i == nil {
		return nil
	}
	return i.CustomerIDs
}

func (i *InvoiceFilter) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *InvoiceFilter) UnmarshalJSON(data []byte) error {
	type unmarshaler InvoiceFilter
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = InvoiceFilter(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *i)
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties
	i.rawJSON = json.RawMessage(data)
	return nil
}

func (i *InvoiceFilter) String() string {
	if len(i.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(i.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

// Describes a payment request reminder (automatic notification) that Square sends
// to the customer. You configure a reminder relative to the payment request
// `due_date`.
type InvoicePaymentReminder struct {
	// A Square-assigned ID that uniquely identifies the reminder within the
	// `InvoicePaymentRequest`.
	UID *string `json:"uid,omitempty" url:"uid,omitempty"`
	// The number of days before (a negative number) or after (a positive number)
	// the payment request `due_date` when the reminder is sent. For example, -3 indicates that
	// the reminder should be sent 3 days before the payment request `due_date`.
	RelativeScheduledDays *int `json:"relative_scheduled_days,omitempty" url:"relative_scheduled_days,omitempty"`
	// The reminder message.
	Message *string `json:"message,omitempty" url:"message,omitempty"`
	// The status of the reminder.
	// See [InvoicePaymentReminderStatus](#type-invoicepaymentreminderstatus) for possible values
	Status *InvoicePaymentReminderStatus `json:"status,omitempty" url:"status,omitempty"`
	// If sent, the timestamp when the reminder was sent, in RFC 3339 format.
	SentAt *string `json:"sent_at,omitempty" url:"sent_at,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (i *InvoicePaymentReminder) GetUID() *string {
	if i == nil {
		return nil
	}
	return i.UID
}

func (i *InvoicePaymentReminder) GetRelativeScheduledDays() *int {
	if i == nil {
		return nil
	}
	return i.RelativeScheduledDays
}

func (i *InvoicePaymentReminder) GetMessage() *string {
	if i == nil {
		return nil
	}
	return i.Message
}

func (i *InvoicePaymentReminder) GetStatus() *InvoicePaymentReminderStatus {
	if i == nil {
		return nil
	}
	return i.Status
}

func (i *InvoicePaymentReminder) GetSentAt() *string {
	if i == nil {
		return nil
	}
	return i.SentAt
}

func (i *InvoicePaymentReminder) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *InvoicePaymentReminder) UnmarshalJSON(data []byte) error {
	type unmarshaler InvoicePaymentReminder
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = InvoicePaymentReminder(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *i)
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties
	i.rawJSON = json.RawMessage(data)
	return nil
}

func (i *InvoicePaymentReminder) String() string {
	if len(i.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(i.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

// The status of a payment request reminder.
type InvoicePaymentReminderStatus string

const (
	InvoicePaymentReminderStatusPending       InvoicePaymentReminderStatus = "PENDING"
	InvoicePaymentReminderStatusNotApplicable InvoicePaymentReminderStatus = "NOT_APPLICABLE"
	InvoicePaymentReminderStatusSent          InvoicePaymentReminderStatus = "SENT"
)

func NewInvoicePaymentReminderStatusFromString(s string) (InvoicePaymentReminderStatus, error) {
	switch s {
	case "PENDING":
		return InvoicePaymentReminderStatusPending, nil
	case "NOT_APPLICABLE":
		return InvoicePaymentReminderStatusNotApplicable, nil
	case "SENT":
		return InvoicePaymentReminderStatusSent, nil
	}
	var t InvoicePaymentReminderStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (i InvoicePaymentReminderStatus) Ptr() *InvoicePaymentReminderStatus {
	return &i
}

// Represents a payment request for an [invoice](entity:Invoice). Invoices can specify a maximum
// of 13 payment requests, with up to 12 `INSTALLMENT` request types. For more information,
// see [Configuring payment requests](https://developer.squareup.com/docs/invoices-api/create-publish-invoices#payment-requests).
//
// Adding `INSTALLMENT` payment requests to an invoice requires an
// [Invoices Plus subscription](https://developer.squareup.com/docs/invoices-api/overview#invoices-plus-subscription).
type InvoicePaymentRequest struct {
	// The Square-generated ID of the payment request in an [invoice](entity:Invoice).
	UID *string `json:"uid,omitempty" url:"uid,omitempty"`
	// Indicates how Square processes the payment request. DEPRECATED at version 2021-01-21. Replaced by the
	// `Invoice.delivery_method` and `InvoicePaymentRequest.automatic_payment_source` fields.
	//
	// One of the following is required when creating an invoice:
	//
	//   - (Recommended) The `delivery_method` field of the invoice. To configure an automatic payment, the
	//     `automatic_payment_source` field of the payment request is also required.
	//   - This `request_method` field. Note that `invoice` objects returned in responses do not include `request_method`.
	//     See [InvoiceRequestMethod](#type-invoicerequestmethod) for possible values
	RequestMethod *InvoiceRequestMethod `json:"request_method,omitempty" url:"request_method,omitempty"`
	// Identifies the payment request type. This type defines how the payment request amount is determined.
	// This field is required to create a payment request.
	// See [InvoiceRequestType](#type-invoicerequesttype) for possible values
	RequestType *InvoiceRequestType `json:"request_type,omitempty" url:"request_type,omitempty"`
	// The due date (in the invoice's time zone) for the payment request, in `YYYY-MM-DD` format. This field
	// is required to create a payment request. If an `automatic_payment_source` is defined for the request, Square
	// charges the payment source on this date.
	//
	// After this date, the invoice becomes overdue. For example, a payment `due_date` of 2021-03-09 with a `timezone`
	// of America/Los_Angeles becomes overdue at midnight on March 9 in America/Los_Angeles (which equals a UTC
	// timestamp of 2021-03-10T08:00:00Z).
	DueDate *string `json:"due_date,omitempty" url:"due_date,omitempty"`
	// If the payment request specifies `DEPOSIT` or `INSTALLMENT` as the `request_type`,
	// this indicates the request amount.
	// You cannot specify this when `request_type` is `BALANCE` or when the
	// payment request includes the `percentage_requested` field.
	FixedAmountRequestedMoney *Money `json:"fixed_amount_requested_money,omitempty" url:"fixed_amount_requested_money,omitempty"`
	// Specifies the amount for the payment request in percentage:
	//
	//   - When the payment `request_type` is `DEPOSIT`, it is the percentage of the order's total amount.
	//   - When the payment `request_type` is `INSTALLMENT`, it is the percentage of the order's total less
	//     the deposit, if requested. The sum of the `percentage_requested` in all installment
	//     payment requests must be equal to 100.
	//
	// You cannot specify this when the payment `request_type` is `BALANCE` or when the
	// payment request specifies the `fixed_amount_requested_money` field.
	PercentageRequested *string `json:"percentage_requested,omitempty" url:"percentage_requested,omitempty"`
	// If set to true, the Square-hosted invoice page (the `public_url` field of the invoice)
	// provides a place for the customer to pay a tip.
	//
	// This field is allowed only on the final payment request
	// and the payment `request_type` must be `BALANCE` or `INSTALLMENT`.
	TippingEnabled *bool `json:"tipping_enabled,omitempty" url:"tipping_enabled,omitempty"`
	// The payment method for an automatic payment.
	//
	// The default value is `NONE`.
	// See [InvoiceAutomaticPaymentSource](#type-invoiceautomaticpaymentsource) for possible values
	AutomaticPaymentSource *InvoiceAutomaticPaymentSource `json:"automatic_payment_source,omitempty" url:"automatic_payment_source,omitempty"`
	// The ID of the credit or debit card on file to charge for the payment request. To get the cards on file for a customer,
	// call [ListCards](api-endpoint:Cards-ListCards) and include the `customer_id` of the invoice recipient.
	CardID *string `json:"card_id,omitempty" url:"card_id,omitempty"`
	// A list of one or more reminders to send for the payment request.
	Reminders []*InvoicePaymentReminder `json:"reminders,omitempty" url:"reminders,omitempty"`
	// The amount of the payment request, computed using the order amount and information from the various payment
	// request fields (`request_type`, `fixed_amount_requested_money`, and `percentage_requested`).
	ComputedAmountMoney *Money `json:"computed_amount_money,omitempty" url:"computed_amount_money,omitempty"`
	// The amount of money already paid for the specific payment request.
	// This amount might include a rounding adjustment if the most recent invoice payment
	// was in cash in a currency that rounds cash payments (such as, `CAD` or `AUD`).
	TotalCompletedAmountMoney *Money `json:"total_completed_amount_money,omitempty" url:"total_completed_amount_money,omitempty"`
	// If the most recent payment was a cash payment
	// in a currency that rounds cash payments (such as, `CAD` or `AUD`) and the payment
	// is rounded from `computed_amount_money` in the payment request, then this
	// field specifies the rounding adjustment applied. This amount
	// might be negative.
	RoundingAdjustmentIncludedMoney *Money `json:"rounding_adjustment_included_money,omitempty" url:"rounding_adjustment_included_money,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (i *InvoicePaymentRequest) GetUID() *string {
	if i == nil {
		return nil
	}
	return i.UID
}

func (i *InvoicePaymentRequest) GetRequestMethod() *InvoiceRequestMethod {
	if i == nil {
		return nil
	}
	return i.RequestMethod
}

func (i *InvoicePaymentRequest) GetRequestType() *InvoiceRequestType {
	if i == nil {
		return nil
	}
	return i.RequestType
}

func (i *InvoicePaymentRequest) GetDueDate() *string {
	if i == nil {
		return nil
	}
	return i.DueDate
}

func (i *InvoicePaymentRequest) GetFixedAmountRequestedMoney() *Money {
	if i == nil {
		return nil
	}
	return i.FixedAmountRequestedMoney
}

func (i *InvoicePaymentRequest) GetPercentageRequested() *string {
	if i == nil {
		return nil
	}
	return i.PercentageRequested
}

func (i *InvoicePaymentRequest) GetTippingEnabled() *bool {
	if i == nil {
		return nil
	}
	return i.TippingEnabled
}

func (i *InvoicePaymentRequest) GetAutomaticPaymentSource() *InvoiceAutomaticPaymentSource {
	if i == nil {
		return nil
	}
	return i.AutomaticPaymentSource
}

func (i *InvoicePaymentRequest) GetCardID() *string {
	if i == nil {
		return nil
	}
	return i.CardID
}

func (i *InvoicePaymentRequest) GetReminders() []*InvoicePaymentReminder {
	if i == nil {
		return nil
	}
	return i.Reminders
}

func (i *InvoicePaymentRequest) GetComputedAmountMoney() *Money {
	if i == nil {
		return nil
	}
	return i.ComputedAmountMoney
}

func (i *InvoicePaymentRequest) GetTotalCompletedAmountMoney() *Money {
	if i == nil {
		return nil
	}
	return i.TotalCompletedAmountMoney
}

func (i *InvoicePaymentRequest) GetRoundingAdjustmentIncludedMoney() *Money {
	if i == nil {
		return nil
	}
	return i.RoundingAdjustmentIncludedMoney
}

func (i *InvoicePaymentRequest) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *InvoicePaymentRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler InvoicePaymentRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = InvoicePaymentRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *i)
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties
	i.rawJSON = json.RawMessage(data)
	return nil
}

func (i *InvoicePaymentRequest) String() string {
	if len(i.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(i.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

// Describes query criteria for searching invoices.
type InvoiceQuery struct {
	// Query filters to apply in searching invoices.
	// For more information, see [Search for invoices](https://developer.squareup.com/docs/invoices-api/retrieve-list-search-invoices#search-invoices).
	Filter *InvoiceFilter `json:"filter,omitempty" url:"filter,omitempty"`
	// Describes the sort order for the search result.
	Sort *InvoiceSort `json:"sort,omitempty" url:"sort,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (i *InvoiceQuery) GetFilter() *InvoiceFilter {
	if i == nil {
		return nil
	}
	return i.Filter
}

func (i *InvoiceQuery) GetSort() *InvoiceSort {
	if i == nil {
		return nil
	}
	return i.Sort
}

func (i *InvoiceQuery) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *InvoiceQuery) UnmarshalJSON(data []byte) error {
	type unmarshaler InvoiceQuery
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = InvoiceQuery(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *i)
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties
	i.rawJSON = json.RawMessage(data)
	return nil
}

func (i *InvoiceQuery) String() string {
	if len(i.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(i.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

// Represents a snapshot of customer data. This object stores customer data that is displayed on the invoice
// and that Square uses to deliver the invoice.
//
// When you provide a customer ID for a draft invoice, Square retrieves the associated customer profile and populates
// the remaining `InvoiceRecipient` fields. You cannot update these fields after the invoice is published.
// Square updates the customer ID in response to a merge operation, but does not update other fields.
type InvoiceRecipient struct {
	// The ID of the customer. This is the customer profile ID that
	// you provide when creating a draft invoice.
	CustomerID *string `json:"customer_id,omitempty" url:"customer_id,omitempty"`
	// The recipient's given (that is, first) name.
	GivenName *string `json:"given_name,omitempty" url:"given_name,omitempty"`
	// The recipient's family (that is, last) name.
	FamilyName *string `json:"family_name,omitempty" url:"family_name,omitempty"`
	// The recipient's email address.
	EmailAddress *string `json:"email_address,omitempty" url:"email_address,omitempty"`
	// The recipient's physical address.
	Address *Address `json:"address,omitempty" url:"address,omitempty"`
	// The recipient's phone number.
	PhoneNumber *string `json:"phone_number,omitempty" url:"phone_number,omitempty"`
	// The name of the recipient's company.
	CompanyName *string `json:"company_name,omitempty" url:"company_name,omitempty"`
	// The recipient's tax IDs. The country of the seller account determines whether this field
	// is available for the customer. For more information, see [Invoice recipient tax IDs](https://developer.squareup.com/docs/invoices-api/overview#recipient-tax-ids).
	TaxIDs *InvoiceRecipientTaxIDs `json:"tax_ids,omitempty" url:"tax_ids,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (i *InvoiceRecipient) GetCustomerID() *string {
	if i == nil {
		return nil
	}
	return i.CustomerID
}

func (i *InvoiceRecipient) GetGivenName() *string {
	if i == nil {
		return nil
	}
	return i.GivenName
}

func (i *InvoiceRecipient) GetFamilyName() *string {
	if i == nil {
		return nil
	}
	return i.FamilyName
}

func (i *InvoiceRecipient) GetEmailAddress() *string {
	if i == nil {
		return nil
	}
	return i.EmailAddress
}

func (i *InvoiceRecipient) GetAddress() *Address {
	if i == nil {
		return nil
	}
	return i.Address
}

func (i *InvoiceRecipient) GetPhoneNumber() *string {
	if i == nil {
		return nil
	}
	return i.PhoneNumber
}

func (i *InvoiceRecipient) GetCompanyName() *string {
	if i == nil {
		return nil
	}
	return i.CompanyName
}

func (i *InvoiceRecipient) GetTaxIDs() *InvoiceRecipientTaxIDs {
	if i == nil {
		return nil
	}
	return i.TaxIDs
}

func (i *InvoiceRecipient) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *InvoiceRecipient) UnmarshalJSON(data []byte) error {
	type unmarshaler InvoiceRecipient
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = InvoiceRecipient(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *i)
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties
	i.rawJSON = json.RawMessage(data)
	return nil
}

func (i *InvoiceRecipient) String() string {
	if len(i.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(i.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

// Represents the tax IDs for an invoice recipient. The country of the seller account determines
// whether the corresponding `tax_ids` field is available for the customer. For more information,
// see [Invoice recipient tax IDs](https://developer.squareup.com/docs/invoices-api/overview#recipient-tax-ids).
type InvoiceRecipientTaxIDs struct {
	// The EU VAT identification number for the invoice recipient. For example, `IE3426675K`.
	EuVat *string `json:"eu_vat,omitempty" url:"eu_vat,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (i *InvoiceRecipientTaxIDs) GetEuVat() *string {
	if i == nil {
		return nil
	}
	return i.EuVat
}

func (i *InvoiceRecipientTaxIDs) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *InvoiceRecipientTaxIDs) UnmarshalJSON(data []byte) error {
	type unmarshaler InvoiceRecipientTaxIDs
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = InvoiceRecipientTaxIDs(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *i)
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties
	i.rawJSON = json.RawMessage(data)
	return nil
}

func (i *InvoiceRecipientTaxIDs) String() string {
	if len(i.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(i.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

// Specifies the action for Square to take for processing the invoice. For example,
// email the invoice, charge a customer's card on file, or do nothing. DEPRECATED at
// version 2021-01-21. The corresponding `request_method` field is replaced by the
// `Invoice.delivery_method` and `InvoicePaymentRequest.automatic_payment_source` fields.
type InvoiceRequestMethod string

const (
	InvoiceRequestMethodEmail               InvoiceRequestMethod = "EMAIL"
	InvoiceRequestMethodChargeCardOnFile    InvoiceRequestMethod = "CHARGE_CARD_ON_FILE"
	InvoiceRequestMethodShareManually       InvoiceRequestMethod = "SHARE_MANUALLY"
	InvoiceRequestMethodChargeBankOnFile    InvoiceRequestMethod = "CHARGE_BANK_ON_FILE"
	InvoiceRequestMethodSms                 InvoiceRequestMethod = "SMS"
	InvoiceRequestMethodSmsChargeCardOnFile InvoiceRequestMethod = "SMS_CHARGE_CARD_ON_FILE"
	InvoiceRequestMethodSmsChargeBankOnFile InvoiceRequestMethod = "SMS_CHARGE_BANK_ON_FILE"
)

func NewInvoiceRequestMethodFromString(s string) (InvoiceRequestMethod, error) {
	switch s {
	case "EMAIL":
		return InvoiceRequestMethodEmail, nil
	case "CHARGE_CARD_ON_FILE":
		return InvoiceRequestMethodChargeCardOnFile, nil
	case "SHARE_MANUALLY":
		return InvoiceRequestMethodShareManually, nil
	case "CHARGE_BANK_ON_FILE":
		return InvoiceRequestMethodChargeBankOnFile, nil
	case "SMS":
		return InvoiceRequestMethodSms, nil
	case "SMS_CHARGE_CARD_ON_FILE":
		return InvoiceRequestMethodSmsChargeCardOnFile, nil
	case "SMS_CHARGE_BANK_ON_FILE":
		return InvoiceRequestMethodSmsChargeBankOnFile, nil
	}
	var t InvoiceRequestMethod
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (i InvoiceRequestMethod) Ptr() *InvoiceRequestMethod {
	return &i
}

// Indicates the type of the payment request. For more information, see
// [Configuring payment requests](https://developer.squareup.com/docs/invoices-api/create-publish-invoices#payment-requests).
type InvoiceRequestType string

const (
	InvoiceRequestTypeBalance     InvoiceRequestType = "BALANCE"
	InvoiceRequestTypeDeposit     InvoiceRequestType = "DEPOSIT"
	InvoiceRequestTypeInstallment InvoiceRequestType = "INSTALLMENT"
)

func NewInvoiceRequestTypeFromString(s string) (InvoiceRequestType, error) {
	switch s {
	case "BALANCE":
		return InvoiceRequestTypeBalance, nil
	case "DEPOSIT":
		return InvoiceRequestTypeDeposit, nil
	case "INSTALLMENT":
		return InvoiceRequestTypeInstallment, nil
	}
	var t InvoiceRequestType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (i InvoiceRequestType) Ptr() *InvoiceRequestType {
	return &i
}

// Identifies the sort field and sort order.
type InvoiceSort struct {
	// The field to use for sorting.
	// See [InvoiceSortField](#type-invoicesortfield) for possible values
	Field InvoiceSortField `json:"field,omitempty" url:"field,omitempty"`
	// The order to use for sorting the results.
	// See [SortOrder](#type-sortorder) for possible values
	Order *SortOrder `json:"order,omitempty" url:"order,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (i *InvoiceSort) GetOrder() *SortOrder {
	if i == nil {
		return nil
	}
	return i.Order
}

func (i *InvoiceSort) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *InvoiceSort) UnmarshalJSON(data []byte) error {
	type unmarshaler InvoiceSort
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = InvoiceSort(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *i)
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties
	i.rawJSON = json.RawMessage(data)
	return nil
}

func (i *InvoiceSort) String() string {
	if len(i.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(i.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

// The field to use for sorting.
type InvoiceSortField = string

// Indicates the status of an invoice.
type InvoiceStatus string

const (
	InvoiceStatusDraft             InvoiceStatus = "DRAFT"
	InvoiceStatusUnpaid            InvoiceStatus = "UNPAID"
	InvoiceStatusScheduled         InvoiceStatus = "SCHEDULED"
	InvoiceStatusPartiallyPaid     InvoiceStatus = "PARTIALLY_PAID"
	InvoiceStatusPaid              InvoiceStatus = "PAID"
	InvoiceStatusPartiallyRefunded InvoiceStatus = "PARTIALLY_REFUNDED"
	InvoiceStatusRefunded          InvoiceStatus = "REFUNDED"
	InvoiceStatusCanceled          InvoiceStatus = "CANCELED"
	InvoiceStatusFailed            InvoiceStatus = "FAILED"
	InvoiceStatusPaymentPending    InvoiceStatus = "PAYMENT_PENDING"
)

func NewInvoiceStatusFromString(s string) (InvoiceStatus, error) {
	switch s {
	case "DRAFT":
		return InvoiceStatusDraft, nil
	case "UNPAID":
		return InvoiceStatusUnpaid, nil
	case "SCHEDULED":
		return InvoiceStatusScheduled, nil
	case "PARTIALLY_PAID":
		return InvoiceStatusPartiallyPaid, nil
	case "PAID":
		return InvoiceStatusPaid, nil
	case "PARTIALLY_REFUNDED":
		return InvoiceStatusPartiallyRefunded, nil
	case "REFUNDED":
		return InvoiceStatusRefunded, nil
	case "CANCELED":
		return InvoiceStatusCanceled, nil
	case "FAILED":
		return InvoiceStatusFailed, nil
	case "PAYMENT_PENDING":
		return InvoiceStatusPaymentPending, nil
	}
	var t InvoiceStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (i InvoiceStatus) Ptr() *InvoiceStatus {
	return &i
}

// Describes a `ListInvoice` response.
type ListInvoicesResponse struct {
	// The invoices retrieved.
	Invoices []*Invoice `json:"invoices,omitempty" url:"invoices,omitempty"`
	// When a response is truncated, it includes a cursor that you can use in a
	// subsequent request to retrieve the next set of invoices. If empty, this is the final
	// response.
	// For more information, see [Pagination](https://developer.squareup.com/docs/build-basics/common-api-patterns/pagination).
	Cursor *string `json:"cursor,omitempty" url:"cursor,omitempty"`
	// Information about errors encountered during the request.
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListInvoicesResponse) GetInvoices() []*Invoice {
	if l == nil {
		return nil
	}
	return l.Invoices
}

func (l *ListInvoicesResponse) GetCursor() *string {
	if l == nil {
		return nil
	}
	return l.Cursor
}

func (l *ListInvoicesResponse) GetErrors() []*Error {
	if l == nil {
		return nil
	}
	return l.Errors
}

func (l *ListInvoicesResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListInvoicesResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListInvoicesResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListInvoicesResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListInvoicesResponse) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

// Describes a `PublishInvoice` response.
type PublishInvoiceResponse struct {
	// The published invoice.
	Invoice *Invoice `json:"invoice,omitempty" url:"invoice,omitempty"`
	// Information about errors encountered during the request.
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PublishInvoiceResponse) GetInvoice() *Invoice {
	if p == nil {
		return nil
	}
	return p.Invoice
}

func (p *PublishInvoiceResponse) GetErrors() []*Error {
	if p == nil {
		return nil
	}
	return p.Errors
}

func (p *PublishInvoiceResponse) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PublishInvoiceResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler PublishInvoiceResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PublishInvoiceResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PublishInvoiceResponse) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// Describes a `SearchInvoices` response.
type SearchInvoicesResponse struct {
	// The list of invoices returned by the search.
	Invoices []*Invoice `json:"invoices,omitempty" url:"invoices,omitempty"`
	// When a response is truncated, it includes a cursor that you can use in a
	// subsequent request to fetch the next set of invoices. If empty, this is the final
	// response.
	// For more information, see [Pagination](https://developer.squareup.com/docs/build-basics/common-api-patterns/pagination).
	Cursor *string `json:"cursor,omitempty" url:"cursor,omitempty"`
	// Information about errors encountered during the request.
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SearchInvoicesResponse) GetInvoices() []*Invoice {
	if s == nil {
		return nil
	}
	return s.Invoices
}

func (s *SearchInvoicesResponse) GetCursor() *string {
	if s == nil {
		return nil
	}
	return s.Cursor
}

func (s *SearchInvoicesResponse) GetErrors() []*Error {
	if s == nil {
		return nil
	}
	return s.Errors
}

func (s *SearchInvoicesResponse) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SearchInvoicesResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler SearchInvoicesResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SearchInvoicesResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SearchInvoicesResponse) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// Describes a `UpdateInvoice` response.
type UpdateInvoiceResponse struct {
	// The updated invoice.
	Invoice *Invoice `json:"invoice,omitempty" url:"invoice,omitempty"`
	// Information about errors encountered during the request.
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UpdateInvoiceResponse) GetInvoice() *Invoice {
	if u == nil {
		return nil
	}
	return u.Invoice
}

func (u *UpdateInvoiceResponse) GetErrors() []*Error {
	if u == nil {
		return nil
	}
	return u.Errors
}

func (u *UpdateInvoiceResponse) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdateInvoiceResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdateInvoiceResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdateInvoiceResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateInvoiceResponse) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpdateInvoiceRequest struct {
	// The ID of the invoice to update.
	InvoiceID string `json:"-" url:"-"`
	// The invoice fields to add, change, or clear. Fields can be cleared using
	// null values or the `remove` field (for individual payment requests or reminders).
	// The current invoice `version` is also required. For more information, including requirements,
	// limitations, and more examples, see [Update an Invoice](https://developer.squareup.com/docs/invoices-api/update-invoices).
	Invoice *Invoice `json:"invoice,omitempty" url:"-"`
	// A unique string that identifies the `UpdateInvoice` request. If you do not
	// provide `idempotency_key` (or provide an empty string as the value), the endpoint
	// treats each request as independent.
	//
	// For more information, see [Idempotency](https://developer.squareup.com/docs/build-basics/common-api-patterns/idempotency).
	IdempotencyKey *string `json:"idempotency_key,omitempty" url:"-"`
	// The list of fields to clear. Although this field is currently supported, we
	// recommend using null values or the `remove` field when possible. For examples, see
	// [Update an Invoice](https://developer.squareup.com/docs/invoices-api/update-invoices).
	FieldsToClear []string `json:"fields_to_clear,omitempty" url:"-"`
}
