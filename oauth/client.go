// Code generated by Fern. DO NOT EDIT.

package oauth

import (
	context "context"
	v2 "github.com/square/square-go-sdk/v2"
	core "github.com/square/square-go-sdk/v2/core"
	internal "github.com/square/square-go-sdk/v2/internal"
	option "github.com/square/square-go-sdk/v2/option"
	http "net/http"
	os "os"
)

type Client struct {
	WithRawResponse *RawClient

	baseURL string
	caller  *internal.Caller
	header  http.Header
}

func NewClient(opts ...option.RequestOption) *Client {
	options := core.NewRequestOptions(opts...)
	if options.Token == "" {
		options.Token = os.Getenv("SQUARE_TOKEN")
	}
	if options.Version == "" {
		options.Version = os.Getenv("VERSION")
	}
	return &Client{
		WithRawResponse: NewRawClient(options),
		baseURL:         options.BaseURL,
		caller: internal.NewCaller(
			&internal.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
		header: options.ToHeader(),
	}
}

// Revokes an access token generated with the OAuth flow.
//
// If an account has more than one OAuth access token for your application, this
// endpoint revokes all of them, regardless of which token you specify.
//
// __Important:__ The `Authorization` header for this endpoint must have the
// following format:
//
// ```
// Authorization: Client APPLICATION_SECRET
// ```
//
// Replace `APPLICATION_SECRET` with the application secret on the **OAuth**
// page for your application in the Developer Dashboard.
func (c *Client) RevokeToken(
	ctx context.Context,
	request *v2.RevokeTokenRequest,
	opts ...option.RequestOption,
) (*v2.RevokeTokenResponse, error) {
	response, err := c.WithRawResponse.RevokeToken(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Returns an OAuth access token and refresh token using the `authorization_code`
// or `refresh_token` grant type.
//
// When `grant_type` is `authorization_code`:
// - With the [code flow](https://developer.squareup.com/docs/oauth-api/overview#code-flow),
// provide `code`, `client_id`, and `client_secret`.
// - With the [PKCE flow](https://developer.squareup.com/docs/oauth-api/overview#pkce-flow),
// provide `code`, `client_id`, and `code_verifier`.
//
// When `grant_type` is `refresh_token`:
// - With the code flow, provide `refresh_token`, `client_id`, and `client_secret`.
// The response returns the same refresh token provided in the request.
// - With the PKCE flow, provide `refresh_token` and `client_id`. The response returns
// a new refresh token.
//
// You can use the `scopes` parameter to limit the set of permissions authorized by the
// access token. You can use the `short_lived` parameter to create an access token that
// expires in 24 hours.
//
// __Important:__ OAuth tokens should be encrypted and stored on a secure server.
// Application clients should never interact directly with OAuth tokens.
func (c *Client) ObtainToken(
	ctx context.Context,
	request *v2.ObtainTokenRequest,
	opts ...option.RequestOption,
) (*v2.ObtainTokenResponse, error) {
	response, err := c.WithRawResponse.ObtainToken(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Returns information about an [OAuth access token](https://developer.squareup.com/docs/build-basics/access-tokens#get-an-oauth-access-token) or an application’s [personal access token](https://developer.squareup.com/docs/build-basics/access-tokens#get-a-personal-access-token).
//
// Add the access token to the Authorization header of the request.
//
// __Important:__ The `Authorization` header you provide to this endpoint must have the following format:
//
// ```
// Authorization: Bearer ACCESS_TOKEN
// ```
//
// where `ACCESS_TOKEN` is a
// [valid production authorization credential](https://developer.squareup.com/docs/build-basics/access-tokens).
//
// If the access token is expired or not a valid access token, the endpoint returns an `UNAUTHORIZED` error.
func (c *Client) RetrieveTokenStatus(
	ctx context.Context,
	opts ...option.RequestOption,
) (*v2.RetrieveTokenStatusResponse, error) {
	response, err := c.WithRawResponse.RetrieveTokenStatus(
		ctx,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) Authorize(
	ctx context.Context,
	opts ...option.RequestOption,
) error {
	_, err := c.WithRawResponse.Authorize(
		ctx,
		opts...,
	)
	if err != nil {
		return err
	}
	return nil
}
