// Code generated by Fern. DO NOT EDIT.

package square

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/square/square-go-sdk/v2/internal"
)

type ListEntriesPayoutsRequest struct {
	// The ID of the payout to retrieve the information for.
	PayoutID string `json:"-" url:"-"`
	// The order in which payout entries are listed.
	SortOrder *SortOrder `json:"-" url:"sort_order,omitempty"`
	// A pagination cursor returned by a previous call to this endpoint.
	// Provide this cursor to retrieve the next set of results for the original query.
	// For more information, see [Pagination](https://developer.squareup.com/docs/build-basics/common-api-patterns/pagination).
	// If request parameters change between requests, subsequent results may contain duplicates or missing records.
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// The maximum number of results to be returned in a single page.
	// It is possible to receive fewer results than the specified limit on a given page.
	// The default value of 100 is also the maximum allowed value. If the provided value is
	// greater than 100, it is ignored and the default value is used instead.
	// Default: `100`
	Limit *int `json:"-" url:"limit,omitempty"`
}

type GetPayoutsRequest struct {
	// The ID of the payout to retrieve the information for.
	PayoutID string `json:"-" url:"-"`
}

type ListPayoutsRequest struct {
	// The ID of the location for which to list the payouts.
	// By default, payouts are returned for the default (main) location associated with the seller.
	LocationID *string `json:"-" url:"location_id,omitempty"`
	// If provided, only payouts with the given status are returned.
	Status *PayoutStatus `json:"-" url:"status,omitempty"`
	// The timestamp for the beginning of the payout creation time, in RFC 3339 format.
	// Inclusive. Default: The current time minus one year.
	BeginTime *string `json:"-" url:"begin_time,omitempty"`
	// The timestamp for the end of the payout creation time, in RFC 3339 format.
	// Default: The current time.
	EndTime *string `json:"-" url:"end_time,omitempty"`
	// The order in which payouts are listed.
	SortOrder *SortOrder `json:"-" url:"sort_order,omitempty"`
	// A pagination cursor returned by a previous call to this endpoint.
	// Provide this cursor to retrieve the next set of results for the original query.
	// For more information, see [Pagination](https://developer.squareup.com/docs/build-basics/common-api-patterns/pagination).
	// If request parameters change between requests, subsequent results may contain duplicates or missing records.
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// The maximum number of results to be returned in a single page.
	// It is possible to receive fewer results than the specified limit on a given page.
	// The default value of 100 is also the maximum allowed value. If the provided value is
	// greater than 100, it is ignored and the default value is used instead.
	// Default: `100`
	Limit *int `json:"-" url:"limit,omitempty"`
}

type ActivityType string

const (
	ActivityTypeAdjustment                            ActivityType = "ADJUSTMENT"
	ActivityTypeAppFeeRefund                          ActivityType = "APP_FEE_REFUND"
	ActivityTypeAppFeeRevenue                         ActivityType = "APP_FEE_REVENUE"
	ActivityTypeAutomaticSavings                      ActivityType = "AUTOMATIC_SAVINGS"
	ActivityTypeAutomaticSavingsReversed              ActivityType = "AUTOMATIC_SAVINGS_REVERSED"
	ActivityTypeCharge                                ActivityType = "CHARGE"
	ActivityTypeDepositFee                            ActivityType = "DEPOSIT_FEE"
	ActivityTypeDepositFeeReversed                    ActivityType = "DEPOSIT_FEE_REVERSED"
	ActivityTypeDispute                               ActivityType = "DISPUTE"
	ActivityTypeEscheatment                           ActivityType = "ESCHEATMENT"
	ActivityTypeFee                                   ActivityType = "FEE"
	ActivityTypeFreeProcessing                        ActivityType = "FREE_PROCESSING"
	ActivityTypeHoldAdjustment                        ActivityType = "HOLD_ADJUSTMENT"
	ActivityTypeInitialBalanceChange                  ActivityType = "INITIAL_BALANCE_CHANGE"
	ActivityTypeMoneyTransfer                         ActivityType = "MONEY_TRANSFER"
	ActivityTypeMoneyTransferReversal                 ActivityType = "MONEY_TRANSFER_REVERSAL"
	ActivityTypeOpenDispute                           ActivityType = "OPEN_DISPUTE"
	ActivityTypeOther                                 ActivityType = "OTHER"
	ActivityTypeOtherAdjustment                       ActivityType = "OTHER_ADJUSTMENT"
	ActivityTypePaidServiceFee                        ActivityType = "PAID_SERVICE_FEE"
	ActivityTypePaidServiceFeeRefund                  ActivityType = "PAID_SERVICE_FEE_REFUND"
	ActivityTypeRedemptionCode                        ActivityType = "REDEMPTION_CODE"
	ActivityTypeRefund                                ActivityType = "REFUND"
	ActivityTypeReleaseAdjustment                     ActivityType = "RELEASE_ADJUSTMENT"
	ActivityTypeReserveHold                           ActivityType = "RESERVE_HOLD"
	ActivityTypeReserveRelease                        ActivityType = "RESERVE_RELEASE"
	ActivityTypeReturnedPayout                        ActivityType = "RETURNED_PAYOUT"
	ActivityTypeSquareCapitalPayment                  ActivityType = "SQUARE_CAPITAL_PAYMENT"
	ActivityTypeSquareCapitalReversedPayment          ActivityType = "SQUARE_CAPITAL_REVERSED_PAYMENT"
	ActivityTypeSubscriptionFee                       ActivityType = "SUBSCRIPTION_FEE"
	ActivityTypeSubscriptionFeePaidRefund             ActivityType = "SUBSCRIPTION_FEE_PAID_REFUND"
	ActivityTypeSubscriptionFeeRefund                 ActivityType = "SUBSCRIPTION_FEE_REFUND"
	ActivityTypeTaxOnFee                              ActivityType = "TAX_ON_FEE"
	ActivityTypeThirdPartyFee                         ActivityType = "THIRD_PARTY_FEE"
	ActivityTypeThirdPartyFeeRefund                   ActivityType = "THIRD_PARTY_FEE_REFUND"
	ActivityTypePayout                                ActivityType = "PAYOUT"
	ActivityTypeAutomaticBitcoinConversions           ActivityType = "AUTOMATIC_BITCOIN_CONVERSIONS"
	ActivityTypeAutomaticBitcoinConversionsReversed   ActivityType = "AUTOMATIC_BITCOIN_CONVERSIONS_REVERSED"
	ActivityTypeCreditCardRepayment                   ActivityType = "CREDIT_CARD_REPAYMENT"
	ActivityTypeCreditCardRepaymentReversed           ActivityType = "CREDIT_CARD_REPAYMENT_REVERSED"
	ActivityTypeLocalOffersCashback                   ActivityType = "LOCAL_OFFERS_CASHBACK"
	ActivityTypeLocalOffersFee                        ActivityType = "LOCAL_OFFERS_FEE"
	ActivityTypePercentageProcessingEnrollment        ActivityType = "PERCENTAGE_PROCESSING_ENROLLMENT"
	ActivityTypePercentageProcessingDeactivation      ActivityType = "PERCENTAGE_PROCESSING_DEACTIVATION"
	ActivityTypePercentageProcessingRepayment         ActivityType = "PERCENTAGE_PROCESSING_REPAYMENT"
	ActivityTypePercentageProcessingRepaymentReversed ActivityType = "PERCENTAGE_PROCESSING_REPAYMENT_REVERSED"
	ActivityTypeProcessingFee                         ActivityType = "PROCESSING_FEE"
	ActivityTypeProcessingFeeRefund                   ActivityType = "PROCESSING_FEE_REFUND"
	ActivityTypeUndoProcessingFeeRefund               ActivityType = "UNDO_PROCESSING_FEE_REFUND"
	ActivityTypeGiftCardLoadFee                       ActivityType = "GIFT_CARD_LOAD_FEE"
	ActivityTypeGiftCardLoadFeeRefund                 ActivityType = "GIFT_CARD_LOAD_FEE_REFUND"
	ActivityTypeUndoGiftCardLoadFeeRefund             ActivityType = "UNDO_GIFT_CARD_LOAD_FEE_REFUND"
	ActivityTypeBalanceFoldersTransfer                ActivityType = "BALANCE_FOLDERS_TRANSFER"
	ActivityTypeBalanceFoldersTransferReversed        ActivityType = "BALANCE_FOLDERS_TRANSFER_REVERSED"
	ActivityTypeGiftCardPoolTransfer                  ActivityType = "GIFT_CARD_POOL_TRANSFER"
	ActivityTypeGiftCardPoolTransferReversed          ActivityType = "GIFT_CARD_POOL_TRANSFER_REVERSED"
	ActivityTypeSquarePayrollTransfer                 ActivityType = "SQUARE_PAYROLL_TRANSFER"
	ActivityTypeSquarePayrollTransferReversed         ActivityType = "SQUARE_PAYROLL_TRANSFER_REVERSED"
)

func NewActivityTypeFromString(s string) (ActivityType, error) {
	switch s {
	case "ADJUSTMENT":
		return ActivityTypeAdjustment, nil
	case "APP_FEE_REFUND":
		return ActivityTypeAppFeeRefund, nil
	case "APP_FEE_REVENUE":
		return ActivityTypeAppFeeRevenue, nil
	case "AUTOMATIC_SAVINGS":
		return ActivityTypeAutomaticSavings, nil
	case "AUTOMATIC_SAVINGS_REVERSED":
		return ActivityTypeAutomaticSavingsReversed, nil
	case "CHARGE":
		return ActivityTypeCharge, nil
	case "DEPOSIT_FEE":
		return ActivityTypeDepositFee, nil
	case "DEPOSIT_FEE_REVERSED":
		return ActivityTypeDepositFeeReversed, nil
	case "DISPUTE":
		return ActivityTypeDispute, nil
	case "ESCHEATMENT":
		return ActivityTypeEscheatment, nil
	case "FEE":
		return ActivityTypeFee, nil
	case "FREE_PROCESSING":
		return ActivityTypeFreeProcessing, nil
	case "HOLD_ADJUSTMENT":
		return ActivityTypeHoldAdjustment, nil
	case "INITIAL_BALANCE_CHANGE":
		return ActivityTypeInitialBalanceChange, nil
	case "MONEY_TRANSFER":
		return ActivityTypeMoneyTransfer, nil
	case "MONEY_TRANSFER_REVERSAL":
		return ActivityTypeMoneyTransferReversal, nil
	case "OPEN_DISPUTE":
		return ActivityTypeOpenDispute, nil
	case "OTHER":
		return ActivityTypeOther, nil
	case "OTHER_ADJUSTMENT":
		return ActivityTypeOtherAdjustment, nil
	case "PAID_SERVICE_FEE":
		return ActivityTypePaidServiceFee, nil
	case "PAID_SERVICE_FEE_REFUND":
		return ActivityTypePaidServiceFeeRefund, nil
	case "REDEMPTION_CODE":
		return ActivityTypeRedemptionCode, nil
	case "REFUND":
		return ActivityTypeRefund, nil
	case "RELEASE_ADJUSTMENT":
		return ActivityTypeReleaseAdjustment, nil
	case "RESERVE_HOLD":
		return ActivityTypeReserveHold, nil
	case "RESERVE_RELEASE":
		return ActivityTypeReserveRelease, nil
	case "RETURNED_PAYOUT":
		return ActivityTypeReturnedPayout, nil
	case "SQUARE_CAPITAL_PAYMENT":
		return ActivityTypeSquareCapitalPayment, nil
	case "SQUARE_CAPITAL_REVERSED_PAYMENT":
		return ActivityTypeSquareCapitalReversedPayment, nil
	case "SUBSCRIPTION_FEE":
		return ActivityTypeSubscriptionFee, nil
	case "SUBSCRIPTION_FEE_PAID_REFUND":
		return ActivityTypeSubscriptionFeePaidRefund, nil
	case "SUBSCRIPTION_FEE_REFUND":
		return ActivityTypeSubscriptionFeeRefund, nil
	case "TAX_ON_FEE":
		return ActivityTypeTaxOnFee, nil
	case "THIRD_PARTY_FEE":
		return ActivityTypeThirdPartyFee, nil
	case "THIRD_PARTY_FEE_REFUND":
		return ActivityTypeThirdPartyFeeRefund, nil
	case "PAYOUT":
		return ActivityTypePayout, nil
	case "AUTOMATIC_BITCOIN_CONVERSIONS":
		return ActivityTypeAutomaticBitcoinConversions, nil
	case "AUTOMATIC_BITCOIN_CONVERSIONS_REVERSED":
		return ActivityTypeAutomaticBitcoinConversionsReversed, nil
	case "CREDIT_CARD_REPAYMENT":
		return ActivityTypeCreditCardRepayment, nil
	case "CREDIT_CARD_REPAYMENT_REVERSED":
		return ActivityTypeCreditCardRepaymentReversed, nil
	case "LOCAL_OFFERS_CASHBACK":
		return ActivityTypeLocalOffersCashback, nil
	case "LOCAL_OFFERS_FEE":
		return ActivityTypeLocalOffersFee, nil
	case "PERCENTAGE_PROCESSING_ENROLLMENT":
		return ActivityTypePercentageProcessingEnrollment, nil
	case "PERCENTAGE_PROCESSING_DEACTIVATION":
		return ActivityTypePercentageProcessingDeactivation, nil
	case "PERCENTAGE_PROCESSING_REPAYMENT":
		return ActivityTypePercentageProcessingRepayment, nil
	case "PERCENTAGE_PROCESSING_REPAYMENT_REVERSED":
		return ActivityTypePercentageProcessingRepaymentReversed, nil
	case "PROCESSING_FEE":
		return ActivityTypeProcessingFee, nil
	case "PROCESSING_FEE_REFUND":
		return ActivityTypeProcessingFeeRefund, nil
	case "UNDO_PROCESSING_FEE_REFUND":
		return ActivityTypeUndoProcessingFeeRefund, nil
	case "GIFT_CARD_LOAD_FEE":
		return ActivityTypeGiftCardLoadFee, nil
	case "GIFT_CARD_LOAD_FEE_REFUND":
		return ActivityTypeGiftCardLoadFeeRefund, nil
	case "UNDO_GIFT_CARD_LOAD_FEE_REFUND":
		return ActivityTypeUndoGiftCardLoadFeeRefund, nil
	case "BALANCE_FOLDERS_TRANSFER":
		return ActivityTypeBalanceFoldersTransfer, nil
	case "BALANCE_FOLDERS_TRANSFER_REVERSED":
		return ActivityTypeBalanceFoldersTransferReversed, nil
	case "GIFT_CARD_POOL_TRANSFER":
		return ActivityTypeGiftCardPoolTransfer, nil
	case "GIFT_CARD_POOL_TRANSFER_REVERSED":
		return ActivityTypeGiftCardPoolTransferReversed, nil
	case "SQUARE_PAYROLL_TRANSFER":
		return ActivityTypeSquarePayrollTransfer, nil
	case "SQUARE_PAYROLL_TRANSFER_REVERSED":
		return ActivityTypeSquarePayrollTransferReversed, nil
	}
	var t ActivityType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a ActivityType) Ptr() *ActivityType {
	return &a
}

// Information about the destination against which the payout was made.
type Destination struct {
	// Type of the destination such as a bank account or debit card.
	// See [DestinationType](#type-destinationtype) for possible values
	Type *DestinationType `json:"type,omitempty" url:"type,omitempty"`
	// Square issued unique ID (also known as the instrument ID) associated with this destination.
	ID *string `json:"id,omitempty" url:"id,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *Destination) GetType() *DestinationType {
	if d == nil {
		return nil
	}
	return d.Type
}

func (d *Destination) GetID() *string {
	if d == nil {
		return nil
	}
	return d.ID
}

func (d *Destination) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *Destination) UnmarshalJSON(data []byte) error {
	type unmarshaler Destination
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = Destination(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *Destination) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

// List of possible destinations against which a payout can be made.
type DestinationType string

const (
	DestinationTypeBankAccount         DestinationType = "BANK_ACCOUNT"
	DestinationTypeCard                DestinationType = "CARD"
	DestinationTypeSquareBalance       DestinationType = "SQUARE_BALANCE"
	DestinationTypeSquareStoredBalance DestinationType = "SQUARE_STORED_BALANCE"
)

func NewDestinationTypeFromString(s string) (DestinationType, error) {
	switch s {
	case "BANK_ACCOUNT":
		return DestinationTypeBankAccount, nil
	case "CARD":
		return DestinationTypeCard, nil
	case "SQUARE_BALANCE":
		return DestinationTypeSquareBalance, nil
	case "SQUARE_STORED_BALANCE":
		return DestinationTypeSquareStoredBalance, nil
	}
	var t DestinationType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (d DestinationType) Ptr() *DestinationType {
	return &d
}

type GetPayoutResponse struct {
	// The requested payout.
	Payout *Payout `json:"payout,omitempty" url:"payout,omitempty"`
	// Information about errors encountered during the request.
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetPayoutResponse) GetPayout() *Payout {
	if g == nil {
		return nil
	}
	return g.Payout
}

func (g *GetPayoutResponse) GetErrors() []*Error {
	if g == nil {
		return nil
	}
	return g.Errors
}

func (g *GetPayoutResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetPayoutResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetPayoutResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetPayoutResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetPayoutResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

// The response to retrieve payout records entries.
type ListPayoutEntriesResponse struct {
	// The requested list of payout entries, ordered with the given or default sort order.
	PayoutEntries []*PayoutEntry `json:"payout_entries,omitempty" url:"payout_entries,omitempty"`
	// The pagination cursor to be used in a subsequent request. If empty, this is the final response.
	// For more information, see [Pagination](https://developer.squareup.com/docs/build-basics/common-api-patterns/pagination).
	Cursor *string `json:"cursor,omitempty" url:"cursor,omitempty"`
	// Information about errors encountered during the request.
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListPayoutEntriesResponse) GetPayoutEntries() []*PayoutEntry {
	if l == nil {
		return nil
	}
	return l.PayoutEntries
}

func (l *ListPayoutEntriesResponse) GetCursor() *string {
	if l == nil {
		return nil
	}
	return l.Cursor
}

func (l *ListPayoutEntriesResponse) GetErrors() []*Error {
	if l == nil {
		return nil
	}
	return l.Errors
}

func (l *ListPayoutEntriesResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListPayoutEntriesResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListPayoutEntriesResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListPayoutEntriesResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListPayoutEntriesResponse) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

// The response to retrieve payout records entries.
type ListPayoutsResponse struct {
	// The requested list of payouts.
	Payouts []*Payout `json:"payouts,omitempty" url:"payouts,omitempty"`
	// The pagination cursor to be used in a subsequent request. If empty, this is the final response.
	// For more information, see [Pagination](https://developer.squareup.com/docs/build-basics/common-api-patterns/pagination).
	Cursor *string `json:"cursor,omitempty" url:"cursor,omitempty"`
	// Information about errors encountered during the request.
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListPayoutsResponse) GetPayouts() []*Payout {
	if l == nil {
		return nil
	}
	return l.Payouts
}

func (l *ListPayoutsResponse) GetCursor() *string {
	if l == nil {
		return nil
	}
	return l.Cursor
}

func (l *ListPayoutsResponse) GetErrors() []*Error {
	if l == nil {
		return nil
	}
	return l.Errors
}

func (l *ListPayoutsResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListPayoutsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListPayoutsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListPayoutsResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListPayoutsResponse) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type PaymentBalanceActivityAppFeeRefundDetail struct {
	// The ID of the payment associated with this activity.
	PaymentID *string `json:"payment_id,omitempty" url:"payment_id,omitempty"`
	// The ID of the refund associated with this activity.
	RefundID *string `json:"refund_id,omitempty" url:"refund_id,omitempty"`
	// The ID of the location of the merchant associated with the payment refund activity
	LocationID *string `json:"location_id,omitempty" url:"location_id,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PaymentBalanceActivityAppFeeRefundDetail) GetPaymentID() *string {
	if p == nil {
		return nil
	}
	return p.PaymentID
}

func (p *PaymentBalanceActivityAppFeeRefundDetail) GetRefundID() *string {
	if p == nil {
		return nil
	}
	return p.RefundID
}

func (p *PaymentBalanceActivityAppFeeRefundDetail) GetLocationID() *string {
	if p == nil {
		return nil
	}
	return p.LocationID
}

func (p *PaymentBalanceActivityAppFeeRefundDetail) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaymentBalanceActivityAppFeeRefundDetail) UnmarshalJSON(data []byte) error {
	type unmarshaler PaymentBalanceActivityAppFeeRefundDetail
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaymentBalanceActivityAppFeeRefundDetail(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaymentBalanceActivityAppFeeRefundDetail) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaymentBalanceActivityAppFeeRevenueDetail struct {
	// The ID of the payment associated with this activity.
	PaymentID *string `json:"payment_id,omitempty" url:"payment_id,omitempty"`
	// The ID of the location of the merchant associated with the payment activity
	LocationID *string `json:"location_id,omitempty" url:"location_id,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PaymentBalanceActivityAppFeeRevenueDetail) GetPaymentID() *string {
	if p == nil {
		return nil
	}
	return p.PaymentID
}

func (p *PaymentBalanceActivityAppFeeRevenueDetail) GetLocationID() *string {
	if p == nil {
		return nil
	}
	return p.LocationID
}

func (p *PaymentBalanceActivityAppFeeRevenueDetail) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaymentBalanceActivityAppFeeRevenueDetail) UnmarshalJSON(data []byte) error {
	type unmarshaler PaymentBalanceActivityAppFeeRevenueDetail
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaymentBalanceActivityAppFeeRevenueDetail(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaymentBalanceActivityAppFeeRevenueDetail) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaymentBalanceActivityAutomaticSavingsDetail struct {
	// The ID of the payment associated with this activity.
	PaymentID *string `json:"payment_id,omitempty" url:"payment_id,omitempty"`
	// The ID of the payout associated with this activity.
	PayoutID *string `json:"payout_id,omitempty" url:"payout_id,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PaymentBalanceActivityAutomaticSavingsDetail) GetPaymentID() *string {
	if p == nil {
		return nil
	}
	return p.PaymentID
}

func (p *PaymentBalanceActivityAutomaticSavingsDetail) GetPayoutID() *string {
	if p == nil {
		return nil
	}
	return p.PayoutID
}

func (p *PaymentBalanceActivityAutomaticSavingsDetail) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaymentBalanceActivityAutomaticSavingsDetail) UnmarshalJSON(data []byte) error {
	type unmarshaler PaymentBalanceActivityAutomaticSavingsDetail
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaymentBalanceActivityAutomaticSavingsDetail(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaymentBalanceActivityAutomaticSavingsDetail) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaymentBalanceActivityAutomaticSavingsReversedDetail struct {
	// The ID of the payment associated with this activity.
	PaymentID *string `json:"payment_id,omitempty" url:"payment_id,omitempty"`
	// The ID of the payout associated with this activity.
	PayoutID *string `json:"payout_id,omitempty" url:"payout_id,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PaymentBalanceActivityAutomaticSavingsReversedDetail) GetPaymentID() *string {
	if p == nil {
		return nil
	}
	return p.PaymentID
}

func (p *PaymentBalanceActivityAutomaticSavingsReversedDetail) GetPayoutID() *string {
	if p == nil {
		return nil
	}
	return p.PayoutID
}

func (p *PaymentBalanceActivityAutomaticSavingsReversedDetail) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaymentBalanceActivityAutomaticSavingsReversedDetail) UnmarshalJSON(data []byte) error {
	type unmarshaler PaymentBalanceActivityAutomaticSavingsReversedDetail
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaymentBalanceActivityAutomaticSavingsReversedDetail(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaymentBalanceActivityAutomaticSavingsReversedDetail) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaymentBalanceActivityChargeDetail struct {
	// The ID of the payment associated with this activity.
	PaymentID *string `json:"payment_id,omitempty" url:"payment_id,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PaymentBalanceActivityChargeDetail) GetPaymentID() *string {
	if p == nil {
		return nil
	}
	return p.PaymentID
}

func (p *PaymentBalanceActivityChargeDetail) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaymentBalanceActivityChargeDetail) UnmarshalJSON(data []byte) error {
	type unmarshaler PaymentBalanceActivityChargeDetail
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaymentBalanceActivityChargeDetail(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaymentBalanceActivityChargeDetail) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaymentBalanceActivityDepositFeeDetail struct {
	// The ID of the payout that triggered this deposit fee activity.
	PayoutID *string `json:"payout_id,omitempty" url:"payout_id,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PaymentBalanceActivityDepositFeeDetail) GetPayoutID() *string {
	if p == nil {
		return nil
	}
	return p.PayoutID
}

func (p *PaymentBalanceActivityDepositFeeDetail) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaymentBalanceActivityDepositFeeDetail) UnmarshalJSON(data []byte) error {
	type unmarshaler PaymentBalanceActivityDepositFeeDetail
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaymentBalanceActivityDepositFeeDetail(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaymentBalanceActivityDepositFeeDetail) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaymentBalanceActivityDepositFeeReversedDetail struct {
	// The ID of the payout that triggered this deposit fee activity.
	PayoutID *string `json:"payout_id,omitempty" url:"payout_id,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PaymentBalanceActivityDepositFeeReversedDetail) GetPayoutID() *string {
	if p == nil {
		return nil
	}
	return p.PayoutID
}

func (p *PaymentBalanceActivityDepositFeeReversedDetail) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaymentBalanceActivityDepositFeeReversedDetail) UnmarshalJSON(data []byte) error {
	type unmarshaler PaymentBalanceActivityDepositFeeReversedDetail
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaymentBalanceActivityDepositFeeReversedDetail(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaymentBalanceActivityDepositFeeReversedDetail) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaymentBalanceActivityDisputeDetail struct {
	// The ID of the payment associated with this activity.
	PaymentID *string `json:"payment_id,omitempty" url:"payment_id,omitempty"`
	// The ID of the dispute associated with this activity.
	DisputeID *string `json:"dispute_id,omitempty" url:"dispute_id,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PaymentBalanceActivityDisputeDetail) GetPaymentID() *string {
	if p == nil {
		return nil
	}
	return p.PaymentID
}

func (p *PaymentBalanceActivityDisputeDetail) GetDisputeID() *string {
	if p == nil {
		return nil
	}
	return p.DisputeID
}

func (p *PaymentBalanceActivityDisputeDetail) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaymentBalanceActivityDisputeDetail) UnmarshalJSON(data []byte) error {
	type unmarshaler PaymentBalanceActivityDisputeDetail
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaymentBalanceActivityDisputeDetail(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaymentBalanceActivityDisputeDetail) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaymentBalanceActivityFeeDetail struct {
	// The ID of the payment associated with this activity
	// This will only be populated when a principal LedgerEntryToken is also populated.
	// If the fee is independent (there is no principal LedgerEntryToken) then this will likely not
	// be populated.
	PaymentID *string `json:"payment_id,omitempty" url:"payment_id,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PaymentBalanceActivityFeeDetail) GetPaymentID() *string {
	if p == nil {
		return nil
	}
	return p.PaymentID
}

func (p *PaymentBalanceActivityFeeDetail) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaymentBalanceActivityFeeDetail) UnmarshalJSON(data []byte) error {
	type unmarshaler PaymentBalanceActivityFeeDetail
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaymentBalanceActivityFeeDetail(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaymentBalanceActivityFeeDetail) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaymentBalanceActivityFreeProcessingDetail struct {
	// The ID of the payment associated with this activity.
	PaymentID *string `json:"payment_id,omitempty" url:"payment_id,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PaymentBalanceActivityFreeProcessingDetail) GetPaymentID() *string {
	if p == nil {
		return nil
	}
	return p.PaymentID
}

func (p *PaymentBalanceActivityFreeProcessingDetail) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaymentBalanceActivityFreeProcessingDetail) UnmarshalJSON(data []byte) error {
	type unmarshaler PaymentBalanceActivityFreeProcessingDetail
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaymentBalanceActivityFreeProcessingDetail(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaymentBalanceActivityFreeProcessingDetail) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaymentBalanceActivityHoldAdjustmentDetail struct {
	// The ID of the payment associated with this activity.
	PaymentID *string `json:"payment_id,omitempty" url:"payment_id,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PaymentBalanceActivityHoldAdjustmentDetail) GetPaymentID() *string {
	if p == nil {
		return nil
	}
	return p.PaymentID
}

func (p *PaymentBalanceActivityHoldAdjustmentDetail) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaymentBalanceActivityHoldAdjustmentDetail) UnmarshalJSON(data []byte) error {
	type unmarshaler PaymentBalanceActivityHoldAdjustmentDetail
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaymentBalanceActivityHoldAdjustmentDetail(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaymentBalanceActivityHoldAdjustmentDetail) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaymentBalanceActivityOpenDisputeDetail struct {
	// The ID of the payment associated with this activity.
	PaymentID *string `json:"payment_id,omitempty" url:"payment_id,omitempty"`
	// The ID of the dispute associated with this activity.
	DisputeID *string `json:"dispute_id,omitempty" url:"dispute_id,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PaymentBalanceActivityOpenDisputeDetail) GetPaymentID() *string {
	if p == nil {
		return nil
	}
	return p.PaymentID
}

func (p *PaymentBalanceActivityOpenDisputeDetail) GetDisputeID() *string {
	if p == nil {
		return nil
	}
	return p.DisputeID
}

func (p *PaymentBalanceActivityOpenDisputeDetail) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaymentBalanceActivityOpenDisputeDetail) UnmarshalJSON(data []byte) error {
	type unmarshaler PaymentBalanceActivityOpenDisputeDetail
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaymentBalanceActivityOpenDisputeDetail(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaymentBalanceActivityOpenDisputeDetail) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaymentBalanceActivityOtherAdjustmentDetail struct {
	// The ID of the payment associated with this activity.
	PaymentID *string `json:"payment_id,omitempty" url:"payment_id,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PaymentBalanceActivityOtherAdjustmentDetail) GetPaymentID() *string {
	if p == nil {
		return nil
	}
	return p.PaymentID
}

func (p *PaymentBalanceActivityOtherAdjustmentDetail) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaymentBalanceActivityOtherAdjustmentDetail) UnmarshalJSON(data []byte) error {
	type unmarshaler PaymentBalanceActivityOtherAdjustmentDetail
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaymentBalanceActivityOtherAdjustmentDetail(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaymentBalanceActivityOtherAdjustmentDetail) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaymentBalanceActivityOtherDetail struct {
	// The ID of the payment associated with this activity.
	PaymentID *string `json:"payment_id,omitempty" url:"payment_id,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PaymentBalanceActivityOtherDetail) GetPaymentID() *string {
	if p == nil {
		return nil
	}
	return p.PaymentID
}

func (p *PaymentBalanceActivityOtherDetail) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaymentBalanceActivityOtherDetail) UnmarshalJSON(data []byte) error {
	type unmarshaler PaymentBalanceActivityOtherDetail
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaymentBalanceActivityOtherDetail(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaymentBalanceActivityOtherDetail) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaymentBalanceActivityRefundDetail struct {
	// The ID of the payment associated with this activity.
	PaymentID *string `json:"payment_id,omitempty" url:"payment_id,omitempty"`
	// The ID of the refund associated with this activity.
	RefundID *string `json:"refund_id,omitempty" url:"refund_id,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PaymentBalanceActivityRefundDetail) GetPaymentID() *string {
	if p == nil {
		return nil
	}
	return p.PaymentID
}

func (p *PaymentBalanceActivityRefundDetail) GetRefundID() *string {
	if p == nil {
		return nil
	}
	return p.RefundID
}

func (p *PaymentBalanceActivityRefundDetail) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaymentBalanceActivityRefundDetail) UnmarshalJSON(data []byte) error {
	type unmarshaler PaymentBalanceActivityRefundDetail
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaymentBalanceActivityRefundDetail(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaymentBalanceActivityRefundDetail) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaymentBalanceActivityReleaseAdjustmentDetail struct {
	// The ID of the payment associated with this activity.
	PaymentID *string `json:"payment_id,omitempty" url:"payment_id,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PaymentBalanceActivityReleaseAdjustmentDetail) GetPaymentID() *string {
	if p == nil {
		return nil
	}
	return p.PaymentID
}

func (p *PaymentBalanceActivityReleaseAdjustmentDetail) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaymentBalanceActivityReleaseAdjustmentDetail) UnmarshalJSON(data []byte) error {
	type unmarshaler PaymentBalanceActivityReleaseAdjustmentDetail
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaymentBalanceActivityReleaseAdjustmentDetail(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaymentBalanceActivityReleaseAdjustmentDetail) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaymentBalanceActivityReserveHoldDetail struct {
	// The ID of the payment associated with this activity.
	PaymentID *string `json:"payment_id,omitempty" url:"payment_id,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PaymentBalanceActivityReserveHoldDetail) GetPaymentID() *string {
	if p == nil {
		return nil
	}
	return p.PaymentID
}

func (p *PaymentBalanceActivityReserveHoldDetail) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaymentBalanceActivityReserveHoldDetail) UnmarshalJSON(data []byte) error {
	type unmarshaler PaymentBalanceActivityReserveHoldDetail
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaymentBalanceActivityReserveHoldDetail(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaymentBalanceActivityReserveHoldDetail) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaymentBalanceActivityReserveReleaseDetail struct {
	// The ID of the payment associated with this activity.
	PaymentID *string `json:"payment_id,omitempty" url:"payment_id,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PaymentBalanceActivityReserveReleaseDetail) GetPaymentID() *string {
	if p == nil {
		return nil
	}
	return p.PaymentID
}

func (p *PaymentBalanceActivityReserveReleaseDetail) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaymentBalanceActivityReserveReleaseDetail) UnmarshalJSON(data []byte) error {
	type unmarshaler PaymentBalanceActivityReserveReleaseDetail
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaymentBalanceActivityReserveReleaseDetail(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaymentBalanceActivityReserveReleaseDetail) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaymentBalanceActivitySquareCapitalPaymentDetail struct {
	// The ID of the payment associated with this activity.
	PaymentID *string `json:"payment_id,omitempty" url:"payment_id,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PaymentBalanceActivitySquareCapitalPaymentDetail) GetPaymentID() *string {
	if p == nil {
		return nil
	}
	return p.PaymentID
}

func (p *PaymentBalanceActivitySquareCapitalPaymentDetail) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaymentBalanceActivitySquareCapitalPaymentDetail) UnmarshalJSON(data []byte) error {
	type unmarshaler PaymentBalanceActivitySquareCapitalPaymentDetail
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaymentBalanceActivitySquareCapitalPaymentDetail(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaymentBalanceActivitySquareCapitalPaymentDetail) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaymentBalanceActivitySquareCapitalReversedPaymentDetail struct {
	// The ID of the payment associated with this activity.
	PaymentID *string `json:"payment_id,omitempty" url:"payment_id,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PaymentBalanceActivitySquareCapitalReversedPaymentDetail) GetPaymentID() *string {
	if p == nil {
		return nil
	}
	return p.PaymentID
}

func (p *PaymentBalanceActivitySquareCapitalReversedPaymentDetail) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaymentBalanceActivitySquareCapitalReversedPaymentDetail) UnmarshalJSON(data []byte) error {
	type unmarshaler PaymentBalanceActivitySquareCapitalReversedPaymentDetail
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaymentBalanceActivitySquareCapitalReversedPaymentDetail(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaymentBalanceActivitySquareCapitalReversedPaymentDetail) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaymentBalanceActivitySquarePayrollTransferDetail struct {
	// The ID of the payment associated with this activity.
	PaymentID *string `json:"payment_id,omitempty" url:"payment_id,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PaymentBalanceActivitySquarePayrollTransferDetail) GetPaymentID() *string {
	if p == nil {
		return nil
	}
	return p.PaymentID
}

func (p *PaymentBalanceActivitySquarePayrollTransferDetail) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaymentBalanceActivitySquarePayrollTransferDetail) UnmarshalJSON(data []byte) error {
	type unmarshaler PaymentBalanceActivitySquarePayrollTransferDetail
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaymentBalanceActivitySquarePayrollTransferDetail(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaymentBalanceActivitySquarePayrollTransferDetail) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaymentBalanceActivitySquarePayrollTransferReversedDetail struct {
	// The ID of the payment associated with this activity.
	PaymentID *string `json:"payment_id,omitempty" url:"payment_id,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PaymentBalanceActivitySquarePayrollTransferReversedDetail) GetPaymentID() *string {
	if p == nil {
		return nil
	}
	return p.PaymentID
}

func (p *PaymentBalanceActivitySquarePayrollTransferReversedDetail) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaymentBalanceActivitySquarePayrollTransferReversedDetail) UnmarshalJSON(data []byte) error {
	type unmarshaler PaymentBalanceActivitySquarePayrollTransferReversedDetail
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaymentBalanceActivitySquarePayrollTransferReversedDetail(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaymentBalanceActivitySquarePayrollTransferReversedDetail) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaymentBalanceActivityTaxOnFeeDetail struct {
	// The ID of the payment associated with this activity.
	PaymentID *string `json:"payment_id,omitempty" url:"payment_id,omitempty"`
	// The description of the tax rate being applied. For example: "GST", "HST".
	TaxRateDescription *string `json:"tax_rate_description,omitempty" url:"tax_rate_description,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PaymentBalanceActivityTaxOnFeeDetail) GetPaymentID() *string {
	if p == nil {
		return nil
	}
	return p.PaymentID
}

func (p *PaymentBalanceActivityTaxOnFeeDetail) GetTaxRateDescription() *string {
	if p == nil {
		return nil
	}
	return p.TaxRateDescription
}

func (p *PaymentBalanceActivityTaxOnFeeDetail) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaymentBalanceActivityTaxOnFeeDetail) UnmarshalJSON(data []byte) error {
	type unmarshaler PaymentBalanceActivityTaxOnFeeDetail
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaymentBalanceActivityTaxOnFeeDetail(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaymentBalanceActivityTaxOnFeeDetail) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaymentBalanceActivityThirdPartyFeeDetail struct {
	// The ID of the payment associated with this activity.
	PaymentID *string `json:"payment_id,omitempty" url:"payment_id,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PaymentBalanceActivityThirdPartyFeeDetail) GetPaymentID() *string {
	if p == nil {
		return nil
	}
	return p.PaymentID
}

func (p *PaymentBalanceActivityThirdPartyFeeDetail) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaymentBalanceActivityThirdPartyFeeDetail) UnmarshalJSON(data []byte) error {
	type unmarshaler PaymentBalanceActivityThirdPartyFeeDetail
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaymentBalanceActivityThirdPartyFeeDetail(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaymentBalanceActivityThirdPartyFeeDetail) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaymentBalanceActivityThirdPartyFeeRefundDetail struct {
	// The ID of the payment associated with this activity.
	PaymentID *string `json:"payment_id,omitempty" url:"payment_id,omitempty"`
	// The public refund id associated with this activity.
	RefundID *string `json:"refund_id,omitempty" url:"refund_id,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PaymentBalanceActivityThirdPartyFeeRefundDetail) GetPaymentID() *string {
	if p == nil {
		return nil
	}
	return p.PaymentID
}

func (p *PaymentBalanceActivityThirdPartyFeeRefundDetail) GetRefundID() *string {
	if p == nil {
		return nil
	}
	return p.RefundID
}

func (p *PaymentBalanceActivityThirdPartyFeeRefundDetail) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaymentBalanceActivityThirdPartyFeeRefundDetail) UnmarshalJSON(data []byte) error {
	type unmarshaler PaymentBalanceActivityThirdPartyFeeRefundDetail
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaymentBalanceActivityThirdPartyFeeRefundDetail(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaymentBalanceActivityThirdPartyFeeRefundDetail) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// An accounting of the amount owed the seller and record of the actual transfer to their
// external bank account or to the Square balance.
type Payout struct {
	// A unique ID for the payout.
	ID string `json:"id" url:"id"`
	// Indicates the payout status.
	// See [PayoutStatus](#type-payoutstatus) for possible values
	Status *PayoutStatus `json:"status,omitempty" url:"status,omitempty"`
	// The ID of the location associated with the payout.
	LocationID string `json:"location_id" url:"location_id"`
	// The timestamp of when the payout was created and submitted for deposit to the seller's banking destination, in RFC 3339 format.
	CreatedAt *string `json:"created_at,omitempty" url:"created_at,omitempty"`
	// The timestamp of when the payout was last updated, in RFC 3339 format.
	UpdatedAt *string `json:"updated_at,omitempty" url:"updated_at,omitempty"`
	// The amount of money involved in the payout. A positive amount indicates a deposit, and a negative amount indicates a withdrawal. This amount is never zero.
	AmountMoney *Money `json:"amount_money,omitempty" url:"amount_money,omitempty"`
	// Information about the banking destination (such as a bank account, Square checking account, or debit card)
	// against which the payout was made.
	Destination *Destination `json:"destination,omitempty" url:"destination,omitempty"`
	// The version number, which is incremented each time an update is made to this payout record.
	// The version number helps developers receive event notifications or feeds out of order.
	Version *int `json:"version,omitempty" url:"version,omitempty"`
	// Indicates the payout type.
	// See [PayoutType](#type-payouttype) for possible values
	Type *PayoutType `json:"type,omitempty" url:"type,omitempty"`
	// A list of transfer fees and any taxes on the fees assessed by Square for this payout.
	PayoutFee []*PayoutFee `json:"payout_fee,omitempty" url:"payout_fee,omitempty"`
	// The calendar date, in ISO 8601 format (YYYY-MM-DD), when the payout is due to arrive in the seller’s banking destination.
	ArrivalDate *string `json:"arrival_date,omitempty" url:"arrival_date,omitempty"`
	// A unique ID for each `Payout` object that might also appear on the seller’s bank statement. You can use this ID to automate the process of reconciling each payout with the corresponding line item on the bank statement.
	EndToEndID *string `json:"end_to_end_id,omitempty" url:"end_to_end_id,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *Payout) GetID() string {
	if p == nil {
		return ""
	}
	return p.ID
}

func (p *Payout) GetStatus() *PayoutStatus {
	if p == nil {
		return nil
	}
	return p.Status
}

func (p *Payout) GetLocationID() string {
	if p == nil {
		return ""
	}
	return p.LocationID
}

func (p *Payout) GetCreatedAt() *string {
	if p == nil {
		return nil
	}
	return p.CreatedAt
}

func (p *Payout) GetUpdatedAt() *string {
	if p == nil {
		return nil
	}
	return p.UpdatedAt
}

func (p *Payout) GetAmountMoney() *Money {
	if p == nil {
		return nil
	}
	return p.AmountMoney
}

func (p *Payout) GetDestination() *Destination {
	if p == nil {
		return nil
	}
	return p.Destination
}

func (p *Payout) GetVersion() *int {
	if p == nil {
		return nil
	}
	return p.Version
}

func (p *Payout) GetType() *PayoutType {
	if p == nil {
		return nil
	}
	return p.Type
}

func (p *Payout) GetPayoutFee() []*PayoutFee {
	if p == nil {
		return nil
	}
	return p.PayoutFee
}

func (p *Payout) GetArrivalDate() *string {
	if p == nil {
		return nil
	}
	return p.ArrivalDate
}

func (p *Payout) GetEndToEndID() *string {
	if p == nil {
		return nil
	}
	return p.EndToEndID
}

func (p *Payout) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *Payout) UnmarshalJSON(data []byte) error {
	type unmarshaler Payout
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = Payout(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *Payout) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// One or more PayoutEntries that make up a Payout. Each one has a date, amount, and type of activity.
// The total amount of the payout will equal the sum of the payout entries for a batch payout
type PayoutEntry struct {
	// A unique ID for the payout entry.
	ID string `json:"id" url:"id"`
	// The ID of the payout entries’ associated payout.
	PayoutID string `json:"payout_id" url:"payout_id"`
	// The timestamp of when the payout entry affected the balance, in RFC 3339 format.
	EffectiveAt *string `json:"effective_at,omitempty" url:"effective_at,omitempty"`
	// The type of activity associated with this payout entry.
	// See [ActivityType](#type-activitytype) for possible values
	Type *ActivityType `json:"type,omitempty" url:"type,omitempty"`
	// The amount of money involved in this payout entry.
	GrossAmountMoney *Money `json:"gross_amount_money,omitempty" url:"gross_amount_money,omitempty"`
	// The amount of Square fees associated with this payout entry.
	FeeAmountMoney *Money `json:"fee_amount_money,omitempty" url:"fee_amount_money,omitempty"`
	// The net proceeds from this transaction after any fees.
	NetAmountMoney *Money `json:"net_amount_money,omitempty" url:"net_amount_money,omitempty"`
	// Details of any developer app fee revenue generated on a payment.
	TypeAppFeeRevenueDetails *PaymentBalanceActivityAppFeeRevenueDetail `json:"type_app_fee_revenue_details,omitempty" url:"type_app_fee_revenue_details,omitempty"`
	// Details of a refund for an app fee on a payment.
	TypeAppFeeRefundDetails *PaymentBalanceActivityAppFeeRefundDetail `json:"type_app_fee_refund_details,omitempty" url:"type_app_fee_refund_details,omitempty"`
	// Details of any automatic transfer from the payment processing balance to the Square Savings account. These are, generally, proportional to the merchant's sales.
	TypeAutomaticSavingsDetails *PaymentBalanceActivityAutomaticSavingsDetail `json:"type_automatic_savings_details,omitempty" url:"type_automatic_savings_details,omitempty"`
	// Details of any automatic transfer from the Square Savings account back to the processing balance. These are, generally, proportional to the merchant's refunds.
	TypeAutomaticSavingsReversedDetails *PaymentBalanceActivityAutomaticSavingsReversedDetail `json:"type_automatic_savings_reversed_details,omitempty" url:"type_automatic_savings_reversed_details,omitempty"`
	// Details of credit card payment captures.
	TypeChargeDetails *PaymentBalanceActivityChargeDetail `json:"type_charge_details,omitempty" url:"type_charge_details,omitempty"`
	// Details of any fees involved with deposits such as for instant deposits.
	TypeDepositFeeDetails *PaymentBalanceActivityDepositFeeDetail `json:"type_deposit_fee_details,omitempty" url:"type_deposit_fee_details,omitempty"`
	// Details of any reversal or refund of fees involved with deposits such as for instant deposits.
	TypeDepositFeeReversedDetails *PaymentBalanceActivityDepositFeeReversedDetail `json:"type_deposit_fee_reversed_details,omitempty" url:"type_deposit_fee_reversed_details,omitempty"`
	// Details of any balance change due to a dispute event.
	TypeDisputeDetails *PaymentBalanceActivityDisputeDetail `json:"type_dispute_details,omitempty" url:"type_dispute_details,omitempty"`
	// Details of adjustments due to the Square processing fee.
	TypeFeeDetails *PaymentBalanceActivityFeeDetail `json:"type_fee_details,omitempty" url:"type_fee_details,omitempty"`
	// Square offers Free Payments Processing for a variety of business scenarios including seller referral or when Square wants to apologize for a bug, customer service, repricing complication, and so on. This entry represents details of any credit to the merchant for the purposes of Free Processing.
	TypeFreeProcessingDetails *PaymentBalanceActivityFreeProcessingDetail `json:"type_free_processing_details,omitempty" url:"type_free_processing_details,omitempty"`
	// Details of any adjustment made by Square related to the holding or releasing of a payment.
	TypeHoldAdjustmentDetails *PaymentBalanceActivityHoldAdjustmentDetail `json:"type_hold_adjustment_details,omitempty" url:"type_hold_adjustment_details,omitempty"`
	// Details of any open disputes.
	TypeOpenDisputeDetails *PaymentBalanceActivityOpenDisputeDetail `json:"type_open_dispute_details,omitempty" url:"type_open_dispute_details,omitempty"`
	// Details of any other type that does not belong in the rest of the types.
	TypeOtherDetails *PaymentBalanceActivityOtherDetail `json:"type_other_details,omitempty" url:"type_other_details,omitempty"`
	// Details of any other type of adjustments that don't fall under existing types.
	TypeOtherAdjustmentDetails *PaymentBalanceActivityOtherAdjustmentDetail `json:"type_other_adjustment_details,omitempty" url:"type_other_adjustment_details,omitempty"`
	// Details of a refund for an existing card payment.
	TypeRefundDetails *PaymentBalanceActivityRefundDetail `json:"type_refund_details,omitempty" url:"type_refund_details,omitempty"`
	// Details of fees released for adjustments.
	TypeReleaseAdjustmentDetails *PaymentBalanceActivityReleaseAdjustmentDetail `json:"type_release_adjustment_details,omitempty" url:"type_release_adjustment_details,omitempty"`
	// Details of fees paid for funding risk reserve.
	TypeReserveHoldDetails *PaymentBalanceActivityReserveHoldDetail `json:"type_reserve_hold_details,omitempty" url:"type_reserve_hold_details,omitempty"`
	// Details of fees released from risk reserve.
	TypeReserveReleaseDetails *PaymentBalanceActivityReserveReleaseDetail `json:"type_reserve_release_details,omitempty" url:"type_reserve_release_details,omitempty"`
	// Details of capital merchant cash advance (MCA) assessments. These are, generally, proportional to the merchant's sales but may be issued for other reasons related to the MCA.
	TypeSquareCapitalPaymentDetails *PaymentBalanceActivitySquareCapitalPaymentDetail `json:"type_square_capital_payment_details,omitempty" url:"type_square_capital_payment_details,omitempty"`
	// Details of capital merchant cash advance (MCA) assessment refunds. These are, generally, proportional to the merchant's refunds but may be issued for other reasons related to the MCA.
	TypeSquareCapitalReversedPaymentDetails *PaymentBalanceActivitySquareCapitalReversedPaymentDetail `json:"type_square_capital_reversed_payment_details,omitempty" url:"type_square_capital_reversed_payment_details,omitempty"`
	// Details of tax paid on fee amounts.
	TypeTaxOnFeeDetails *PaymentBalanceActivityTaxOnFeeDetail `json:"type_tax_on_fee_details,omitempty" url:"type_tax_on_fee_details,omitempty"`
	// Details of fees collected by a 3rd party platform.
	TypeThirdPartyFeeDetails *PaymentBalanceActivityThirdPartyFeeDetail `json:"type_third_party_fee_details,omitempty" url:"type_third_party_fee_details,omitempty"`
	// Details of refunded fees from a 3rd party platform.
	TypeThirdPartyFeeRefundDetails *PaymentBalanceActivityThirdPartyFeeRefundDetail `json:"type_third_party_fee_refund_details,omitempty" url:"type_third_party_fee_refund_details,omitempty"`
	// Details of a payroll payment that was transferred to a team member’s bank account.
	TypeSquarePayrollTransferDetails *PaymentBalanceActivitySquarePayrollTransferDetail `json:"type_square_payroll_transfer_details,omitempty" url:"type_square_payroll_transfer_details,omitempty"`
	// Details of a payroll payment to a team member’s bank account that was deposited back to the seller’s account by Square.
	TypeSquarePayrollTransferReversedDetails *PaymentBalanceActivitySquarePayrollTransferReversedDetail `json:"type_square_payroll_transfer_reversed_details,omitempty" url:"type_square_payroll_transfer_reversed_details,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PayoutEntry) GetID() string {
	if p == nil {
		return ""
	}
	return p.ID
}

func (p *PayoutEntry) GetPayoutID() string {
	if p == nil {
		return ""
	}
	return p.PayoutID
}

func (p *PayoutEntry) GetEffectiveAt() *string {
	if p == nil {
		return nil
	}
	return p.EffectiveAt
}

func (p *PayoutEntry) GetType() *ActivityType {
	if p == nil {
		return nil
	}
	return p.Type
}

func (p *PayoutEntry) GetGrossAmountMoney() *Money {
	if p == nil {
		return nil
	}
	return p.GrossAmountMoney
}

func (p *PayoutEntry) GetFeeAmountMoney() *Money {
	if p == nil {
		return nil
	}
	return p.FeeAmountMoney
}

func (p *PayoutEntry) GetNetAmountMoney() *Money {
	if p == nil {
		return nil
	}
	return p.NetAmountMoney
}

func (p *PayoutEntry) GetTypeAppFeeRevenueDetails() *PaymentBalanceActivityAppFeeRevenueDetail {
	if p == nil {
		return nil
	}
	return p.TypeAppFeeRevenueDetails
}

func (p *PayoutEntry) GetTypeAppFeeRefundDetails() *PaymentBalanceActivityAppFeeRefundDetail {
	if p == nil {
		return nil
	}
	return p.TypeAppFeeRefundDetails
}

func (p *PayoutEntry) GetTypeAutomaticSavingsDetails() *PaymentBalanceActivityAutomaticSavingsDetail {
	if p == nil {
		return nil
	}
	return p.TypeAutomaticSavingsDetails
}

func (p *PayoutEntry) GetTypeAutomaticSavingsReversedDetails() *PaymentBalanceActivityAutomaticSavingsReversedDetail {
	if p == nil {
		return nil
	}
	return p.TypeAutomaticSavingsReversedDetails
}

func (p *PayoutEntry) GetTypeChargeDetails() *PaymentBalanceActivityChargeDetail {
	if p == nil {
		return nil
	}
	return p.TypeChargeDetails
}

func (p *PayoutEntry) GetTypeDepositFeeDetails() *PaymentBalanceActivityDepositFeeDetail {
	if p == nil {
		return nil
	}
	return p.TypeDepositFeeDetails
}

func (p *PayoutEntry) GetTypeDepositFeeReversedDetails() *PaymentBalanceActivityDepositFeeReversedDetail {
	if p == nil {
		return nil
	}
	return p.TypeDepositFeeReversedDetails
}

func (p *PayoutEntry) GetTypeDisputeDetails() *PaymentBalanceActivityDisputeDetail {
	if p == nil {
		return nil
	}
	return p.TypeDisputeDetails
}

func (p *PayoutEntry) GetTypeFeeDetails() *PaymentBalanceActivityFeeDetail {
	if p == nil {
		return nil
	}
	return p.TypeFeeDetails
}

func (p *PayoutEntry) GetTypeFreeProcessingDetails() *PaymentBalanceActivityFreeProcessingDetail {
	if p == nil {
		return nil
	}
	return p.TypeFreeProcessingDetails
}

func (p *PayoutEntry) GetTypeHoldAdjustmentDetails() *PaymentBalanceActivityHoldAdjustmentDetail {
	if p == nil {
		return nil
	}
	return p.TypeHoldAdjustmentDetails
}

func (p *PayoutEntry) GetTypeOpenDisputeDetails() *PaymentBalanceActivityOpenDisputeDetail {
	if p == nil {
		return nil
	}
	return p.TypeOpenDisputeDetails
}

func (p *PayoutEntry) GetTypeOtherDetails() *PaymentBalanceActivityOtherDetail {
	if p == nil {
		return nil
	}
	return p.TypeOtherDetails
}

func (p *PayoutEntry) GetTypeOtherAdjustmentDetails() *PaymentBalanceActivityOtherAdjustmentDetail {
	if p == nil {
		return nil
	}
	return p.TypeOtherAdjustmentDetails
}

func (p *PayoutEntry) GetTypeRefundDetails() *PaymentBalanceActivityRefundDetail {
	if p == nil {
		return nil
	}
	return p.TypeRefundDetails
}

func (p *PayoutEntry) GetTypeReleaseAdjustmentDetails() *PaymentBalanceActivityReleaseAdjustmentDetail {
	if p == nil {
		return nil
	}
	return p.TypeReleaseAdjustmentDetails
}

func (p *PayoutEntry) GetTypeReserveHoldDetails() *PaymentBalanceActivityReserveHoldDetail {
	if p == nil {
		return nil
	}
	return p.TypeReserveHoldDetails
}

func (p *PayoutEntry) GetTypeReserveReleaseDetails() *PaymentBalanceActivityReserveReleaseDetail {
	if p == nil {
		return nil
	}
	return p.TypeReserveReleaseDetails
}

func (p *PayoutEntry) GetTypeSquareCapitalPaymentDetails() *PaymentBalanceActivitySquareCapitalPaymentDetail {
	if p == nil {
		return nil
	}
	return p.TypeSquareCapitalPaymentDetails
}

func (p *PayoutEntry) GetTypeSquareCapitalReversedPaymentDetails() *PaymentBalanceActivitySquareCapitalReversedPaymentDetail {
	if p == nil {
		return nil
	}
	return p.TypeSquareCapitalReversedPaymentDetails
}

func (p *PayoutEntry) GetTypeTaxOnFeeDetails() *PaymentBalanceActivityTaxOnFeeDetail {
	if p == nil {
		return nil
	}
	return p.TypeTaxOnFeeDetails
}

func (p *PayoutEntry) GetTypeThirdPartyFeeDetails() *PaymentBalanceActivityThirdPartyFeeDetail {
	if p == nil {
		return nil
	}
	return p.TypeThirdPartyFeeDetails
}

func (p *PayoutEntry) GetTypeThirdPartyFeeRefundDetails() *PaymentBalanceActivityThirdPartyFeeRefundDetail {
	if p == nil {
		return nil
	}
	return p.TypeThirdPartyFeeRefundDetails
}

func (p *PayoutEntry) GetTypeSquarePayrollTransferDetails() *PaymentBalanceActivitySquarePayrollTransferDetail {
	if p == nil {
		return nil
	}
	return p.TypeSquarePayrollTransferDetails
}

func (p *PayoutEntry) GetTypeSquarePayrollTransferReversedDetails() *PaymentBalanceActivitySquarePayrollTransferReversedDetail {
	if p == nil {
		return nil
	}
	return p.TypeSquarePayrollTransferReversedDetails
}

func (p *PayoutEntry) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PayoutEntry) UnmarshalJSON(data []byte) error {
	type unmarshaler PayoutEntry
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PayoutEntry(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PayoutEntry) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// Represents a payout fee that can incur as part of a payout.
type PayoutFee struct {
	// The money amount of the payout fee.
	AmountMoney *Money `json:"amount_money,omitempty" url:"amount_money,omitempty"`
	// The timestamp of when the fee takes effect, in RFC 3339 format.
	EffectiveAt *string `json:"effective_at,omitempty" url:"effective_at,omitempty"`
	// The type of fee assessed as part of the payout.
	// See [PayoutFeeType](#type-payoutfeetype) for possible values
	Type *PayoutFeeType `json:"type,omitempty" url:"type,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PayoutFee) GetAmountMoney() *Money {
	if p == nil {
		return nil
	}
	return p.AmountMoney
}

func (p *PayoutFee) GetEffectiveAt() *string {
	if p == nil {
		return nil
	}
	return p.EffectiveAt
}

func (p *PayoutFee) GetType() *PayoutFeeType {
	if p == nil {
		return nil
	}
	return p.Type
}

func (p *PayoutFee) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PayoutFee) UnmarshalJSON(data []byte) error {
	type unmarshaler PayoutFee
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PayoutFee(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PayoutFee) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// Represents the type of payout fee that can incur as part of a payout.
type PayoutFeeType string

const (
	PayoutFeeTypeTransferFee      PayoutFeeType = "TRANSFER_FEE"
	PayoutFeeTypeTaxOnTransferFee PayoutFeeType = "TAX_ON_TRANSFER_FEE"
)

func NewPayoutFeeTypeFromString(s string) (PayoutFeeType, error) {
	switch s {
	case "TRANSFER_FEE":
		return PayoutFeeTypeTransferFee, nil
	case "TAX_ON_TRANSFER_FEE":
		return PayoutFeeTypeTaxOnTransferFee, nil
	}
	var t PayoutFeeType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (p PayoutFeeType) Ptr() *PayoutFeeType {
	return &p
}

// Payout status types
type PayoutStatus string

const (
	PayoutStatusSent   PayoutStatus = "SENT"
	PayoutStatusFailed PayoutStatus = "FAILED"
	PayoutStatusPaid   PayoutStatus = "PAID"
)

func NewPayoutStatusFromString(s string) (PayoutStatus, error) {
	switch s {
	case "SENT":
		return PayoutStatusSent, nil
	case "FAILED":
		return PayoutStatusFailed, nil
	case "PAID":
		return PayoutStatusPaid, nil
	}
	var t PayoutStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (p PayoutStatus) Ptr() *PayoutStatus {
	return &p
}

// The type of payout: “BATCH” or “SIMPLE”.
// BATCH payouts include a list of payout entries that can be considered settled.
// SIMPLE payouts do not have any payout entries associated with them
// and will show up as one of the payout entries in a future BATCH payout.
type PayoutType string

const (
	PayoutTypeBatch  PayoutType = "BATCH"
	PayoutTypeSimple PayoutType = "SIMPLE"
)

func NewPayoutTypeFromString(s string) (PayoutType, error) {
	switch s {
	case "BATCH":
		return PayoutTypeBatch, nil
	case "SIMPLE":
		return PayoutTypeSimple, nil
	}
	var t PayoutType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (p PayoutType) Ptr() *PayoutType {
	return &p
}
