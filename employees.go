// This file was auto-generated by Fern from our API Definition.

package square

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/square/square-go-sdk/v40/internal"
)

type EmployeesGetRequest struct {
	// UUID for the employee that was requested.
	ID string `json:"-" url:"-"`
}

type EmployeesListRequest struct {
	LocationID *string `json:"-" url:"location_id,omitempty"`
	// Specifies the EmployeeStatus to filter the employee by.
	Status *EmployeeStatus `json:"-" url:"status,omitempty"`
	// The number of employees to be returned on each page.
	Limit *int `json:"-" url:"limit,omitempty"`
	// The token required to retrieve the specified page of results.
	Cursor *string `json:"-" url:"cursor,omitempty"`
}

// An employee object that is used by the external API.
//
// DEPRECATED at version 2020-08-26. Replaced by [TeamMember](entity:TeamMember).
type Employee struct {
	// UUID for this object.
	ID *string `json:"id,omitempty" url:"id,omitempty"`
	// The employee's first name.
	FirstName *string `json:"first_name,omitempty" url:"first_name,omitempty"`
	// The employee's last name.
	LastName *string `json:"last_name,omitempty" url:"last_name,omitempty"`
	// The employee's email address
	Email *string `json:"email,omitempty" url:"email,omitempty"`
	// The employee's phone number in E.164 format, i.e. "+12125554250"
	PhoneNumber *string `json:"phone_number,omitempty" url:"phone_number,omitempty"`
	// A list of location IDs where this employee has access to.
	LocationIDs []string `json:"location_ids,omitempty" url:"location_ids,omitempty"`
	// Specifies the status of the employees being fetched.
	// See [EmployeeStatus](#type-employeestatus) for possible values
	Status *EmployeeStatus `json:"status,omitempty" url:"status,omitempty"`
	// Whether this employee is the owner of the merchant. Each merchant
	// has one owner employee, and that employee has full authority over
	// the account.
	IsOwner *bool `json:"is_owner,omitempty" url:"is_owner,omitempty"`
	// A read-only timestamp in RFC 3339 format.
	CreatedAt *string `json:"created_at,omitempty" url:"created_at,omitempty"`
	// A read-only timestamp in RFC 3339 format.
	UpdatedAt *string `json:"updated_at,omitempty" url:"updated_at,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *Employee) GetID() *string {
	if e == nil {
		return nil
	}
	return e.ID
}

func (e *Employee) GetFirstName() *string {
	if e == nil {
		return nil
	}
	return e.FirstName
}

func (e *Employee) GetLastName() *string {
	if e == nil {
		return nil
	}
	return e.LastName
}

func (e *Employee) GetEmail() *string {
	if e == nil {
		return nil
	}
	return e.Email
}

func (e *Employee) GetPhoneNumber() *string {
	if e == nil {
		return nil
	}
	return e.PhoneNumber
}

func (e *Employee) GetLocationIDs() []string {
	if e == nil {
		return nil
	}
	return e.LocationIDs
}

func (e *Employee) GetStatus() *EmployeeStatus {
	if e == nil {
		return nil
	}
	return e.Status
}

func (e *Employee) GetIsOwner() *bool {
	if e == nil {
		return nil
	}
	return e.IsOwner
}

func (e *Employee) GetCreatedAt() *string {
	if e == nil {
		return nil
	}
	return e.CreatedAt
}

func (e *Employee) GetUpdatedAt() *string {
	if e == nil {
		return nil
	}
	return e.UpdatedAt
}

func (e *Employee) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *Employee) UnmarshalJSON(data []byte) error {
	type unmarshaler Employee
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = Employee(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *Employee) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

// The status of the Employee being retrieved.
//
// DEPRECATED at version 2020-08-26. Replaced by [TeamMemberStatus](entity:TeamMemberStatus).
type EmployeeStatus string

const (
	EmployeeStatusActive   EmployeeStatus = "ACTIVE"
	EmployeeStatusInactive EmployeeStatus = "INACTIVE"
)

func NewEmployeeStatusFromString(s string) (EmployeeStatus, error) {
	switch s {
	case "ACTIVE":
		return EmployeeStatusActive, nil
	case "INACTIVE":
		return EmployeeStatusInactive, nil
	}
	var t EmployeeStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (e EmployeeStatus) Ptr() *EmployeeStatus {
	return &e
}

type GetEmployeeResponse struct {
	Employee *Employee `json:"employee,omitempty" url:"employee,omitempty"`
	// Any errors that occurred during the request.
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetEmployeeResponse) GetEmployee() *Employee {
	if g == nil {
		return nil
	}
	return g.Employee
}

func (g *GetEmployeeResponse) GetErrors() []*Error {
	if g == nil {
		return nil
	}
	return g.Errors
}

func (g *GetEmployeeResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetEmployeeResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetEmployeeResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetEmployeeResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetEmployeeResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type ListEmployeesResponse struct {
	Employees []*Employee `json:"employees,omitempty" url:"employees,omitempty"`
	// The token to be used to retrieve the next page of results.
	Cursor *string `json:"cursor,omitempty" url:"cursor,omitempty"`
	// Any errors that occurred during the request.
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListEmployeesResponse) GetEmployees() []*Employee {
	if l == nil {
		return nil
	}
	return l.Employees
}

func (l *ListEmployeesResponse) GetCursor() *string {
	if l == nil {
		return nil
	}
	return l.Cursor
}

func (l *ListEmployeesResponse) GetErrors() []*Error {
	if l == nil {
		return nil
	}
	return l.Errors
}

func (l *ListEmployeesResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListEmployeesResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListEmployeesResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListEmployeesResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListEmployeesResponse) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}
