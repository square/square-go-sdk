// Code generated by Fern. DO NOT EDIT.

package square

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/square/square-go-sdk/v2/internal"
)

type V1ListOrdersRequest struct {
	// The ID of the location to list online store orders for.
	LocationID string `json:"-" url:"-"`
	// The order in which payments are listed in the response.
	Order *SortOrder `json:"-" url:"order,omitempty"`
	// The maximum number of payments to return in a single response. This value cannot exceed 200.
	Limit *int `json:"-" url:"limit,omitempty"`
	// A pagination cursor to retrieve the next set of results for your
	// original query to the endpoint.
	BatchToken *string `json:"-" url:"batch_token,omitempty"`
}

type V1RetrieveOrderRequest struct {
	// The ID of the order's associated location.
	LocationID string `json:"-" url:"-"`
	// The order's Square-issued ID. You obtain this value from Order objects returned by the List Orders endpoint
	OrderID string `json:"-" url:"-"`
}

type V1UpdateOrderRequest struct {
	// The ID of the order's associated location.
	LocationID string `json:"-" url:"-"`
	// The order's Square-issued ID. You obtain this value from Order objects returned by the List Orders endpoint
	OrderID string `json:"-" url:"-"`
	// The action to perform on the order (COMPLETE, CANCEL, or REFUND).
	// See [V1UpdateOrderRequestAction](#type-v1updateorderrequestaction) for possible values
	Action V1UpdateOrderRequestAction `json:"action" url:"-"`
	// The tracking number of the shipment associated with the order. Only valid if action is COMPLETE.
	ShippedTrackingNumber *string `json:"shipped_tracking_number,omitempty" url:"-"`
	// A merchant-specified note about the completion of the order. Only valid if action is COMPLETE.
	CompletedNote *string `json:"completed_note,omitempty" url:"-"`
	// A merchant-specified note about the refunding of the order. Only valid if action is REFUND.
	RefundedNote *string `json:"refunded_note,omitempty" url:"-"`
	// A merchant-specified note about the canceling of the order. Only valid if action is CANCEL.
	CanceledNote *string `json:"canceled_note,omitempty" url:"-"`
}

type V1Money struct {
	// Amount in the lowest denominated value of this Currency. E.g. in USD
	// these are cents, in JPY they are Yen (which do not have a 'cent' concept).
	Amount *int `json:"amount,omitempty" url:"amount,omitempty"`
	// See [Currency](#type-currency) for possible values
	CurrencyCode *Currency `json:"currency_code,omitempty" url:"currency_code,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *V1Money) GetAmount() *int {
	if v == nil {
		return nil
	}
	return v.Amount
}

func (v *V1Money) GetCurrencyCode() *Currency {
	if v == nil {
		return nil
	}
	return v.CurrencyCode
}

func (v *V1Money) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *V1Money) UnmarshalJSON(data []byte) error {
	type unmarshaler V1Money
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = V1Money(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *V1Money) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

// V1Order
type V1Order struct {
	// Any errors that occurred during the request.
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`
	// The order's unique identifier.
	ID *string `json:"id,omitempty" url:"id,omitempty"`
	// The email address of the order's buyer.
	BuyerEmail *string `json:"buyer_email,omitempty" url:"buyer_email,omitempty"`
	// The name of the order's buyer.
	RecipientName *string `json:"recipient_name,omitempty" url:"recipient_name,omitempty"`
	// The phone number to use for the order's delivery.
	RecipientPhoneNumber *string `json:"recipient_phone_number,omitempty" url:"recipient_phone_number,omitempty"`
	// Whether the tax is an ADDITIVE tax or an INCLUSIVE tax.
	// See [V1OrderState](#type-v1orderstate) for possible values
	State *V1OrderState `json:"state,omitempty" url:"state,omitempty"`
	// The address to ship the order to.
	ShippingAddress *Address `json:"shipping_address,omitempty" url:"shipping_address,omitempty"`
	// The amount of all items purchased in the order, before taxes and shipping.
	SubtotalMoney *V1Money `json:"subtotal_money,omitempty" url:"subtotal_money,omitempty"`
	// The shipping cost for the order.
	TotalShippingMoney *V1Money `json:"total_shipping_money,omitempty" url:"total_shipping_money,omitempty"`
	// The total of all taxes applied to the order.
	TotalTaxMoney *V1Money `json:"total_tax_money,omitempty" url:"total_tax_money,omitempty"`
	// The total cost of the order.
	TotalPriceMoney *V1Money `json:"total_price_money,omitempty" url:"total_price_money,omitempty"`
	// The total of all discounts applied to the order.
	TotalDiscountMoney *V1Money `json:"total_discount_money,omitempty" url:"total_discount_money,omitempty"`
	// The time when the order was created, in ISO 8601 format.
	CreatedAt *string `json:"created_at,omitempty" url:"created_at,omitempty"`
	// The time when the order was last modified, in ISO 8601 format.
	UpdatedAt *string `json:"updated_at,omitempty" url:"updated_at,omitempty"`
	// The time when the order expires if no action is taken, in ISO 8601 format.
	ExpiresAt *string `json:"expires_at,omitempty" url:"expires_at,omitempty"`
	// The unique identifier of the payment associated with the order.
	PaymentID *string `json:"payment_id,omitempty" url:"payment_id,omitempty"`
	// A note provided by the buyer when the order was created, if any.
	BuyerNote *string `json:"buyer_note,omitempty" url:"buyer_note,omitempty"`
	// A note provided by the merchant when the order's state was set to COMPLETED, if any
	CompletedNote *string `json:"completed_note,omitempty" url:"completed_note,omitempty"`
	// A note provided by the merchant when the order's state was set to REFUNDED, if any.
	RefundedNote *string `json:"refunded_note,omitempty" url:"refunded_note,omitempty"`
	// A note provided by the merchant when the order's state was set to CANCELED, if any.
	CanceledNote *string `json:"canceled_note,omitempty" url:"canceled_note,omitempty"`
	// The tender used to pay for the order.
	Tender *V1Tender `json:"tender,omitempty" url:"tender,omitempty"`
	// The history of actions associated with the order.
	OrderHistory []*V1OrderHistoryEntry `json:"order_history,omitempty" url:"order_history,omitempty"`
	// The promo code provided by the buyer, if any.
	PromoCode *string `json:"promo_code,omitempty" url:"promo_code,omitempty"`
	// For Bitcoin transactions, the address that the buyer sent Bitcoin to.
	BtcReceiveAddress *string `json:"btc_receive_address,omitempty" url:"btc_receive_address,omitempty"`
	// For Bitcoin transactions, the price of the buyer's order in satoshi (100 million satoshi equals 1 BTC).
	BtcPriceSatoshi *float64 `json:"btc_price_satoshi,omitempty" url:"btc_price_satoshi,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *V1Order) GetErrors() []*Error {
	if v == nil {
		return nil
	}
	return v.Errors
}

func (v *V1Order) GetID() *string {
	if v == nil {
		return nil
	}
	return v.ID
}

func (v *V1Order) GetBuyerEmail() *string {
	if v == nil {
		return nil
	}
	return v.BuyerEmail
}

func (v *V1Order) GetRecipientName() *string {
	if v == nil {
		return nil
	}
	return v.RecipientName
}

func (v *V1Order) GetRecipientPhoneNumber() *string {
	if v == nil {
		return nil
	}
	return v.RecipientPhoneNumber
}

func (v *V1Order) GetState() *V1OrderState {
	if v == nil {
		return nil
	}
	return v.State
}

func (v *V1Order) GetShippingAddress() *Address {
	if v == nil {
		return nil
	}
	return v.ShippingAddress
}

func (v *V1Order) GetSubtotalMoney() *V1Money {
	if v == nil {
		return nil
	}
	return v.SubtotalMoney
}

func (v *V1Order) GetTotalShippingMoney() *V1Money {
	if v == nil {
		return nil
	}
	return v.TotalShippingMoney
}

func (v *V1Order) GetTotalTaxMoney() *V1Money {
	if v == nil {
		return nil
	}
	return v.TotalTaxMoney
}

func (v *V1Order) GetTotalPriceMoney() *V1Money {
	if v == nil {
		return nil
	}
	return v.TotalPriceMoney
}

func (v *V1Order) GetTotalDiscountMoney() *V1Money {
	if v == nil {
		return nil
	}
	return v.TotalDiscountMoney
}

func (v *V1Order) GetCreatedAt() *string {
	if v == nil {
		return nil
	}
	return v.CreatedAt
}

func (v *V1Order) GetUpdatedAt() *string {
	if v == nil {
		return nil
	}
	return v.UpdatedAt
}

func (v *V1Order) GetExpiresAt() *string {
	if v == nil {
		return nil
	}
	return v.ExpiresAt
}

func (v *V1Order) GetPaymentID() *string {
	if v == nil {
		return nil
	}
	return v.PaymentID
}

func (v *V1Order) GetBuyerNote() *string {
	if v == nil {
		return nil
	}
	return v.BuyerNote
}

func (v *V1Order) GetCompletedNote() *string {
	if v == nil {
		return nil
	}
	return v.CompletedNote
}

func (v *V1Order) GetRefundedNote() *string {
	if v == nil {
		return nil
	}
	return v.RefundedNote
}

func (v *V1Order) GetCanceledNote() *string {
	if v == nil {
		return nil
	}
	return v.CanceledNote
}

func (v *V1Order) GetTender() *V1Tender {
	if v == nil {
		return nil
	}
	return v.Tender
}

func (v *V1Order) GetOrderHistory() []*V1OrderHistoryEntry {
	if v == nil {
		return nil
	}
	return v.OrderHistory
}

func (v *V1Order) GetPromoCode() *string {
	if v == nil {
		return nil
	}
	return v.PromoCode
}

func (v *V1Order) GetBtcReceiveAddress() *string {
	if v == nil {
		return nil
	}
	return v.BtcReceiveAddress
}

func (v *V1Order) GetBtcPriceSatoshi() *float64 {
	if v == nil {
		return nil
	}
	return v.BtcPriceSatoshi
}

func (v *V1Order) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *V1Order) UnmarshalJSON(data []byte) error {
	type unmarshaler V1Order
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = V1Order(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *V1Order) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

// V1OrderHistoryEntry
type V1OrderHistoryEntry struct {
	// The type of action performed on the order.
	// See [V1OrderHistoryEntryAction](#type-v1orderhistoryentryaction) for possible values
	Action *V1OrderHistoryEntryAction `json:"action,omitempty" url:"action,omitempty"`
	// The time when the action was performed, in ISO 8601 format.
	CreatedAt *string `json:"created_at,omitempty" url:"created_at,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *V1OrderHistoryEntry) GetAction() *V1OrderHistoryEntryAction {
	if v == nil {
		return nil
	}
	return v.Action
}

func (v *V1OrderHistoryEntry) GetCreatedAt() *string {
	if v == nil {
		return nil
	}
	return v.CreatedAt
}

func (v *V1OrderHistoryEntry) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *V1OrderHistoryEntry) UnmarshalJSON(data []byte) error {
	type unmarshaler V1OrderHistoryEntry
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = V1OrderHistoryEntry(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *V1OrderHistoryEntry) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type V1OrderHistoryEntryAction string

const (
	V1OrderHistoryEntryActionOrderPlaced     V1OrderHistoryEntryAction = "ORDER_PLACED"
	V1OrderHistoryEntryActionDeclined        V1OrderHistoryEntryAction = "DECLINED"
	V1OrderHistoryEntryActionPaymentReceived V1OrderHistoryEntryAction = "PAYMENT_RECEIVED"
	V1OrderHistoryEntryActionCanceled        V1OrderHistoryEntryAction = "CANCELED"
	V1OrderHistoryEntryActionCompleted       V1OrderHistoryEntryAction = "COMPLETED"
	V1OrderHistoryEntryActionRefunded        V1OrderHistoryEntryAction = "REFUNDED"
	V1OrderHistoryEntryActionExpired         V1OrderHistoryEntryAction = "EXPIRED"
)

func NewV1OrderHistoryEntryActionFromString(s string) (V1OrderHistoryEntryAction, error) {
	switch s {
	case "ORDER_PLACED":
		return V1OrderHistoryEntryActionOrderPlaced, nil
	case "DECLINED":
		return V1OrderHistoryEntryActionDeclined, nil
	case "PAYMENT_RECEIVED":
		return V1OrderHistoryEntryActionPaymentReceived, nil
	case "CANCELED":
		return V1OrderHistoryEntryActionCanceled, nil
	case "COMPLETED":
		return V1OrderHistoryEntryActionCompleted, nil
	case "REFUNDED":
		return V1OrderHistoryEntryActionRefunded, nil
	case "EXPIRED":
		return V1OrderHistoryEntryActionExpired, nil
	}
	var t V1OrderHistoryEntryAction
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (v V1OrderHistoryEntryAction) Ptr() *V1OrderHistoryEntryAction {
	return &v
}

type V1OrderState string

const (
	V1OrderStatePending   V1OrderState = "PENDING"
	V1OrderStateOpen      V1OrderState = "OPEN"
	V1OrderStateCompleted V1OrderState = "COMPLETED"
	V1OrderStateCanceled  V1OrderState = "CANCELED"
	V1OrderStateRefunded  V1OrderState = "REFUNDED"
	V1OrderStateRejected  V1OrderState = "REJECTED"
)

func NewV1OrderStateFromString(s string) (V1OrderState, error) {
	switch s {
	case "PENDING":
		return V1OrderStatePending, nil
	case "OPEN":
		return V1OrderStateOpen, nil
	case "COMPLETED":
		return V1OrderStateCompleted, nil
	case "CANCELED":
		return V1OrderStateCanceled, nil
	case "REFUNDED":
		return V1OrderStateRefunded, nil
	case "REJECTED":
		return V1OrderStateRejected, nil
	}
	var t V1OrderState
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (v V1OrderState) Ptr() *V1OrderState {
	return &v
}

// A tender represents a discrete monetary exchange. Square represents this
// exchange as a money object with a specific currency and amount, where the
// amount is given in the smallest denomination of the given currency.
//
// Square POS can accept more than one form of tender for a single payment (such
// as by splitting a bill between a credit card and a gift card). The `tender`
// field of the Payment object lists all forms of tender used for the payment.
//
// Split tender payments behave slightly differently from single tender payments:
//
// The receipt_url for a split tender corresponds only to the first tender listed
// in the tender field. To get the receipt URLs for the remaining tenders, use
// the receipt_url fields of the corresponding Tender objects.
//
// *A note on gift cards**: when a customer purchases a Square gift card from a
// merchant, the merchant receives the full amount of the gift card in the
// associated payment.
//
// When that gift card is used as a tender, the balance of the gift card is
// reduced and the merchant receives no funds. A `Tender` object with a type of
// `SQUARE_GIFT_CARD` indicates a gift card was used for some or all of the
// associated payment.
type V1Tender struct {
	// The tender's unique ID.
	ID *string `json:"id,omitempty" url:"id,omitempty"`
	// The type of tender.
	// See [V1TenderType](#type-v1tendertype) for possible values
	Type *V1TenderType `json:"type,omitempty" url:"type,omitempty"`
	// A human-readable description of the tender.
	Name *string `json:"name,omitempty" url:"name,omitempty"`
	// The ID of the employee that processed the tender.
	EmployeeID *string `json:"employee_id,omitempty" url:"employee_id,omitempty"`
	// The URL of the receipt for the tender.
	ReceiptURL *string `json:"receipt_url,omitempty" url:"receipt_url,omitempty"`
	// The brand of credit card provided.
	// See [V1TenderCardBrand](#type-v1tendercardbrand) for possible values
	CardBrand *V1TenderCardBrand `json:"card_brand,omitempty" url:"card_brand,omitempty"`
	// The last four digits of the provided credit card's account number.
	PanSuffix *string `json:"pan_suffix,omitempty" url:"pan_suffix,omitempty"`
	// The tender's unique ID.
	// See [V1TenderEntryMethod](#type-v1tenderentrymethod) for possible values
	EntryMethod *V1TenderEntryMethod `json:"entry_method,omitempty" url:"entry_method,omitempty"`
	// Notes entered by the merchant about the tender at the time of payment, if any. Typically only present for tender with the type: OTHER.
	PaymentNote *string `json:"payment_note,omitempty" url:"payment_note,omitempty"`
	// The total amount of money provided in this form of tender.
	TotalMoney *V1Money `json:"total_money,omitempty" url:"total_money,omitempty"`
	// The amount of total_money applied to the payment.
	TenderedMoney *V1Money `json:"tendered_money,omitempty" url:"tendered_money,omitempty"`
	// The time when the tender was created, in ISO 8601 format.
	TenderedAt *string `json:"tendered_at,omitempty" url:"tendered_at,omitempty"`
	// The time when the tender was settled, in ISO 8601 format.
	SettledAt *string `json:"settled_at,omitempty" url:"settled_at,omitempty"`
	// The amount of total_money returned to the buyer as change.
	ChangeBackMoney *V1Money `json:"change_back_money,omitempty" url:"change_back_money,omitempty"`
	// The total of all refunds applied to this tender. This amount is always negative or zero.
	RefundedMoney *V1Money `json:"refunded_money,omitempty" url:"refunded_money,omitempty"`
	// Indicates whether or not the tender is associated with an exchange. If is_exchange is true, the tender represents the value of goods returned in an exchange not the actual money paid. The exchange value reduces the tender amounts needed to pay for items purchased in the exchange.
	IsExchange *bool `json:"is_exchange,omitempty" url:"is_exchange,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *V1Tender) GetID() *string {
	if v == nil {
		return nil
	}
	return v.ID
}

func (v *V1Tender) GetType() *V1TenderType {
	if v == nil {
		return nil
	}
	return v.Type
}

func (v *V1Tender) GetName() *string {
	if v == nil {
		return nil
	}
	return v.Name
}

func (v *V1Tender) GetEmployeeID() *string {
	if v == nil {
		return nil
	}
	return v.EmployeeID
}

func (v *V1Tender) GetReceiptURL() *string {
	if v == nil {
		return nil
	}
	return v.ReceiptURL
}

func (v *V1Tender) GetCardBrand() *V1TenderCardBrand {
	if v == nil {
		return nil
	}
	return v.CardBrand
}

func (v *V1Tender) GetPanSuffix() *string {
	if v == nil {
		return nil
	}
	return v.PanSuffix
}

func (v *V1Tender) GetEntryMethod() *V1TenderEntryMethod {
	if v == nil {
		return nil
	}
	return v.EntryMethod
}

func (v *V1Tender) GetPaymentNote() *string {
	if v == nil {
		return nil
	}
	return v.PaymentNote
}

func (v *V1Tender) GetTotalMoney() *V1Money {
	if v == nil {
		return nil
	}
	return v.TotalMoney
}

func (v *V1Tender) GetTenderedMoney() *V1Money {
	if v == nil {
		return nil
	}
	return v.TenderedMoney
}

func (v *V1Tender) GetTenderedAt() *string {
	if v == nil {
		return nil
	}
	return v.TenderedAt
}

func (v *V1Tender) GetSettledAt() *string {
	if v == nil {
		return nil
	}
	return v.SettledAt
}

func (v *V1Tender) GetChangeBackMoney() *V1Money {
	if v == nil {
		return nil
	}
	return v.ChangeBackMoney
}

func (v *V1Tender) GetRefundedMoney() *V1Money {
	if v == nil {
		return nil
	}
	return v.RefundedMoney
}

func (v *V1Tender) GetIsExchange() *bool {
	if v == nil {
		return nil
	}
	return v.IsExchange
}

func (v *V1Tender) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *V1Tender) UnmarshalJSON(data []byte) error {
	type unmarshaler V1Tender
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = V1Tender(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *V1Tender) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

// The brand of a credit card.
type V1TenderCardBrand string

const (
	V1TenderCardBrandOtherBrand      V1TenderCardBrand = "OTHER_BRAND"
	V1TenderCardBrandVisa            V1TenderCardBrand = "VISA"
	V1TenderCardBrandMasterCard      V1TenderCardBrand = "MASTER_CARD"
	V1TenderCardBrandAmericanExpress V1TenderCardBrand = "AMERICAN_EXPRESS"
	V1TenderCardBrandDiscover        V1TenderCardBrand = "DISCOVER"
	V1TenderCardBrandDiscoverDiners  V1TenderCardBrand = "DISCOVER_DINERS"
	V1TenderCardBrandJcb             V1TenderCardBrand = "JCB"
	V1TenderCardBrandChinaUnionpay   V1TenderCardBrand = "CHINA_UNIONPAY"
	V1TenderCardBrandSquareGiftCard  V1TenderCardBrand = "SQUARE_GIFT_CARD"
)

func NewV1TenderCardBrandFromString(s string) (V1TenderCardBrand, error) {
	switch s {
	case "OTHER_BRAND":
		return V1TenderCardBrandOtherBrand, nil
	case "VISA":
		return V1TenderCardBrandVisa, nil
	case "MASTER_CARD":
		return V1TenderCardBrandMasterCard, nil
	case "AMERICAN_EXPRESS":
		return V1TenderCardBrandAmericanExpress, nil
	case "DISCOVER":
		return V1TenderCardBrandDiscover, nil
	case "DISCOVER_DINERS":
		return V1TenderCardBrandDiscoverDiners, nil
	case "JCB":
		return V1TenderCardBrandJcb, nil
	case "CHINA_UNIONPAY":
		return V1TenderCardBrandChinaUnionpay, nil
	case "SQUARE_GIFT_CARD":
		return V1TenderCardBrandSquareGiftCard, nil
	}
	var t V1TenderCardBrand
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (v V1TenderCardBrand) Ptr() *V1TenderCardBrand {
	return &v
}

type V1TenderEntryMethod string

const (
	V1TenderEntryMethodManual       V1TenderEntryMethod = "MANUAL"
	V1TenderEntryMethodScanned      V1TenderEntryMethod = "SCANNED"
	V1TenderEntryMethodSquareCash   V1TenderEntryMethod = "SQUARE_CASH"
	V1TenderEntryMethodSquareWallet V1TenderEntryMethod = "SQUARE_WALLET"
	V1TenderEntryMethodSwiped       V1TenderEntryMethod = "SWIPED"
	V1TenderEntryMethodWebForm      V1TenderEntryMethod = "WEB_FORM"
	V1TenderEntryMethodOther        V1TenderEntryMethod = "OTHER"
)

func NewV1TenderEntryMethodFromString(s string) (V1TenderEntryMethod, error) {
	switch s {
	case "MANUAL":
		return V1TenderEntryMethodManual, nil
	case "SCANNED":
		return V1TenderEntryMethodScanned, nil
	case "SQUARE_CASH":
		return V1TenderEntryMethodSquareCash, nil
	case "SQUARE_WALLET":
		return V1TenderEntryMethodSquareWallet, nil
	case "SWIPED":
		return V1TenderEntryMethodSwiped, nil
	case "WEB_FORM":
		return V1TenderEntryMethodWebForm, nil
	case "OTHER":
		return V1TenderEntryMethodOther, nil
	}
	var t V1TenderEntryMethod
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (v V1TenderEntryMethod) Ptr() *V1TenderEntryMethod {
	return &v
}

type V1TenderType string

const (
	V1TenderTypeCreditCard     V1TenderType = "CREDIT_CARD"
	V1TenderTypeCash           V1TenderType = "CASH"
	V1TenderTypeThirdPartyCard V1TenderType = "THIRD_PARTY_CARD"
	V1TenderTypeNoSale         V1TenderType = "NO_SALE"
	V1TenderTypeSquareWallet   V1TenderType = "SQUARE_WALLET"
	V1TenderTypeSquareGiftCard V1TenderType = "SQUARE_GIFT_CARD"
	V1TenderTypeUnknown        V1TenderType = "UNKNOWN"
	V1TenderTypeOther          V1TenderType = "OTHER"
)

func NewV1TenderTypeFromString(s string) (V1TenderType, error) {
	switch s {
	case "CREDIT_CARD":
		return V1TenderTypeCreditCard, nil
	case "CASH":
		return V1TenderTypeCash, nil
	case "THIRD_PARTY_CARD":
		return V1TenderTypeThirdPartyCard, nil
	case "NO_SALE":
		return V1TenderTypeNoSale, nil
	case "SQUARE_WALLET":
		return V1TenderTypeSquareWallet, nil
	case "SQUARE_GIFT_CARD":
		return V1TenderTypeSquareGiftCard, nil
	case "UNKNOWN":
		return V1TenderTypeUnknown, nil
	case "OTHER":
		return V1TenderTypeOther, nil
	}
	var t V1TenderType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (v V1TenderType) Ptr() *V1TenderType {
	return &v
}

type V1UpdateOrderRequestAction string

const (
	V1UpdateOrderRequestActionComplete V1UpdateOrderRequestAction = "COMPLETE"
	V1UpdateOrderRequestActionCancel   V1UpdateOrderRequestAction = "CANCEL"
	V1UpdateOrderRequestActionRefund   V1UpdateOrderRequestAction = "REFUND"
)

func NewV1UpdateOrderRequestActionFromString(s string) (V1UpdateOrderRequestAction, error) {
	switch s {
	case "COMPLETE":
		return V1UpdateOrderRequestActionComplete, nil
	case "CANCEL":
		return V1UpdateOrderRequestActionCancel, nil
	case "REFUND":
		return V1UpdateOrderRequestActionRefund, nil
	}
	var t V1UpdateOrderRequestAction
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (v V1UpdateOrderRequestAction) Ptr() *V1UpdateOrderRequestAction {
	return &v
}
