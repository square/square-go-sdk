// This file was auto-generated by Fern from our API Definition.

package square

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/square/square-go-sdk/internal"
)

type DeleteSnippetsRequest struct {
	// The ID of the site that contains the snippet.
	SiteID string `json:"-" url:"-"`
}

type GetSnippetsRequest struct {
	// The ID of the site that contains the snippet.
	SiteID string `json:"-" url:"-"`
}

// Represents a `DeleteSnippet` response.
type DeleteSnippetResponse struct {
	// Any errors that occurred during the request.
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DeleteSnippetResponse) GetErrors() []*Error {
	if d == nil {
		return nil
	}
	return d.Errors
}

func (d *DeleteSnippetResponse) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DeleteSnippetResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler DeleteSnippetResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DeleteSnippetResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DeleteSnippetResponse) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

// Represents a `RetrieveSnippet` response. The response can include either `snippet` or `errors`.
type GetSnippetResponse struct {
	// Any errors that occurred during the request.
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`
	// The retrieved snippet.
	Snippet *Snippet `json:"snippet,omitempty" url:"snippet,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetSnippetResponse) GetErrors() []*Error {
	if g == nil {
		return nil
	}
	return g.Errors
}

func (g *GetSnippetResponse) GetSnippet() *Snippet {
	if g == nil {
		return nil
	}
	return g.Snippet
}

func (g *GetSnippetResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetSnippetResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetSnippetResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetSnippetResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetSnippetResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

// Represents the snippet that is added to a Square Online site. The snippet code is injected into the `head` element of all pages on the site, except for checkout pages.
type Snippet struct {
	// The Square-assigned ID for the snippet.
	ID *string `json:"id,omitempty" url:"id,omitempty"`
	// The ID of the site that contains the snippet.
	SiteID *string `json:"site_id,omitempty" url:"site_id,omitempty"`
	// The snippet code, which can contain valid HTML, JavaScript, or both.
	Content string `json:"content" url:"content"`
	// The timestamp of when the snippet was initially added to the site, in RFC 3339 format.
	CreatedAt *string `json:"created_at,omitempty" url:"created_at,omitempty"`
	// The timestamp of when the snippet was last updated on the site, in RFC 3339 format.
	UpdatedAt *string `json:"updated_at,omitempty" url:"updated_at,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *Snippet) GetID() *string {
	if s == nil {
		return nil
	}
	return s.ID
}

func (s *Snippet) GetSiteID() *string {
	if s == nil {
		return nil
	}
	return s.SiteID
}

func (s *Snippet) GetContent() string {
	if s == nil {
		return ""
	}
	return s.Content
}

func (s *Snippet) GetCreatedAt() *string {
	if s == nil {
		return nil
	}
	return s.CreatedAt
}

func (s *Snippet) GetUpdatedAt() *string {
	if s == nil {
		return nil
	}
	return s.UpdatedAt
}

func (s *Snippet) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *Snippet) UnmarshalJSON(data []byte) error {
	type unmarshaler Snippet
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = Snippet(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *Snippet) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// Represents an `UpsertSnippet` response. The response can include either `snippet` or `errors`.
type UpsertSnippetResponse struct {
	// Any errors that occurred during the request.
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`
	// The new or updated snippet.
	Snippet *Snippet `json:"snippet,omitempty" url:"snippet,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UpsertSnippetResponse) GetErrors() []*Error {
	if u == nil {
		return nil
	}
	return u.Errors
}

func (u *UpsertSnippetResponse) GetSnippet() *Snippet {
	if u == nil {
		return nil
	}
	return u.Snippet
}

func (u *UpsertSnippetResponse) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpsertSnippetResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler UpsertSnippetResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpsertSnippetResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpsertSnippetResponse) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpsertSnippetRequest struct {
	// The ID of the site where you want to add or update the snippet.
	SiteID string `json:"-" url:"-"`
	// The snippet for the site.
	Snippet *Snippet `json:"snippet,omitempty" url:"-"`
}
