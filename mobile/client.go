// Code generated by Fern. DO NOT EDIT.

package mobile

import (
	context "context"
	v2 "github.com/square/square-go-sdk/v2"
	core "github.com/square/square-go-sdk/v2/core"
	internal "github.com/square/square-go-sdk/v2/internal"
	option "github.com/square/square-go-sdk/v2/option"
	http "net/http"
	os "os"
)

type Client struct {
	WithRawResponse *RawClient

	baseURL string
	caller  *internal.Caller
	header  http.Header
}

func NewClient(opts ...option.RequestOption) *Client {
	options := core.NewRequestOptions(opts...)
	if options.Token == "" {
		options.Token = os.Getenv("SQUARE_TOKEN")
	}
	if options.Version == "" {
		options.Version = os.Getenv("VERSION")
	}
	return &Client{
		WithRawResponse: NewRawClient(options),
		baseURL:         options.BaseURL,
		caller: internal.NewCaller(
			&internal.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
		header: options.ToHeader(),
	}
}

// __Note:__ This endpoint is used by the deprecated Reader SDK.
// Developers should update their integration to use the [Mobile Payments SDK](https://developer.squareup.com/docs/mobile-payments-sdk), which includes its own authorization methods.
//
// Generates code to authorize a mobile application to connect to a Square card reader.
//
// Authorization codes are one-time-use codes and expire 60 minutes after being issued.
//
// The `Authorization` header you provide to this endpoint must have the following format:
//
// ```
// Authorization: Bearer ACCESS_TOKEN
// ```
//
// Replace `ACCESS_TOKEN` with a
// [valid production authorization credential](https://developer.squareup.com/docs/build-basics/access-tokens).
func (c *Client) AuthorizationCode(
	ctx context.Context,
	request *v2.CreateMobileAuthorizationCodeRequest,
	opts ...option.RequestOption,
) (*v2.CreateMobileAuthorizationCodeResponse, error) {
	response, err := c.WithRawResponse.AuthorizationCode(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}
