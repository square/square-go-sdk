// Code generated by Fern. DO NOT EDIT.

package square

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/square/square-go-sdk/v2/internal"
)

type BulkRetrieveChannelsRequest struct {
	ChannelIDs []string `json:"channel_ids,omitempty" url:"-"`
}

type GetChannelsRequest struct {
	// A channel id
	ChannelID string `json:"-" url:"-"`
}

type ListChannelsRequest struct {
	// Type of reference associated to channel
	ReferenceType *ReferenceType `json:"-" url:"reference_type,omitempty"`
	// id of reference associated to channel
	ReferenceID *string `json:"-" url:"reference_id,omitempty"`
	// Status of channel
	Status *ChannelStatus `json:"-" url:"status,omitempty"`
	// Cursor to fetch the next result
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// Maximum number of results to return.
	// When not provided the returned results will be cap at 100 channels.
	Limit *int `json:"-" url:"limit,omitempty"`
}

// Defines the fields that are included in the request body for the
// [BulkRetrieveChannels](api-endpoint:Channels-BulkRetrieveChannels) endpoint.
type BulkRetrieveChannelsResponse struct {
	// Information about errors encountered during the request.
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`
	// A map of channel IDs to channel responses which tell whether
	// retrieval for a specific channel is success or not.
	// Channel response of a success retrieval would contain channel info
	// whereas channel response of a failed retrieval would have error info.
	Responses map[string]*RetrieveChannelResponse `json:"responses,omitempty" url:"responses,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BulkRetrieveChannelsResponse) GetErrors() []*Error {
	if b == nil {
		return nil
	}
	return b.Errors
}

func (b *BulkRetrieveChannelsResponse) GetResponses() map[string]*RetrieveChannelResponse {
	if b == nil {
		return nil
	}
	return b.Responses
}

func (b *BulkRetrieveChannelsResponse) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BulkRetrieveChannelsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler BulkRetrieveChannelsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BulkRetrieveChannelsResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BulkRetrieveChannelsResponse) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type Channel struct {
	// The channel's unique ID.
	ID *string `json:"id,omitempty" url:"id,omitempty"`
	// The unique ID of the merchant this channel belongs to.
	MerchantID *string `json:"merchant_id,omitempty" url:"merchant_id,omitempty"`
	// The name of the channel.
	Name *string `json:"name,omitempty" url:"name,omitempty"`
	// The version number which is incremented each time an update is made to the channel.
	Version *int `json:"version,omitempty" url:"version,omitempty"`
	// Represents an entity the channel is associated with.
	Reference *Reference `json:"reference,omitempty" url:"reference,omitempty"`
	// Status of the channel.
	// See [Status](#type-status) for possible values
	Status *ChannelStatus `json:"status,omitempty" url:"status,omitempty"`
	// The timestamp for when the channel was created, in RFC 3339 format (for example, "2016-09-04T23:59:33.123Z").
	// For more information, see [Working with Dates](https://developer.squareup.com/docs/build-basics/working-with-dates).
	CreatedAt *string `json:"created_at,omitempty" url:"created_at,omitempty"`
	// The timestamp for when the channel was last updated, in RFC 3339 format (for example, "2016-09-04T23:59:33.123Z").
	// For more information, see [Working with Dates](https://developer.squareup.com/docs/build-basics/working-with-dates).
	UpdatedAt *string `json:"updated_at,omitempty" url:"updated_at,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *Channel) GetID() *string {
	if c == nil {
		return nil
	}
	return c.ID
}

func (c *Channel) GetMerchantID() *string {
	if c == nil {
		return nil
	}
	return c.MerchantID
}

func (c *Channel) GetName() *string {
	if c == nil {
		return nil
	}
	return c.Name
}

func (c *Channel) GetVersion() *int {
	if c == nil {
		return nil
	}
	return c.Version
}

func (c *Channel) GetReference() *Reference {
	if c == nil {
		return nil
	}
	return c.Reference
}

func (c *Channel) GetStatus() *ChannelStatus {
	if c == nil {
		return nil
	}
	return c.Status
}

func (c *Channel) GetCreatedAt() *string {
	if c == nil {
		return nil
	}
	return c.CreatedAt
}

func (c *Channel) GetUpdatedAt() *string {
	if c == nil {
		return nil
	}
	return c.UpdatedAt
}

func (c *Channel) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *Channel) UnmarshalJSON(data []byte) error {
	type unmarshaler Channel
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = Channel(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *Channel) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ChannelStatus string

const (
	ChannelStatusActive   ChannelStatus = "ACTIVE"
	ChannelStatusInactive ChannelStatus = "INACTIVE"
)

func NewChannelStatusFromString(s string) (ChannelStatus, error) {
	switch s {
	case "ACTIVE":
		return ChannelStatusActive, nil
	case "INACTIVE":
		return ChannelStatusInactive, nil
	}
	var t ChannelStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ChannelStatus) Ptr() *ChannelStatus {
	return &c
}

type ListChannelsResponse struct {
	// Information about errors encountered during the request.
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`
	// List of requested Channel.
	Channels []*Channel `json:"channels,omitempty" url:"channels,omitempty"`
	// The token required to retrieve the next page of results.
	Cursor *string `json:"cursor,omitempty" url:"cursor,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListChannelsResponse) GetErrors() []*Error {
	if l == nil {
		return nil
	}
	return l.Errors
}

func (l *ListChannelsResponse) GetChannels() []*Channel {
	if l == nil {
		return nil
	}
	return l.Channels
}

func (l *ListChannelsResponse) GetCursor() *string {
	if l == nil {
		return nil
	}
	return l.Cursor
}

func (l *ListChannelsResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListChannelsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListChannelsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListChannelsResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListChannelsResponse) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type Reference struct {
	// The type of entity a channel is associated with.
	// See [Type](#type-type) for possible values
	Type *ReferenceType `json:"type,omitempty" url:"type,omitempty"`
	// The id of the entity a channel is associated with.
	ID *string `json:"id,omitempty" url:"id,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *Reference) GetType() *ReferenceType {
	if r == nil {
		return nil
	}
	return r.Type
}

func (r *Reference) GetID() *string {
	if r == nil {
		return nil
	}
	return r.ID
}

func (r *Reference) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *Reference) UnmarshalJSON(data []byte) error {
	type unmarshaler Reference
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = Reference(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *Reference) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

// The type of platform concept a channel can represent.
type ReferenceType string

const (
	ReferenceTypeUnknownType           ReferenceType = "UNKNOWN_TYPE"
	ReferenceTypeLocation              ReferenceType = "LOCATION"
	ReferenceTypeFirstPartyIntegration ReferenceType = "FIRST_PARTY_INTEGRATION"
	ReferenceTypeOauthApplication      ReferenceType = "OAUTH_APPLICATION"
	ReferenceTypeOnlineSite            ReferenceType = "ONLINE_SITE"
	ReferenceTypeOnlineCheckout        ReferenceType = "ONLINE_CHECKOUT"
	ReferenceTypeInvoice               ReferenceType = "INVOICE"
	ReferenceTypeGiftCard              ReferenceType = "GIFT_CARD"
	ReferenceTypeGiftCardMarketplace   ReferenceType = "GIFT_CARD_MARKETPLACE"
	ReferenceTypeRecurringSubscription ReferenceType = "RECURRING_SUBSCRIPTION"
	ReferenceTypeOnlineBookingFlow     ReferenceType = "ONLINE_BOOKING_FLOW"
	ReferenceTypeSquareAssistant       ReferenceType = "SQUARE_ASSISTANT"
	ReferenceTypeCashLocal             ReferenceType = "CASH_LOCAL"
	ReferenceTypePointOfSale           ReferenceType = "POINT_OF_SALE"
	ReferenceTypeKiosk                 ReferenceType = "KIOSK"
)

func NewReferenceTypeFromString(s string) (ReferenceType, error) {
	switch s {
	case "UNKNOWN_TYPE":
		return ReferenceTypeUnknownType, nil
	case "LOCATION":
		return ReferenceTypeLocation, nil
	case "FIRST_PARTY_INTEGRATION":
		return ReferenceTypeFirstPartyIntegration, nil
	case "OAUTH_APPLICATION":
		return ReferenceTypeOauthApplication, nil
	case "ONLINE_SITE":
		return ReferenceTypeOnlineSite, nil
	case "ONLINE_CHECKOUT":
		return ReferenceTypeOnlineCheckout, nil
	case "INVOICE":
		return ReferenceTypeInvoice, nil
	case "GIFT_CARD":
		return ReferenceTypeGiftCard, nil
	case "GIFT_CARD_MARKETPLACE":
		return ReferenceTypeGiftCardMarketplace, nil
	case "RECURRING_SUBSCRIPTION":
		return ReferenceTypeRecurringSubscription, nil
	case "ONLINE_BOOKING_FLOW":
		return ReferenceTypeOnlineBookingFlow, nil
	case "SQUARE_ASSISTANT":
		return ReferenceTypeSquareAssistant, nil
	case "CASH_LOCAL":
		return ReferenceTypeCashLocal, nil
	case "POINT_OF_SALE":
		return ReferenceTypePointOfSale, nil
	case "KIOSK":
		return ReferenceTypeKiosk, nil
	}
	var t ReferenceType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (r ReferenceType) Ptr() *ReferenceType {
	return &r
}

type RetrieveChannelResponse struct {
	// Information about errors encountered during the request.
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`
	// The requested Channel.
	Channel *Channel `json:"channel,omitempty" url:"channel,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *RetrieveChannelResponse) GetErrors() []*Error {
	if r == nil {
		return nil
	}
	return r.Errors
}

func (r *RetrieveChannelResponse) GetChannel() *Channel {
	if r == nil {
		return nil
	}
	return r.Channel
}

func (r *RetrieveChannelResponse) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RetrieveChannelResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler RetrieveChannelResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RetrieveChannelResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *RetrieveChannelResponse) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}
