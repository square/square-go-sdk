// This file was auto-generated by Fern from our API Definition.

package catalog

import (
	squaregosdk "github.com/square/square-go-sdk"
)

type ObjectDeleteRequest struct {
	// The ID of the catalog object to be deleted. When an object is deleted, other
	// objects in the graph that depend on that object will be deleted as well (for example, deleting a
	// catalog item will delete its catalog item variations).
	ObjectID string `json:"-" url:"-"`
}

type ObjectGetRequest struct {
	// The object ID of any type of catalog objects to be retrieved.
	ObjectID string `json:"-" url:"-"`
	// If `true`, the response will include additional objects that are related to the
	// requested objects. Related objects are defined as any objects referenced by ID by the results in the `objects` field
	// of the response. These objects are put in the `related_objects` field. Setting this to `true` is
	// helpful when the objects are needed for immediate display to a user.
	// This process only goes one level deep. Objects referenced by the related objects will not be included. For example,
	//
	// if the `objects` field of the response contains a CatalogItem, its associated
	// CatalogCategory objects, CatalogTax objects, CatalogImage objects and
	// CatalogModifierLists will be returned in the `related_objects` field of the
	// response. If the `objects` field of the response contains a CatalogItemVariation,
	// its parent CatalogItem will be returned in the `related_objects` field of
	// the response.
	//
	// Default value: `false`
	IncludeRelatedObjects *bool `json:"-" url:"include_related_objects,omitempty"`
	// Requests objects as of a specific version of the catalog. This allows you to retrieve historical
	// versions of objects. The value to retrieve a specific version of an object can be found
	// in the version field of [CatalogObject]($m/CatalogObject)s. If not included, results will
	// be from the current version of the catalog.
	CatalogVersion *int64 `json:"-" url:"catalog_version,omitempty"`
	// Specifies whether or not to include the `path_to_root` list for each returned category instance. The `path_to_root` list consists
	// of `CategoryPathToRootNode` objects and specifies the path that starts with the immediate parent category of the returned category
	// and ends with its root category. If the returned category is a top-level category, the `path_to_root` list is empty and is not returned
	// in the response payload.
	IncludeCategoryPathToRoot *bool `json:"-" url:"include_category_path_to_root,omitempty"`
}

type UpsertCatalogObjectRequest struct {
	// A value you specify that uniquely identifies this
	// request among all your requests. A common way to create
	// a valid idempotency key is to use a Universally unique
	// identifier (UUID).
	//
	// If you're unsure whether a particular request was successful,
	// you can reattempt it with the same idempotency key without
	// worrying about creating duplicate objects.
	//
	// See [Idempotency](https://developer.squareup.com/docs/build-basics/common-api-patterns/idempotency) for more information.
	IdempotencyKey string `json:"idempotency_key" url:"-"`
	// A CatalogObject to be created or updated.
	//
	// - For updates, the object must be active (the `is_deleted` field is not `true`).
	// - For creates, the object ID must start with `#`. The provided ID is replaced with a server-generated ID.
	Object *squaregosdk.CatalogObject `json:"object,omitempty" url:"-"`
}
