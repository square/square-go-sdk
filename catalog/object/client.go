// Code generated by Fern. DO NOT EDIT.

package object

import (
	context "context"
	v2 "github.com/square/square-go-sdk/v2"
	catalog "github.com/square/square-go-sdk/v2/catalog"
	core "github.com/square/square-go-sdk/v2/core"
	internal "github.com/square/square-go-sdk/v2/internal"
	option "github.com/square/square-go-sdk/v2/option"
	http "net/http"
	os "os"
)

type Client struct {
	WithRawResponse *RawClient

	baseURL string
	caller  *internal.Caller
	header  http.Header
}

func NewClient(opts ...option.RequestOption) *Client {
	options := core.NewRequestOptions(opts...)
	if options.Token == "" {
		options.Token = os.Getenv("SQUARE_TOKEN")
	}
	if options.Version == "" {
		options.Version = os.Getenv("VERSION")
	}
	return &Client{
		WithRawResponse: NewRawClient(options),
		baseURL:         options.BaseURL,
		caller: internal.NewCaller(
			&internal.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
		header: options.ToHeader(),
	}
}

// Creates a new or updates the specified [CatalogObject](entity:CatalogObject).
//
// To ensure consistency, only one update request is processed at a time per seller account.
// While one (batch or non-batch) update request is being processed, other (batched and non-batched)
// update requests are rejected with the `429` error code.
func (c *Client) Upsert(
	ctx context.Context,
	request *catalog.UpsertCatalogObjectRequest,
	opts ...option.RequestOption,
) (*v2.UpsertCatalogObjectResponse, error) {
	response, err := c.WithRawResponse.Upsert(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Returns a single [CatalogItem](entity:CatalogItem) as a
// [CatalogObject](entity:CatalogObject) based on the provided ID. The returned
// object includes all of the relevant [CatalogItem](entity:CatalogItem)
// information including: [CatalogItemVariation](entity:CatalogItemVariation)
// children, references to its
// [CatalogModifierList](entity:CatalogModifierList) objects, and the ids of
// any [CatalogTax](entity:CatalogTax) objects that apply to it.
func (c *Client) Get(
	ctx context.Context,
	request *catalog.GetObjectRequest,
	opts ...option.RequestOption,
) (*v2.GetCatalogObjectResponse, error) {
	response, err := c.WithRawResponse.Get(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Deletes a single [CatalogObject](entity:CatalogObject) based on the
// provided ID and returns the set of successfully deleted IDs in the response.
// Deletion is a cascading event such that all children of the targeted object
// are also deleted. For example, deleting a [CatalogItem](entity:CatalogItem)
// will also delete all of its
// [CatalogItemVariation](entity:CatalogItemVariation) children.
//
// To ensure consistency, only one delete request is processed at a time per seller account.
// While one (batch or non-batch) delete request is being processed, other (batched and non-batched)
// delete requests are rejected with the `429` error code.
func (c *Client) Delete(
	ctx context.Context,
	request *catalog.DeleteObjectRequest,
	opts ...option.RequestOption,
) (*v2.DeleteCatalogObjectResponse, error) {
	response, err := c.WithRawResponse.Delete(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}
