// This file was auto-generated by Fern from our API Definition.

package images

import (
	bytes "bytes"
	context "context"
	"fmt"
	io "io"
	multipart "mime/multipart"
	http "net/http"
	"net/textproto"
	os "os"

	squaregosdk "github.com/fern-demo/square-go-sdk"
	catalog "github.com/fern-demo/square-go-sdk/catalog"
	core "github.com/fern-demo/square-go-sdk/core"
	option "github.com/fern-demo/square-go-sdk/option"
)

type Client struct {
	baseURL string
	caller  *core.Caller
	header  http.Header
}

func NewClient(opts ...option.RequestOption) *Client {
	options := core.NewRequestOptions(opts...)
	if options.Token == "" {
		options.Token = os.Getenv("SQUARE_TOKEN")
	}
	if options.Version == "" {
		options.Version = os.Getenv("VERSION")
	}
	return &Client{
		baseURL: options.BaseURL,
		caller: core.NewCaller(
			&core.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
		header: options.ToHeader(),
	}
}

// Uploads an image file to be represented by a [CatalogImage]($m/CatalogImage) object that can be linked to an existing
// [CatalogObject]($m/CatalogObject) instance. The resulting `CatalogImage` is unattached to any `CatalogObject` if the `object_id`
// is not specified.
//
// This `CreateCatalogImage` endpoint accepts HTTP multipart/form-data requests with a JSON part and an image file part in
// JPEG, PJPEG, PNG, or GIF format. The maximum file size is 15MB.
func (c *Client) Create(
	ctx context.Context,
	imageFile io.Reader,
	request *catalog.ImagesCreateRequest,
	opts ...option.RequestOption,
) (*squaregosdk.CreateCatalogImageResponse, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://connect.squareupsandbox.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := baseURL + "/v2/catalog/images"

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *squaregosdk.CreateCatalogImageResponse
	requestBuffer := bytes.NewBuffer(nil)
	writer := multipart.NewWriter(requestBuffer)
	if imageFile != nil {
		h := make(textproto.MIMEHeader)
		h.Set("Content-Disposition",
			fmt.Sprintf(`form-data; name="imageFile"; filename="imageFile_filename"`))
		h.Set("Content-Type", "image/jpeg")
		imageFilePart, err := writer.CreatePart(h)
		if err != nil {
			return nil, err
		}
		if _, err := io.Copy(imageFilePart, imageFile); err != nil {
			return nil, err
		}
	}
	if request.Request != nil {
		if err := core.WriteMultipartJSON(writer, "request", request.Request); err != nil {
			return nil, err
		}
	}
	if err := writer.Close(); err != nil {
		return nil, err
	}
	headers.Set("Content-Type", writer.FormDataContentType())

	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPost,
			MaxAttempts:     options.MaxAttempts,
			Headers:         headers,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         requestBuffer,
			Response:        &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Uploads a new image file to replace the existing one in the specified [CatalogImage]($m/CatalogImage) object.
//
// This `UpdateCatalogImage` endpoint accepts HTTP multipart/form-data requests with a JSON part and an image file part in
// JPEG, PJPEG, PNG, or GIF format. The maximum file size is 15MB.
func (c *Client) Update(
	ctx context.Context,
	// The ID of the `CatalogImage` object to update the encapsulated image file.
	imageID string,
	imageFile io.Reader,
	request *catalog.ImagesUpdateRequest,
	opts ...option.RequestOption,
) (*squaregosdk.UpdateCatalogImageResponse, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://connect.squareupsandbox.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := core.EncodeURL(baseURL+"/v2/catalog/images/%v", imageID)

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *squaregosdk.UpdateCatalogImageResponse
	requestBuffer := bytes.NewBuffer(nil)
	writer := multipart.NewWriter(requestBuffer)
	if imageFile != nil {
		imageFileFilename := "imageFile_filename"
		if named, ok := imageFile.(interface{ Name() string }); ok {
			imageFileFilename = named.Name()
		}
		imageFilePart, err := writer.CreateFormFile("image_file", imageFileFilename)
		if err != nil {
			return nil, err
		}
		if _, err := io.Copy(imageFilePart, imageFile); err != nil {
			return nil, err
		}
	}
	if request.Request != nil {
		if err := core.WriteMultipartJSON(writer, "request", request.Request); err != nil {
			return nil, err
		}
	}
	if err := writer.Close(); err != nil {
		return nil, err
	}
	headers.Set("Content-Type", writer.FormDataContentType())

	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPut,
			MaxAttempts:     options.MaxAttempts,
			Headers:         headers,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         requestBuffer,
			Response:        &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}
