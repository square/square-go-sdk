// This file was auto-generated by Fern from our API Definition.

package square

type SearchCatalogItemsRequest struct {
	// The text filter expression to return items or item variations containing specified text in
	// the `name`, `description`, or `abbreviation` attribute value of an item, or in
	// the `name`, `sku`, or `upc` attribute value of an item variation.
	TextFilter *string `json:"text_filter,omitempty" url:"-"`
	// The category id query expression to return items containing the specified category IDs.
	CategoryIDs []string `json:"category_ids,omitempty" url:"-"`
	// The stock-level query expression to return item variations with the specified stock levels.
	// See [SearchCatalogItemsRequestStockLevel](#type-searchcatalogitemsrequeststocklevel) for possible values
	StockLevels []SearchCatalogItemsRequestStockLevel `json:"stock_levels,omitempty" url:"-"`
	// The enabled-location query expression to return items and item variations having specified enabled locations.
	EnabledLocationIDs []string `json:"enabled_location_ids,omitempty" url:"-"`
	// The pagination token, returned in the previous response, used to fetch the next batch of pending results.
	Cursor *string `json:"cursor,omitempty" url:"-"`
	// The maximum number of results to return per page. The default value is 100.
	Limit *int `json:"limit,omitempty" url:"-"`
	// The order to sort the results by item names. The default sort order is ascending (`ASC`).
	// See [SortOrder](#type-sortorder) for possible values
	SortOrder *SortOrder `json:"sort_order,omitempty" url:"-"`
	// The product types query expression to return items or item variations having the specified product types.
	ProductTypes []CatalogItemProductType `json:"product_types,omitempty" url:"-"`
	// The customer-attribute filter to return items or item variations matching the specified
	// custom attribute expressions. A maximum number of 10 custom attribute expressions are supported in
	// a single call to the [SearchCatalogItems](api-endpoint:Catalog-SearchCatalogItems) endpoint.
	CustomAttributeFilters []*CustomAttributeFilter `json:"custom_attribute_filters,omitempty" url:"-"`
	// The query filter to return not archived (`ARCHIVED_STATE_NOT_ARCHIVED`), archived (`ARCHIVED_STATE_ARCHIVED`), or either type (`ARCHIVED_STATE_ALL`) of items.
	ArchivedState *ArchivedState `json:"archived_state,omitempty" url:"-"`
}

type UpdateItemModifierListsRequest struct {
	// The IDs of the catalog items associated with the CatalogModifierList objects being updated.
	ItemIDs []string `json:"item_ids,omitempty" url:"-"`
	// The IDs of the CatalogModifierList objects to enable for the CatalogItem.
	// At least one of `modifier_lists_to_enable` or `modifier_lists_to_disable` must be specified.
	ModifierListsToEnable []string `json:"modifier_lists_to_enable,omitempty" url:"-"`
	// The IDs of the CatalogModifierList objects to disable for the CatalogItem.
	// At least one of `modifier_lists_to_enable` or `modifier_lists_to_disable` must be specified.
	ModifierListsToDisable []string `json:"modifier_lists_to_disable,omitempty" url:"-"`
}

type UpdateItemTaxesRequest struct {
	// IDs for the CatalogItems associated with the CatalogTax objects being updated.
	// No more than 1,000 IDs may be provided.
	ItemIDs []string `json:"item_ids,omitempty" url:"-"`
	// IDs of the CatalogTax objects to enable.
	// At least one of `taxes_to_enable` or `taxes_to_disable` must be specified.
	TaxesToEnable []string `json:"taxes_to_enable,omitempty" url:"-"`
	// IDs of the CatalogTax objects to disable.
	// At least one of `taxes_to_enable` or `taxes_to_disable` must be specified.
	TaxesToDisable []string `json:"taxes_to_disable,omitempty" url:"-"`
}

type BatchDeleteCatalogObjectsRequest struct {
	// The IDs of the CatalogObjects to be deleted. When an object is deleted, other objects
	// in the graph that depend on that object will be deleted as well (for example, deleting a
	// CatalogItem will delete its CatalogItemVariation.
	ObjectIDs []string `json:"object_ids,omitempty" url:"-"`
}

type BatchGetCatalogObjectsRequest struct {
	// The IDs of the CatalogObjects to be retrieved.
	ObjectIDs []string `json:"object_ids,omitempty" url:"-"`
	// If `true`, the response will include additional objects that are related to the
	// requested objects. Related objects are defined as any objects referenced by ID by the results in the `objects` field
	// of the response. These objects are put in the `related_objects` field. Setting this to `true` is
	// helpful when the objects are needed for immediate display to a user.
	// This process only goes one level deep. Objects referenced by the related objects will not be included. For example,
	//
	// if the `objects` field of the response contains a CatalogItem, its associated
	// CatalogCategory objects, CatalogTax objects, CatalogImage objects and
	// CatalogModifierLists will be returned in the `related_objects` field of the
	// response. If the `objects` field of the response contains a CatalogItemVariation,
	// its parent CatalogItem will be returned in the `related_objects` field of
	// the response.
	//
	// Default value: `false`
	IncludeRelatedObjects *bool `json:"include_related_objects,omitempty" url:"-"`
	// The specific version of the catalog objects to be included in the response.
	// This allows you to retrieve historical versions of objects. The specified version value is matched against
	// the [CatalogObject](entity:CatalogObject)s' `version` attribute. If not included, results will
	// be from the current version of the catalog.
	CatalogVersion *int64 `json:"catalog_version,omitempty" url:"-"`
	// Indicates whether to include (`true`) or not (`false`) in the response deleted objects, namely, those with the `is_deleted` attribute set to `true`.
	IncludeDeletedObjects *bool `json:"include_deleted_objects,omitempty" url:"-"`
	// Specifies whether or not to include the `path_to_root` list for each returned category instance. The `path_to_root` list consists
	// of `CategoryPathToRootNode` objects and specifies the path that starts with the immediate parent category of the returned category
	// and ends with its root category. If the returned category is a top-level category, the `path_to_root` list is empty and is not returned
	// in the response payload.
	IncludeCategoryPathToRoot *bool `json:"include_category_path_to_root,omitempty" url:"-"`
}

type BatchUpsertCatalogObjectsRequest struct {
	// A value you specify that uniquely identifies this
	// request among all your requests. A common way to create
	// a valid idempotency key is to use a Universally unique
	// identifier (UUID).
	//
	// If you're unsure whether a particular request was successful,
	// you can reattempt it with the same idempotency key without
	// worrying about creating duplicate objects.
	//
	// See [Idempotency](https://developer.squareup.com/docs/build-basics/common-api-patterns/idempotency) for more information.
	IdempotencyKey string `json:"idempotency_key" url:"-"`
	// A batch of CatalogObjects to be inserted/updated atomically.
	// The objects within a batch will be inserted in an all-or-nothing fashion, i.e., if an error occurs
	// attempting to insert or update an object within a batch, the entire batch will be rejected. However, an error
	// in one batch will not affect other batches within the same request.
	//
	// For each object, its `updated_at` field is ignored and replaced with a current [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates), and its
	// `is_deleted` field must not be set to `true`.
	//
	// To modify an existing object, supply its ID. To create a new object, use an ID starting
	// with `#`. These IDs may be used to create relationships between an object and attributes of
	// other objects that reference it. For example, you can create a CatalogItem with
	// ID `#ABC` and a CatalogItemVariation with its `item_id` attribute set to
	// `#ABC` in order to associate the CatalogItemVariation with its parent
	// CatalogItem.
	//
	// Any `#`-prefixed IDs are valid only within a single atomic batch, and will be replaced by server-generated IDs.
	//
	// Each batch may contain up to 1,000 objects. The total number of objects across all batches for a single request
	// may not exceed 10,000. If either of these limits is violated, an error will be returned and no objects will
	// be inserted or updated.
	Batches []*CatalogObjectBatch `json:"batches,omitempty" url:"-"`
}

type CatalogListRequest struct {
	// The pagination cursor returned in the previous response. Leave unset for an initial request.
	// The page size is currently set to be 100.
	// See [Pagination](https://developer.squareup.com/docs/build-basics/common-api-patterns/pagination) for more information.
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// An optional case-insensitive, comma-separated list of object types to retrieve.
	//
	// The valid values are defined in the [CatalogObjectType](entity:CatalogObjectType) enum, for example,
	// `ITEM`, `ITEM_VARIATION`, `CATEGORY`, `DISCOUNT`, `TAX`,
	// `MODIFIER`, `MODIFIER_LIST`, `IMAGE`, etc.
	//
	// If this is unspecified, the operation returns objects of all the top level types at the version
	// of the Square API used to make the request. Object types that are nested onto other object types
	// are not included in the defaults.
	//
	// At the current API version the default object types are:
	// ITEM, CATEGORY, TAX, DISCOUNT, MODIFIER_LIST,
	// PRICING_RULE, PRODUCT_SET, TIME_PERIOD, MEASUREMENT_UNIT,
	// SUBSCRIPTION_PLAN, ITEM_OPTION, CUSTOM_ATTRIBUTE_DEFINITION, QUICK_AMOUNT_SETTINGS.
	Types *string `json:"-" url:"types,omitempty"`
	// The specific version of the catalog objects to be included in the response.
	// This allows you to retrieve historical versions of objects. The specified version value is matched against
	// the [CatalogObject](entity:CatalogObject)s' `version` attribute. If not included, results will be from the
	// current version of the catalog.
	CatalogVersion *int64 `json:"-" url:"catalog_version,omitempty"`
}

type SearchCatalogObjectsRequest struct {
	// The pagination cursor returned in the previous response. Leave unset for an initial request.
	// See [Pagination](https://developer.squareup.com/docs/build-basics/common-api-patterns/pagination) for more information.
	Cursor *string `json:"cursor,omitempty" url:"-"`
	// The desired set of object types to appear in the search results.
	//
	// If this is unspecified, the operation returns objects of all the top level types at the version
	// of the Square API used to make the request. Object types that are nested onto other object types
	// are not included in the defaults.
	//
	// At the current API version the default object types are:
	// ITEM, CATEGORY, TAX, DISCOUNT, MODIFIER_LIST,
	// PRICING_RULE, PRODUCT_SET, TIME_PERIOD, MEASUREMENT_UNIT,
	// SUBSCRIPTION_PLAN, ITEM_OPTION, CUSTOM_ATTRIBUTE_DEFINITION, QUICK_AMOUNT_SETTINGS.
	//
	// Note that if you wish for the query to return objects belonging to nested types (i.e., COMPONENT, IMAGE,
	// ITEM_OPTION_VAL, ITEM_VARIATION, or MODIFIER), you must explicitly include all the types of interest
	// in this field.
	ObjectTypes []CatalogObjectType `json:"object_types,omitempty" url:"-"`
	// If `true`, deleted objects will be included in the results. Deleted objects will have their
	// `is_deleted` field set to `true`.
	IncludeDeletedObjects *bool `json:"include_deleted_objects,omitempty" url:"-"`
	// If `true`, the response will include additional objects that are related to the
	// requested objects. Related objects are objects that are referenced by object ID by the objects
	// in the response. This is helpful if the objects are being fetched for immediate display to a user.
	// This process only goes one level deep. Objects referenced by the related objects will not be included.
	// For example:
	//
	// If the `objects` field of the response contains a CatalogItem, its associated
	// CatalogCategory objects, CatalogTax objects, CatalogImage objects and
	// CatalogModifierLists will be returned in the `related_objects` field of the
	// response. If the `objects` field of the response contains a CatalogItemVariation,
	// its parent CatalogItem will be returned in the `related_objects` field of
	// the response.
	//
	// Default value: `false`
	IncludeRelatedObjects *bool `json:"include_related_objects,omitempty" url:"-"`
	// Return objects modified after this [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates), in RFC 3339
	// format, e.g., `2016-09-04T23:59:33.123Z`. The timestamp is exclusive - objects with a
	// timestamp equal to `begin_time` will not be included in the response.
	BeginTime *string `json:"begin_time,omitempty" url:"-"`
	// A query to be used to filter or sort the results. If no query is specified, the entire catalog will be returned.
	Query *CatalogQuery `json:"query,omitempty" url:"-"`
	// A limit on the number of results to be returned in a single page. The limit is advisory -
	// the implementation may return more or fewer results. If the supplied limit is negative, zero, or
	// is higher than the maximum limit of 1,000, it will be ignored.
	Limit *int `json:"limit,omitempty" url:"-"`
	// Specifies whether or not to include the `path_to_root` list for each returned category instance. The `path_to_root` list consists
	// of `CategoryPathToRootNode` objects and specifies the path that starts with the immediate parent category of the returned category
	// and ends with its root category. If the returned category is a top-level category, the `path_to_root` list is empty and is not returned
	// in the response payload.
	IncludeCategoryPathToRoot *bool `json:"include_category_path_to_root,omitempty" url:"-"`
}
