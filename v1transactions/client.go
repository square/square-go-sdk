// Code generated by Fern. DO NOT EDIT.

package v1transactions

import (
	context "context"
	v2 "github.com/square/square-go-sdk/v2"
	core "github.com/square/square-go-sdk/v2/core"
	internal "github.com/square/square-go-sdk/v2/internal"
	option "github.com/square/square-go-sdk/v2/option"
	http "net/http"
	os "os"
)

type Client struct {
	WithRawResponse *RawClient

	baseURL string
	caller  *internal.Caller
	header  http.Header
}

func NewClient(opts ...option.RequestOption) *Client {
	options := core.NewRequestOptions(opts...)
	if options.Token == "" {
		options.Token = os.Getenv("SQUARE_TOKEN")
	}
	if options.Version == "" {
		options.Version = os.Getenv("VERSION")
	}
	return &Client{
		WithRawResponse: NewRawClient(options),
		baseURL:         options.BaseURL,
		caller: internal.NewCaller(
			&internal.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
		header: options.ToHeader(),
	}
}

// Provides summary information for a merchant's online store orders.
func (c *Client) V1ListOrders(
	ctx context.Context,
	request *v2.V1ListOrdersRequest,
	opts ...option.RequestOption,
) ([]*v2.V1Order, error) {
	response, err := c.WithRawResponse.V1ListOrders(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Provides comprehensive information for a single online store order, including the order's history.
func (c *Client) V1RetrieveOrder(
	ctx context.Context,
	request *v2.V1RetrieveOrderRequest,
	opts ...option.RequestOption,
) (*v2.V1Order, error) {
	response, err := c.WithRawResponse.V1RetrieveOrder(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Updates the details of an online store order. Every update you perform on an order corresponds to one of three actions:
func (c *Client) V1UpdateOrder(
	ctx context.Context,
	request *v2.V1UpdateOrderRequest,
	opts ...option.RequestOption,
) (*v2.V1Order, error) {
	response, err := c.WithRawResponse.V1UpdateOrder(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}
