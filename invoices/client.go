// Code generated by Fern. DO NOT EDIT.

package invoices

import (
	context "context"
	v2 "github.com/square/square-go-sdk/v2"
	core "github.com/square/square-go-sdk/v2/core"
	internal "github.com/square/square-go-sdk/v2/internal"
	option "github.com/square/square-go-sdk/v2/option"
	http "net/http"
	os "os"
)

type Client struct {
	WithRawResponse *RawClient

	baseURL string
	caller  *internal.Caller
	header  http.Header
}

func NewClient(opts ...option.RequestOption) *Client {
	options := core.NewRequestOptions(opts...)
	if options.Token == "" {
		options.Token = os.Getenv("SQUARE_TOKEN")
	}
	if options.Version == "" {
		options.Version = os.Getenv("VERSION")
	}
	return &Client{
		WithRawResponse: NewRawClient(options),
		baseURL:         options.BaseURL,
		caller: internal.NewCaller(
			&internal.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
		header: options.ToHeader(),
	}
}

// Returns a list of invoices for a given location. The response
// is paginated. If truncated, the response includes a `cursor` that you
// use in a subsequent request to retrieve the next set of invoices.
func (c *Client) List(
	ctx context.Context,
	request *v2.ListInvoicesRequest,
	opts ...option.RequestOption,
) (*core.Page[*v2.Invoice], error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://connect.squareup.com",
	)
	endpointURL := baseURL + "/v2/invoices"
	queryParams, err := internal.QueryValues(request)
	if err != nil {
		return nil, err
	}
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)
	prepareCall := func(pageRequest *internal.PageRequest[*string]) *internal.CallParams {
		if pageRequest.Cursor != nil {
			queryParams.Set("cursor", *pageRequest.Cursor)
		}
		nextURL := endpointURL
		if len(queryParams) > 0 {
			nextURL += "?" + queryParams.Encode()
		}
		return &internal.CallParams{
			URL:             nextURL,
			Method:          http.MethodGet,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        pageRequest.Response,
		}
	}
	readPageResponse := func(response *v2.ListInvoicesResponse) *internal.PageResponse[*string, *v2.Invoice] {
		var zeroValue *string
		next := response.GetCursor()
		results := response.GetInvoices()
		return &internal.PageResponse[*string, *v2.Invoice]{
			Next:    next,
			Results: results,
			Done:    next == zeroValue,
		}
	}
	pager := internal.NewCursorPager(
		c.caller,
		prepareCall,
		readPageResponse,
	)
	return pager.GetPage(ctx, request.Cursor)
}

// Creates a draft [invoice](entity:Invoice)
// for an order created using the Orders API.
//
// A draft invoice remains in your account and no action is taken.
// You must publish the invoice before Square can process it (send it to the customer's email address or charge the customerâ€™s card on file).
func (c *Client) Create(
	ctx context.Context,
	request *v2.CreateInvoiceRequest,
	opts ...option.RequestOption,
) (*v2.CreateInvoiceResponse, error) {
	response, err := c.WithRawResponse.Create(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Searches for invoices from a location specified in
// the filter. You can optionally specify customers in the filter for whom to
// retrieve invoices. In the current implementation, you can only specify one location and
// optionally one customer.
//
// The response is paginated. If truncated, the response includes a `cursor`
// that you use in a subsequent request to retrieve the next set of invoices.
func (c *Client) Search(
	ctx context.Context,
	request *v2.SearchInvoicesRequest,
	opts ...option.RequestOption,
) (*v2.SearchInvoicesResponse, error) {
	response, err := c.WithRawResponse.Search(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Retrieves an invoice by invoice ID.
func (c *Client) Get(
	ctx context.Context,
	request *v2.GetInvoicesRequest,
	opts ...option.RequestOption,
) (*v2.GetInvoiceResponse, error) {
	response, err := c.WithRawResponse.Get(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Updates an invoice. This endpoint supports sparse updates, so you only need
// to specify the fields you want to change along with the required `version` field.
// Some restrictions apply to updating invoices. For example, you cannot change the
// `order_id` or `location_id` field.
func (c *Client) Update(
	ctx context.Context,
	request *v2.UpdateInvoiceRequest,
	opts ...option.RequestOption,
) (*v2.UpdateInvoiceResponse, error) {
	response, err := c.WithRawResponse.Update(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Deletes the specified invoice. When an invoice is deleted, the
// associated order status changes to CANCELED. You can only delete a draft
// invoice (you cannot delete a published invoice, including one that is scheduled for processing).
func (c *Client) Delete(
	ctx context.Context,
	request *v2.DeleteInvoicesRequest,
	opts ...option.RequestOption,
) (*v2.DeleteInvoiceResponse, error) {
	response, err := c.WithRawResponse.Delete(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Uploads a file and attaches it to an invoice. This endpoint accepts HTTP multipart/form-data file uploads
// with a JSON `request` part and a `file` part. The `file` part must be a `readable stream` that contains a file
// in a supported format: GIF, JPEG, PNG, TIFF, BMP, or PDF.
//
// Invoices can have up to 10 attachments with a total file size of 25 MB. Attachments can be added only to invoices
// in the `DRAFT`, `SCHEDULED`, `UNPAID`, or `PARTIALLY_PAID` state.
//
// __NOTE:__ When testing in the Sandbox environment, the total file size is limited to 1 KB.
func (c *Client) CreateInvoiceAttachment(
	ctx context.Context,
	request *v2.CreateInvoiceAttachmentRequest,
	opts ...option.RequestOption,
) (*v2.CreateInvoiceAttachmentResponse, error) {
	response, err := c.WithRawResponse.CreateInvoiceAttachment(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Removes an attachment from an invoice and permanently deletes the file. Attachments can be removed only
// from invoices in the `DRAFT`, `SCHEDULED`, `UNPAID`, or `PARTIALLY_PAID` state.
func (c *Client) DeleteInvoiceAttachment(
	ctx context.Context,
	request *v2.DeleteInvoiceAttachmentRequest,
	opts ...option.RequestOption,
) (*v2.DeleteInvoiceAttachmentResponse, error) {
	response, err := c.WithRawResponse.DeleteInvoiceAttachment(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Cancels an invoice. The seller cannot collect payments for
// the canceled invoice.
//
// You cannot cancel an invoice in the `DRAFT` state or in a terminal state: `PAID`, `REFUNDED`, `CANCELED`, or `FAILED`.
func (c *Client) Cancel(
	ctx context.Context,
	request *v2.CancelInvoiceRequest,
	opts ...option.RequestOption,
) (*v2.CancelInvoiceResponse, error) {
	response, err := c.WithRawResponse.Cancel(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Publishes the specified draft invoice.
//
// After an invoice is published, Square
// follows up based on the invoice configuration. For example, Square
// sends the invoice to the customer's email address, charges the customer's card on file, or does
// nothing. Square also makes the invoice available on a Square-hosted invoice page.
//
// The invoice `status` also changes from `DRAFT` to a status
// based on the invoice configuration. For example, the status changes to `UNPAID` if
// Square emails the invoice or `PARTIALLY_PAID` if Square charges a card on file for a portion of the
// invoice amount.
//
// In addition to the required `ORDERS_WRITE` and `INVOICES_WRITE` permissions, `CUSTOMERS_READ`
// and `PAYMENTS_WRITE` are required when publishing invoices configured for card-on-file payments.
func (c *Client) Publish(
	ctx context.Context,
	request *v2.PublishInvoiceRequest,
	opts ...option.RequestOption,
) (*v2.PublishInvoiceResponse, error) {
	response, err := c.WithRawResponse.Publish(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}
