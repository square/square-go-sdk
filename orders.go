// This file was auto-generated by Fern from our API Definition.

package square

type BatchGetOrdersRequest struct {
	// The ID of the location for these orders. This field is optional: omit it to retrieve
	// orders within the scope of the current authorization's merchant ID.
	LocationID *string `json:"location_id,omitempty" url:"-"`
	// The IDs of the orders to retrieve. A maximum of 100 orders can be retrieved per request.
	OrderIDs []string `json:"order_ids,omitempty" url:"-"`
}

type CalculateOrderRequest struct {
	// The order to be calculated. Expects the entire order, not a sparse update.
	Order *Order `json:"order,omitempty" url:"-"`
	// Identifies one or more loyalty reward tiers to apply during the order calculation.
	// The discounts defined by the reward tiers are added to the order only to preview the
	// effect of applying the specified rewards. The rewards do not correspond to actual
	// redemptions; that is, no `reward`s are created. Therefore, the reward `id`s are
	// random strings used only to reference the reward tier.
	ProposedRewards []*OrderReward `json:"proposed_rewards,omitempty" url:"-"`
}

type CloneOrderRequest struct {
	// The ID of the order to clone.
	OrderID string `json:"order_id" url:"-"`
	// An optional order version for concurrency protection.
	//
	// If a version is provided, it must match the latest stored version of the order to clone.
	// If a version is not provided, the API clones the latest version.
	Version *int `json:"version,omitempty" url:"-"`
	// A value you specify that uniquely identifies this clone request.
	//
	// If you are unsure whether a particular order was cloned successfully,
	// you can reattempt the call with the same idempotency key without
	// worrying about creating duplicate cloned orders.
	// The originally cloned order is returned.
	//
	// For more information, see [Idempotency](https://developer.squareup.com/docs/build-basics/common-api-patterns/idempotency).
	IdempotencyKey *string `json:"idempotency_key,omitempty" url:"-"`
}

type PayOrderRequest struct {
	// A value you specify that uniquely identifies this request among requests you have sent. If
	// you are unsure whether a particular payment request was completed successfully, you can reattempt
	// it with the same idempotency key without worrying about duplicate payments.
	//
	// For more information, see [Idempotency](https://developer.squareup.com/docs/working-with-apis/idempotency).
	IdempotencyKey string `json:"idempotency_key" url:"-"`
	// The version of the order being paid. If not supplied, the latest version will be paid.
	OrderVersion *int `json:"order_version,omitempty" url:"-"`
	// The IDs of the [payments](entity:Payment) to collect.
	// The payment total must match the order total.
	PaymentIDs []string `json:"payment_ids,omitempty" url:"-"`
}

type SearchOrdersRequest struct {
	// The location IDs for the orders to query. All locations must belong to
	// the same merchant.
	//
	// Max: 10 location IDs.
	LocationIDs []string `json:"location_ids,omitempty" url:"-"`
	// A pagination cursor returned by a previous call to this endpoint.
	// Provide this cursor to retrieve the next set of results for your original query.
	// For more information, see [Pagination](https://developer.squareup.com/docs/build-basics/common-api-patterns/pagination).
	Cursor *string `json:"cursor,omitempty" url:"-"`
	// Query conditions used to filter or sort the results. Note that when
	// retrieving additional pages using a cursor, you must use the original query.
	Query *SearchOrdersQuery `json:"query,omitempty" url:"-"`
	// The maximum number of results to be returned in a single page.
	//
	// Default: `500`
	// Max: `1000`
	Limit *int `json:"limit,omitempty" url:"-"`
	// A Boolean that controls the format of the search results. If `true`,
	// `SearchOrders` returns [OrderEntry](entity:OrderEntry) objects. If `false`, `SearchOrders`
	// returns complete order objects.
	//
	// Default: `false`.
	ReturnEntries *bool `json:"return_entries,omitempty" url:"-"`
}

type UpdateOrderRequest struct {
	// The [sparse order](https://developer.squareup.com/docs/orders-api/manage-orders/update-orders#sparse-order-objects)
	// containing only the fields to update and the version to which the update is
	// being applied.
	Order *Order `json:"order,omitempty" url:"-"`
	// The [dot notation paths](https://developer.squareup.com/docs/orders-api/manage-orders/update-orders#identifying-fields-to-delete)
	// fields to clear. For example, `line_items[uid].note`.
	// For more information, see [Deleting fields](https://developer.squareup.com/docs/orders-api/manage-orders/update-orders#deleting-fields).
	FieldsToClear []string `json:"fields_to_clear,omitempty" url:"-"`
	// A value you specify that uniquely identifies this update request.
	//
	// If you are unsure whether a particular update was applied to an order successfully,
	// you can reattempt it with the same idempotency key without
	// worrying about creating duplicate updates to the order.
	// The latest order version is returned.
	//
	// For more information, see [Idempotency](https://developer.squareup.com/docs/build-basics/common-api-patterns/idempotency).
	IdempotencyKey *string `json:"idempotency_key,omitempty" url:"-"`
}
