// Code generated by Fern. DO NOT EDIT.

package team

import (
	context "context"
	v2 "github.com/square/square-go-sdk/v2"
	core "github.com/square/square-go-sdk/v2/core"
	internal "github.com/square/square-go-sdk/v2/internal"
	option "github.com/square/square-go-sdk/v2/option"
	http "net/http"
	os "os"
)

type Client struct {
	WithRawResponse *RawClient

	baseURL string
	caller  *internal.Caller
	header  http.Header
}

func NewClient(opts ...option.RequestOption) *Client {
	options := core.NewRequestOptions(opts...)
	if options.Token == "" {
		options.Token = os.Getenv("SQUARE_TOKEN")
	}
	if options.Version == "" {
		options.Version = os.Getenv("VERSION")
	}
	return &Client{
		WithRawResponse: NewRawClient(options),
		baseURL:         options.BaseURL,
		caller: internal.NewCaller(
			&internal.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
		header: options.ToHeader(),
	}
}

// Lists jobs in a seller account. Results are sorted by title in ascending order.
func (c *Client) ListJobs(
	ctx context.Context,
	request *v2.ListJobsRequest,
	opts ...option.RequestOption,
) (*v2.ListJobsResponse, error) {
	response, err := c.WithRawResponse.ListJobs(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Creates a job in a seller account. A job defines a title and tip eligibility. Note that
// compensation is defined in a [job assignment](entity:JobAssignment) in a team member's wage setting.
func (c *Client) CreateJob(
	ctx context.Context,
	request *v2.CreateJobRequest,
	opts ...option.RequestOption,
) (*v2.CreateJobResponse, error) {
	response, err := c.WithRawResponse.CreateJob(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Retrieves a specified job.
func (c *Client) RetrieveJob(
	ctx context.Context,
	request *v2.RetrieveJobRequest,
	opts ...option.RequestOption,
) (*v2.RetrieveJobResponse, error) {
	response, err := c.WithRawResponse.RetrieveJob(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Updates the title or tip eligibility of a job. Changes to the title propagate to all
// `JobAssignment`, `Shift`, and `TeamMemberWage` objects that reference the job ID. Changes to
// tip eligibility propagate to all `TeamMemberWage` objects that reference the job ID.
func (c *Client) UpdateJob(
	ctx context.Context,
	request *v2.UpdateJobRequest,
	opts ...option.RequestOption,
) (*v2.UpdateJobResponse, error) {
	response, err := c.WithRawResponse.UpdateJob(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}
