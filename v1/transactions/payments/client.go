// This file was auto-generated by Fern from our API Definition.

package payments

import (
	context "context"
	squaregosdk "github.com/square/square-go-sdk"
	core "github.com/square/square-go-sdk/core"
	internal "github.com/square/square-go-sdk/internal"
	option "github.com/square/square-go-sdk/option"
	transactions "github.com/square/square-go-sdk/v1/transactions"
	http "net/http"
	os "os"
)

type Client struct {
	baseURL string
	caller  *internal.Caller
	header  http.Header
}

func NewClient(opts ...option.RequestOption) *Client {
	options := core.NewRequestOptions(opts...)
	if options.Token == "" {
		options.Token = os.Getenv("SQUARE_TOKEN")
	}
	if options.Version == "" {
		options.Version = os.Getenv("VERSION")
	}
	return &Client{
		baseURL: options.BaseURL,
		caller: internal.NewCaller(
			&internal.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
		header: options.ToHeader(),
	}
}

// Provides summary information for all payments taken for a given
// Square account during a date range. Date ranges cannot exceed 1 year in
// length. See Date ranges for details of inclusive and exclusive dates.
//
// \*Note\*\*: Details for payments processed with Square Point of Sale while
// in offline mode may not be transmitted to Square for up to 72 hours.
// Offline payments have a `created_at` value that reflects the time the
// payment was originally processed, not the time it was subsequently
// transmitted to Square. Consequently, the ListPayments endpoint might
// list an offline payment chronologically between online payments that
// were seen in a previous request.
func (c *Client) List(
	ctx context.Context,
	// The ID of the location to list payments for. If you specify me, this endpoint returns payments aggregated from all of the business's locations.
	locationID string,
	request *transactions.PaymentsListRequest,
	opts ...option.RequestOption,
) ([]*squaregosdk.V1Payment, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://connect.squareupsandbox.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := internal.EncodeURL(baseURL+"/v1/%v/payments", locationID)

	queryParams, err := internal.QueryValues(request)
	if err != nil {
		return nil, err
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}

	headers := internal.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response []*squaregosdk.V1Payment
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodGet,
			MaxAttempts:     options.MaxAttempts,
			Headers:         headers,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Provides comprehensive information for a single payment.
func (c *Client) Get(
	ctx context.Context,
	// The ID of the payment's associated location.
	locationID string,
	// The Square-issued payment ID. payment_id comes from Payment objects returned by the List Payments endpoint, Settlement objects returned by the List Settlements endpoint, or Refund objects returned by the List Refunds endpoint.
	paymentID string,
	opts ...option.RequestOption,
) (*squaregosdk.V1Payment, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://connect.squareupsandbox.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := internal.EncodeURL(
		baseURL+"/v1/%v/payments/%v",
		locationID,
		paymentID,
	)

	headers := internal.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *squaregosdk.V1Payment
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodGet,
			MaxAttempts:     options.MaxAttempts,
			Headers:         headers,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}
