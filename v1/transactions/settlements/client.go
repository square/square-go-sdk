// This file was auto-generated by Fern from our API Definition.

package settlements

import (
	context "context"
	squaregosdk "github.com/square/square-go-sdk"
	core "github.com/square/square-go-sdk/core"
	internal "github.com/square/square-go-sdk/internal"
	option "github.com/square/square-go-sdk/option"
	transactions "github.com/square/square-go-sdk/v1/transactions"
	http "net/http"
	os "os"
)

type Client struct {
	baseURL string
	caller  *internal.Caller
	header  http.Header
}

func NewClient(opts ...option.RequestOption) *Client {
	options := core.NewRequestOptions(opts...)
	if options.Token == "" {
		options.Token = os.Getenv("SQUARE_TOKEN")
	}
	if options.Version == "" {
		options.Version = os.Getenv("VERSION")
	}
	return &Client{
		baseURL: options.BaseURL,
		caller: internal.NewCaller(
			&internal.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
		header: options.ToHeader(),
	}
}

// Provides summary information for all deposits and withdrawals
// initiated by Square to a linked bank account during a date range. Date
// ranges cannot exceed one year in length.
//
// \*Note\*\*: the ListSettlements endpoint does not provide entry
// information.
func (c *Client) List(
	ctx context.Context,
	request *transactions.SettlementsListRequest,
	opts ...option.RequestOption,
) ([]*squaregosdk.V1Settlement, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://connect.squareupsandbox.com",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/v1/%v/settlements",
		request.LocationID,
	)
	queryParams, err := internal.QueryValues(request)
	if err != nil {
		return nil, err
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)

	var response []*squaregosdk.V1Settlement
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodGet,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Provides comprehensive information for a single settlement.
//
// The returned `Settlement` objects include an `entries` field that lists
// the transactions that contribute to the settlement total. Most
// settlement entries correspond to a payment payout, but settlement
// entries are also generated for less common events, like refunds, manual
// adjustments, or chargeback holds.
//
// Square initiates its regular deposits as indicated in the
// [Deposit Options with Square](https://squareup.com/help/us/en/article/3807)
// help article. Details for a regular deposit are usually not available
// from Connect API endpoints before 10 p.m. PST the same day.
//
// Square does not know when an initiated settlement **completes**, only
// whether it has failed. A completed settlement is typically reflected in
// a bank account within 3 business days, but in exceptional cases it may
// take longer.
func (c *Client) Get(
	ctx context.Context,
	request *transactions.SettlementsGetRequest,
	opts ...option.RequestOption,
) (*squaregosdk.V1Settlement, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://connect.squareupsandbox.com",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/v1/%v/settlements/%v",
		request.LocationID,
		request.SettlementID,
	)
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)

	var response *squaregosdk.V1Settlement
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodGet,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}
