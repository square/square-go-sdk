// Code generated by Fern. DO NOT EDIT.

package square

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/square/square-go-sdk/v2/internal"
)

type CancelTransferOrderRequest struct {
	// The ID of the transfer order to cancel. Must be in STARTED or PARTIALLY_RECEIVED status.
	TransferOrderID string `json:"-" url:"-"`
	// A unique string that identifies this UpdateTransferOrder request. Keys can be
	// any valid string but must be unique for every UpdateTransferOrder request.
	IdempotencyKey string `json:"idempotency_key" url:"-"`
	// Version for optimistic concurrency
	Version *int64 `json:"version,omitempty" url:"-"`
}

type CreateTransferOrderRequest struct {
	// A unique string that identifies this CreateTransferOrder request. Keys can be
	// any valid string but must be unique for every CreateTransferOrder request.
	IdempotencyKey string `json:"idempotency_key" url:"-"`
	// The transfer order to create
	TransferOrder *CreateTransferOrderData `json:"transfer_order,omitempty" url:"-"`
}

type DeleteTransferOrdersRequest struct {
	// The ID of the transfer order to delete
	TransferOrderID string `json:"-" url:"-"`
	// Version for optimistic concurrency
	Version *int64 `json:"-" url:"version,omitempty"`
}

type GetTransferOrdersRequest struct {
	// The ID of the transfer order to retrieve
	TransferOrderID string `json:"-" url:"-"`
}

type ReceiveTransferOrderRequest struct {
	// The ID of the transfer order to receive items for
	TransferOrderID string `json:"-" url:"-"`
	// A unique key to make this request idempotent
	IdempotencyKey string `json:"idempotency_key" url:"-"`
	// The receipt details
	Receipt *TransferOrderGoodsReceipt `json:"receipt,omitempty" url:"-"`
	// Version for optimistic concurrency
	Version *int64 `json:"version,omitempty" url:"-"`
}

type SearchTransferOrdersRequest struct {
	// The search query
	Query *TransferOrderQuery `json:"query,omitempty" url:"-"`
	// Pagination cursor from a previous search response
	Cursor *string `json:"cursor,omitempty" url:"-"`
	// Maximum number of results to return (1-100)
	Limit *int `json:"limit,omitempty" url:"-"`
}

type StartTransferOrderRequest struct {
	// The ID of the transfer order to start. Must be in DRAFT status.
	TransferOrderID string `json:"-" url:"-"`
	// A unique string that identifies this UpdateTransferOrder request. Keys can be
	// any valid string but must be unique for every UpdateTransferOrder request.
	IdempotencyKey string `json:"idempotency_key" url:"-"`
	// Version for optimistic concurrency
	Version *int64 `json:"version,omitempty" url:"-"`
}

// Response for canceling a transfer order
type CancelTransferOrderResponse struct {
	// The updated transfer order with status changed to CANCELED
	TransferOrder *TransferOrder `json:"transfer_order,omitempty" url:"transfer_order,omitempty"`
	// Any errors that occurred during the request
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CancelTransferOrderResponse) GetTransferOrder() *TransferOrder {
	if c == nil {
		return nil
	}
	return c.TransferOrder
}

func (c *CancelTransferOrderResponse) GetErrors() []*Error {
	if c == nil {
		return nil
	}
	return c.Errors
}

func (c *CancelTransferOrderResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CancelTransferOrderResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CancelTransferOrderResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CancelTransferOrderResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CancelTransferOrderResponse) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// Data for creating a new transfer order to move [CatalogItemVariation](entity:CatalogItemVariation)s
// between [Location](entity:Location)s. Used with the [CreateTransferOrder](api-endpoint:TransferOrders-CreateTransferOrder)
// endpoint.
type CreateTransferOrderData struct {
	// The source [Location](entity:Location) that will send the items. Must be an active location
	// in your Square account with sufficient inventory of the requested items.
	SourceLocationID string `json:"source_location_id" url:"source_location_id"`
	// The destination [Location](entity:Location) that will receive the items. Must be an active location
	// in your Square account
	DestinationLocationID string `json:"destination_location_id" url:"destination_location_id"`
	// Expected transfer date in RFC 3339 format (e.g. "2023-10-01T12:00:00Z").
	ExpectedAt *string `json:"expected_at,omitempty" url:"expected_at,omitempty"`
	// Optional notes about the transfer
	Notes *string `json:"notes,omitempty" url:"notes,omitempty"`
	// Optional shipment tracking number
	TrackingNumber *string `json:"tracking_number,omitempty" url:"tracking_number,omitempty"`
	// ID of the [TeamMember](entity:TeamMember) creating this transfer order. Used for tracking
	// and auditing purposes.
	CreatedByTeamMemberID *string `json:"created_by_team_member_id,omitempty" url:"created_by_team_member_id,omitempty"`
	// List of [CatalogItemVariation](entity:CatalogItemVariation)s to transfer, including quantities
	LineItems []*CreateTransferOrderLineData `json:"line_items,omitempty" url:"line_items,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CreateTransferOrderData) GetSourceLocationID() string {
	if c == nil {
		return ""
	}
	return c.SourceLocationID
}

func (c *CreateTransferOrderData) GetDestinationLocationID() string {
	if c == nil {
		return ""
	}
	return c.DestinationLocationID
}

func (c *CreateTransferOrderData) GetExpectedAt() *string {
	if c == nil {
		return nil
	}
	return c.ExpectedAt
}

func (c *CreateTransferOrderData) GetNotes() *string {
	if c == nil {
		return nil
	}
	return c.Notes
}

func (c *CreateTransferOrderData) GetTrackingNumber() *string {
	if c == nil {
		return nil
	}
	return c.TrackingNumber
}

func (c *CreateTransferOrderData) GetCreatedByTeamMemberID() *string {
	if c == nil {
		return nil
	}
	return c.CreatedByTeamMemberID
}

func (c *CreateTransferOrderData) GetLineItems() []*CreateTransferOrderLineData {
	if c == nil {
		return nil
	}
	return c.LineItems
}

func (c *CreateTransferOrderData) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateTransferOrderData) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateTransferOrderData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateTransferOrderData(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateTransferOrderData) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// Data for creating a new transfer order line item. Each line item specifies a
// [CatalogItemVariation](entity:CatalogItemVariation) and quantity to transfer.
type CreateTransferOrderLineData struct {
	// ID of the [CatalogItemVariation](entity:CatalogItemVariation) to transfer. Must reference a valid
	// item variation in the [Catalog](api:Catalog). The item variation must be:
	// - Active and available for sale
	// - Enabled for inventory tracking
	// - Available at the source location
	ItemVariationID string `json:"item_variation_id" url:"item_variation_id"`
	// Total quantity ordered
	QuantityOrdered string `json:"quantity_ordered" url:"quantity_ordered"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CreateTransferOrderLineData) GetItemVariationID() string {
	if c == nil {
		return ""
	}
	return c.ItemVariationID
}

func (c *CreateTransferOrderLineData) GetQuantityOrdered() string {
	if c == nil {
		return ""
	}
	return c.QuantityOrdered
}

func (c *CreateTransferOrderLineData) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateTransferOrderLineData) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateTransferOrderLineData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateTransferOrderLineData(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateTransferOrderLineData) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// Response for creating a transfer order.
type CreateTransferOrderResponse struct {
	// The created transfer order
	TransferOrder *TransferOrder `json:"transfer_order,omitempty" url:"transfer_order,omitempty"`
	// Any errors that occurred during the request
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CreateTransferOrderResponse) GetTransferOrder() *TransferOrder {
	if c == nil {
		return nil
	}
	return c.TransferOrder
}

func (c *CreateTransferOrderResponse) GetErrors() []*Error {
	if c == nil {
		return nil
	}
	return c.Errors
}

func (c *CreateTransferOrderResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateTransferOrderResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateTransferOrderResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateTransferOrderResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateTransferOrderResponse) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// Response for deleting a transfer order
type DeleteTransferOrderResponse struct {
	// Any errors that occurred during the request
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DeleteTransferOrderResponse) GetErrors() []*Error {
	if d == nil {
		return nil
	}
	return d.Errors
}

func (d *DeleteTransferOrderResponse) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DeleteTransferOrderResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler DeleteTransferOrderResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DeleteTransferOrderResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DeleteTransferOrderResponse) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

// Response for receiving items for a transfer order
type ReceiveTransferOrderResponse struct {
	// The updated transfer order
	TransferOrder *TransferOrder `json:"transfer_order,omitempty" url:"transfer_order,omitempty"`
	// Any errors that occurred during the request
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *ReceiveTransferOrderResponse) GetTransferOrder() *TransferOrder {
	if r == nil {
		return nil
	}
	return r.TransferOrder
}

func (r *ReceiveTransferOrderResponse) GetErrors() []*Error {
	if r == nil {
		return nil
	}
	return r.Errors
}

func (r *ReceiveTransferOrderResponse) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *ReceiveTransferOrderResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ReceiveTransferOrderResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = ReceiveTransferOrderResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *ReceiveTransferOrderResponse) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

// Response containing the requested transfer order
type RetrieveTransferOrderResponse struct {
	// The requested transfer order
	TransferOrder *TransferOrder `json:"transfer_order,omitempty" url:"transfer_order,omitempty"`
	// Any errors that occurred during the request
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *RetrieveTransferOrderResponse) GetTransferOrder() *TransferOrder {
	if r == nil {
		return nil
	}
	return r.TransferOrder
}

func (r *RetrieveTransferOrderResponse) GetErrors() []*Error {
	if r == nil {
		return nil
	}
	return r.Errors
}

func (r *RetrieveTransferOrderResponse) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RetrieveTransferOrderResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler RetrieveTransferOrderResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RetrieveTransferOrderResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *RetrieveTransferOrderResponse) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

// Response for searching transfer orders
type SearchTransferOrdersResponse struct {
	// List of transfer orders matching the search criteria
	TransferOrders []*TransferOrder `json:"transfer_orders,omitempty" url:"transfer_orders,omitempty"`
	// Pagination cursor for fetching the next page of results
	Cursor *string `json:"cursor,omitempty" url:"cursor,omitempty"`
	// Any errors that occurred during the request
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SearchTransferOrdersResponse) GetTransferOrders() []*TransferOrder {
	if s == nil {
		return nil
	}
	return s.TransferOrders
}

func (s *SearchTransferOrdersResponse) GetCursor() *string {
	if s == nil {
		return nil
	}
	return s.Cursor
}

func (s *SearchTransferOrdersResponse) GetErrors() []*Error {
	if s == nil {
		return nil
	}
	return s.Errors
}

func (s *SearchTransferOrdersResponse) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SearchTransferOrdersResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler SearchTransferOrdersResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SearchTransferOrdersResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SearchTransferOrdersResponse) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// Response for starting a transfer order.
type StartTransferOrderResponse struct {
	// The updated transfer order with status changed to STARTED
	TransferOrder *TransferOrder `json:"transfer_order,omitempty" url:"transfer_order,omitempty"`
	// Any errors that occurred during the request
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *StartTransferOrderResponse) GetTransferOrder() *TransferOrder {
	if s == nil {
		return nil
	}
	return s.TransferOrder
}

func (s *StartTransferOrderResponse) GetErrors() []*Error {
	if s == nil {
		return nil
	}
	return s.Errors
}

func (s *StartTransferOrderResponse) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *StartTransferOrderResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler StartTransferOrderResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = StartTransferOrderResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *StartTransferOrderResponse) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// Represents a transfer order for moving [CatalogItemVariation](entity:CatalogItemVariation)s
// between [Location](entity:Location)s. Transfer orders track the entire lifecycle of an inventory
// transfer, including:
// - What items and quantities are being moved
// - Source and destination locations
// - Current [TransferOrderStatus](entity:TransferOrderStatus)
// - Shipping information and tracking
// - Which [TeamMember](entity:TeamMember) initiated the transfer
//
// This object is commonly used to:
// - Track [CatalogItemVariation](entity:CatalogItemVariation) movements between [Location](entity:Location)s
// - Reconcile expected vs received quantities
// - Monitor transfer progress and shipping status
// - Audit inventory movement history
type TransferOrder struct {
	// Unique system-generated identifier for this transfer order. Use this ID for:
	// - Retrieving transfer order details
	// - Tracking status changes via webhooks
	// - Linking transfers in external systems
	ID *string `json:"id,omitempty" url:"id,omitempty"`
	// The source [Location](entity:Location) sending the [CatalogItemVariation](entity:CatalogItemVariation)s.
	// This location must:
	// - Be active in your Square organization
	// - Have sufficient inventory for the items being transferred
	// - Not be the same as the destination location
	//
	// This field is not updatable.
	SourceLocationID *string `json:"source_location_id,omitempty" url:"source_location_id,omitempty"`
	// The destination [Location](entity:Location) receiving the [CatalogItemVariation](entity:CatalogItemVariation)s.
	// This location must:
	// - Be active in your Square organization
	// - Not be the same as the source location
	//
	// This field is not updatable.
	DestinationLocationID *string `json:"destination_location_id,omitempty" url:"destination_location_id,omitempty"`
	// Current [TransferOrderStatus](entity:TransferOrderStatus) indicating where the order is in its lifecycle.
	// Status transitions follow this progression:
	// 1. [DRAFT](entity:TransferOrderStatus) -> [STARTED](entity:TransferOrderStatus) via [StartTransferOrder](api-endpoint:TransferOrders-StartTransferOrder)
	// 2. [STARTED](entity:TransferOrderStatus) -> [PARTIALLY_RECEIVED](entity:TransferOrderStatus) via [ReceiveTransferOrder](api-endpoint:TransferOrders-ReceiveTransferOrder)
	// 3. [PARTIALLY_RECEIVED](entity:TransferOrderStatus) -> [COMPLETED](entity:TransferOrderStatus) after all items received
	//
	// Orders can be [CANCELED](entity:TransferOrderStatus) from [STARTED](entity:TransferOrderStatus) or
	// [PARTIALLY_RECEIVED](entity:TransferOrderStatus) status.
	//
	// This field is read-only and reflects the current state of the transfer order, and cannot be updated directly. Use the appropriate
	// endpoints (e.g. [StartPurchaseOrder](api-endpoint:TransferOrders-StartTransferOrder), to change the status.
	// See [TransferOrderStatus](#type-transferorderstatus) for possible values
	Status *TransferOrderStatus `json:"status,omitempty" url:"status,omitempty"`
	// Timestamp when the transfer order was created, in RFC 3339 format.
	// Used for:
	// - Auditing transfer history
	// - Tracking order age
	// - Reporting and analytics
	CreatedAt *string `json:"created_at,omitempty" url:"created_at,omitempty"`
	// Timestamp when the transfer order was last updated, in RFC 3339 format.
	// Updated when:
	// - Order status changes
	// - Items are received
	// - Notes or metadata are modified
	UpdatedAt *string `json:"updated_at,omitempty" url:"updated_at,omitempty"`
	// Expected transfer completion date, in RFC 3339 format.
	// Used for:
	// - Planning inventory availability
	// - Scheduling receiving staff
	// - Monitoring transfer timeliness
	ExpectedAt *string `json:"expected_at,omitempty" url:"expected_at,omitempty"`
	// Timestamp when the transfer order was completed or canceled, in RFC 3339 format (e.g. "2023-10-01T12:00:00Z").
	CompletedAt *string `json:"completed_at,omitempty" url:"completed_at,omitempty"`
	// Optional notes about the transfer.
	Notes *string `json:"notes,omitempty" url:"notes,omitempty"`
	// Shipment tracking number for monitoring transfer progress.
	TrackingNumber *string `json:"tracking_number,omitempty" url:"tracking_number,omitempty"`
	// ID of the [TeamMember](entity:TeamMember) who created this transfer order. This field is not writeable by the Connect V2 API.
	CreatedByTeamMemberID *string `json:"created_by_team_member_id,omitempty" url:"created_by_team_member_id,omitempty"`
	// List of [CatalogItemVariation](entity:CatalogItemVariation)s being transferred.
	LineItems []*TransferOrderLine `json:"line_items,omitempty" url:"line_items,omitempty"`
	// Version for optimistic concurrency control. This is a monotonically increasing integer
	// that changes whenever the transfer order is modified. Use this when calling
	// [UpdateTransferOrder](api-endpoint:TransferOrders-UpdateTransferOrder) and other endpoints to ensure you're
	// not overwriting concurrent changes.
	Version *int64 `json:"version,omitempty" url:"version,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TransferOrder) GetID() *string {
	if t == nil {
		return nil
	}
	return t.ID
}

func (t *TransferOrder) GetSourceLocationID() *string {
	if t == nil {
		return nil
	}
	return t.SourceLocationID
}

func (t *TransferOrder) GetDestinationLocationID() *string {
	if t == nil {
		return nil
	}
	return t.DestinationLocationID
}

func (t *TransferOrder) GetStatus() *TransferOrderStatus {
	if t == nil {
		return nil
	}
	return t.Status
}

func (t *TransferOrder) GetCreatedAt() *string {
	if t == nil {
		return nil
	}
	return t.CreatedAt
}

func (t *TransferOrder) GetUpdatedAt() *string {
	if t == nil {
		return nil
	}
	return t.UpdatedAt
}

func (t *TransferOrder) GetExpectedAt() *string {
	if t == nil {
		return nil
	}
	return t.ExpectedAt
}

func (t *TransferOrder) GetCompletedAt() *string {
	if t == nil {
		return nil
	}
	return t.CompletedAt
}

func (t *TransferOrder) GetNotes() *string {
	if t == nil {
		return nil
	}
	return t.Notes
}

func (t *TransferOrder) GetTrackingNumber() *string {
	if t == nil {
		return nil
	}
	return t.TrackingNumber
}

func (t *TransferOrder) GetCreatedByTeamMemberID() *string {
	if t == nil {
		return nil
	}
	return t.CreatedByTeamMemberID
}

func (t *TransferOrder) GetLineItems() []*TransferOrderLine {
	if t == nil {
		return nil
	}
	return t.LineItems
}

func (t *TransferOrder) GetVersion() *int64 {
	if t == nil {
		return nil
	}
	return t.Version
}

func (t *TransferOrder) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TransferOrder) UnmarshalJSON(data []byte) error {
	type unmarshaler TransferOrder
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TransferOrder(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TransferOrder) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// Filter criteria for searching transfer orders
type TransferOrderFilter struct {
	// Filter by source location IDs
	SourceLocationIDs []string `json:"source_location_ids,omitempty" url:"source_location_ids,omitempty"`
	// Filter by destination location IDs
	DestinationLocationIDs []string `json:"destination_location_ids,omitempty" url:"destination_location_ids,omitempty"`
	// Filter by order statuses
	// See [TransferOrderStatus](#type-transferorderstatus) for possible values
	Statuses []TransferOrderStatus `json:"statuses,omitempty" url:"statuses,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TransferOrderFilter) GetSourceLocationIDs() []string {
	if t == nil {
		return nil
	}
	return t.SourceLocationIDs
}

func (t *TransferOrderFilter) GetDestinationLocationIDs() []string {
	if t == nil {
		return nil
	}
	return t.DestinationLocationIDs
}

func (t *TransferOrderFilter) GetStatuses() []TransferOrderStatus {
	if t == nil {
		return nil
	}
	return t.Statuses
}

func (t *TransferOrderFilter) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TransferOrderFilter) UnmarshalJSON(data []byte) error {
	type unmarshaler TransferOrderFilter
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TransferOrderFilter(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TransferOrderFilter) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// The goods receipt details for a transfer order. This object represents a single receipt
// of goods against a transfer order, tracking:
//
// - Which [CatalogItemVariation](entity:CatalogItemVariation)s were received
// - Quantities received in good condition
// - Quantities damaged during transit/handling
// - Quantities canceled during receipt
//
// Multiple goods receipts can be created for a single transfer order to handle:
// - Partial deliveries
// - Multiple shipments
// - Split receipts across different dates
// - Cancellations of specific quantities
//
// Each receipt automatically:
// - Updates the transfer order status
// - Adjusts received quantities
// - Updates inventory levels at both source and destination [Location](entity:Location)s
type TransferOrderGoodsReceipt struct {
	// Line items being received. Each line item specifies:
	// - The item being received
	// - Quantity received in good condition
	// - Quantity received damaged
	// - Quantity canceled
	//
	// Constraints:
	// - Must include at least one line item
	// - Maximum of 1000 line items per receipt
	// - Each line item must reference a valid item from the transfer order
	// - Total of received, damaged, and canceled quantities cannot exceed ordered quantity
	LineItems []*TransferOrderGoodsReceiptLineItem `json:"line_items,omitempty" url:"line_items,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TransferOrderGoodsReceipt) GetLineItems() []*TransferOrderGoodsReceiptLineItem {
	if t == nil {
		return nil
	}
	return t.LineItems
}

func (t *TransferOrderGoodsReceipt) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TransferOrderGoodsReceipt) UnmarshalJSON(data []byte) error {
	type unmarshaler TransferOrderGoodsReceipt
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TransferOrderGoodsReceipt(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TransferOrderGoodsReceipt) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// A simplified line item for goods receipts in transfer orders
type TransferOrderGoodsReceiptLineItem struct {
	// The unique identifier of the Transfer Order line being received
	TransferOrderLineUID string `json:"transfer_order_line_uid" url:"transfer_order_line_uid"`
	// The quantity received for this line item as a decimal string (e.g. "10.5").
	// These items will be added to the destination [Location](entity:Location)'s inventory with [InventoryState](entity:InventoryState) of IN_STOCK.
	QuantityReceived *string `json:"quantity_received,omitempty" url:"quantity_received,omitempty"`
	// The quantity that was damaged during shipping/handling as a decimal string (e.g. "1.5").
	// These items will be added to the destination [Location](entity:Location)'s inventory with [InventoryState](entity:InventoryState) of WASTE.
	QuantityDamaged *string `json:"quantity_damaged,omitempty" url:"quantity_damaged,omitempty"`
	// The quantity that was canceled during shipping/handling as a decimal string (e.g. "1.5"). These will be immediately added to inventory in the source location.
	QuantityCanceled *string `json:"quantity_canceled,omitempty" url:"quantity_canceled,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TransferOrderGoodsReceiptLineItem) GetTransferOrderLineUID() string {
	if t == nil {
		return ""
	}
	return t.TransferOrderLineUID
}

func (t *TransferOrderGoodsReceiptLineItem) GetQuantityReceived() *string {
	if t == nil {
		return nil
	}
	return t.QuantityReceived
}

func (t *TransferOrderGoodsReceiptLineItem) GetQuantityDamaged() *string {
	if t == nil {
		return nil
	}
	return t.QuantityDamaged
}

func (t *TransferOrderGoodsReceiptLineItem) GetQuantityCanceled() *string {
	if t == nil {
		return nil
	}
	return t.QuantityCanceled
}

func (t *TransferOrderGoodsReceiptLineItem) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TransferOrderGoodsReceiptLineItem) UnmarshalJSON(data []byte) error {
	type unmarshaler TransferOrderGoodsReceiptLineItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TransferOrderGoodsReceiptLineItem(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TransferOrderGoodsReceiptLineItem) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// Represents a line item in a transfer order. Each line item tracks a specific
// [CatalogItemVariation](entity:CatalogItemVariation) being transferred, including ordered quantities
// and receipt status.
type TransferOrderLine struct {
	// Unique system-generated identifier for the line item. Provide when updating/removing a line via [UpdateTransferOrder](api-endpoint:TransferOrders-UpdateTransferOrder).
	UID *string `json:"uid,omitempty" url:"uid,omitempty"`
	// The required identifier of the [CatalogItemVariation](entity:CatalogItemVariation) being transferred. Must reference
	// a valid catalog item variation that exists in the [Catalog](api:Catalog).
	ItemVariationID string `json:"item_variation_id" url:"item_variation_id"`
	// Total quantity ordered, formatted as a decimal string (e.g. "10 or 10.0000"). Required to be a positive number.
	//
	// To remove a line item, set `remove` to `true` in [UpdateTransferOrder](api-endpoint:TransferOrders-UpdateTransferOrder).
	QuantityOrdered string `json:"quantity_ordered" url:"quantity_ordered"`
	// Calculated quantity of this line item's yet to be received stock. This is the difference between the total quantity ordered and the sum of quantities received, canceled, and damaged.
	QuantityPending *string `json:"quantity_pending,omitempty" url:"quantity_pending,omitempty"`
	// Quantity received at destination. These items are added to the destination
	// [Location](entity:Location)'s inventory with [InventoryState](entity:InventoryState) of IN_STOCK.
	//
	// This field cannot be updated directly in Create/Update operations, instead use [ReceiveTransferOrder](api-endpoint:TransferOrders-ReceiveTransferOrder).
	QuantityReceived *string `json:"quantity_received,omitempty" url:"quantity_received,omitempty"`
	// Quantity received in damaged condition. These items are added to the destination
	// [Location](entity:Location)'s inventory with [InventoryState](entity:InventoryState) of WASTE.
	//
	// This field cannot be updated directly in Create/Update operations, instead use [ReceiveTransferOrder](api-endpoint:TransferOrders-ReceiveTransferOrder).
	QuantityDamaged *string `json:"quantity_damaged,omitempty" url:"quantity_damaged,omitempty"`
	// Quantity that was canceled. These items will be immediately added to inventory in the source location.
	//
	// This field cannot be updated directly in Create/Update operations, instead use [ReceiveTransferOrder](api-endpoint:TransferOrders-ReceiveTransferOrder) or [CancelTransferOrder](api-endpoint:TransferOrders-CancelTransferOrder).
	QuantityCanceled *string `json:"quantity_canceled,omitempty" url:"quantity_canceled,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TransferOrderLine) GetUID() *string {
	if t == nil {
		return nil
	}
	return t.UID
}

func (t *TransferOrderLine) GetItemVariationID() string {
	if t == nil {
		return ""
	}
	return t.ItemVariationID
}

func (t *TransferOrderLine) GetQuantityOrdered() string {
	if t == nil {
		return ""
	}
	return t.QuantityOrdered
}

func (t *TransferOrderLine) GetQuantityPending() *string {
	if t == nil {
		return nil
	}
	return t.QuantityPending
}

func (t *TransferOrderLine) GetQuantityReceived() *string {
	if t == nil {
		return nil
	}
	return t.QuantityReceived
}

func (t *TransferOrderLine) GetQuantityDamaged() *string {
	if t == nil {
		return nil
	}
	return t.QuantityDamaged
}

func (t *TransferOrderLine) GetQuantityCanceled() *string {
	if t == nil {
		return nil
	}
	return t.QuantityCanceled
}

func (t *TransferOrderLine) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TransferOrderLine) UnmarshalJSON(data []byte) error {
	type unmarshaler TransferOrderLine
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TransferOrderLine(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TransferOrderLine) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// Query parameters for searching transfer orders
type TransferOrderQuery struct {
	// Filter criteria
	Filter *TransferOrderFilter `json:"filter,omitempty" url:"filter,omitempty"`
	// Sort configuration
	Sort *TransferOrderSort `json:"sort,omitempty" url:"sort,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TransferOrderQuery) GetFilter() *TransferOrderFilter {
	if t == nil {
		return nil
	}
	return t.Filter
}

func (t *TransferOrderQuery) GetSort() *TransferOrderSort {
	if t == nil {
		return nil
	}
	return t.Sort
}

func (t *TransferOrderQuery) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TransferOrderQuery) UnmarshalJSON(data []byte) error {
	type unmarshaler TransferOrderQuery
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TransferOrderQuery(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TransferOrderQuery) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// Sort configuration for search results
type TransferOrderSort struct {
	// Field to sort by
	// See [TransferOrderSortField](#type-transferordersortfield) for possible values
	Field *TransferOrderSortField `json:"field,omitempty" url:"field,omitempty"`
	// Sort order direction
	// See [SortOrder](#type-sortorder) for possible values
	Order *SortOrder `json:"order,omitempty" url:"order,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TransferOrderSort) GetField() *TransferOrderSortField {
	if t == nil {
		return nil
	}
	return t.Field
}

func (t *TransferOrderSort) GetOrder() *SortOrder {
	if t == nil {
		return nil
	}
	return t.Order
}

func (t *TransferOrderSort) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TransferOrderSort) UnmarshalJSON(data []byte) error {
	type unmarshaler TransferOrderSort
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TransferOrderSort(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TransferOrderSort) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// Fields that can be used for sorting [TransferOrder](entity:TransferOrder)s in search results.
// Used with [SearchTransferOrders](api-endpoint:TransferOrders-SearchTransferOrders) to control
// the order of returned results.
type TransferOrderSortField string

const (
	TransferOrderSortFieldCreatedAt TransferOrderSortField = "CREATED_AT"
	TransferOrderSortFieldUpdatedAt TransferOrderSortField = "UPDATED_AT"
)

func NewTransferOrderSortFieldFromString(s string) (TransferOrderSortField, error) {
	switch s {
	case "CREATED_AT":
		return TransferOrderSortFieldCreatedAt, nil
	case "UPDATED_AT":
		return TransferOrderSortFieldUpdatedAt, nil
	}
	var t TransferOrderSortField
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (t TransferOrderSortField) Ptr() *TransferOrderSortField {
	return &t
}

// Status values for transfer orders. Represents the current state of a
// [TransferOrder](entity:TransferOrder) in its lifecycle from creation to completion.
// Each status determines what actions are available and how inventory is affected.
type TransferOrderStatus string

const (
	TransferOrderStatusDraft             TransferOrderStatus = "DRAFT"
	TransferOrderStatusStarted           TransferOrderStatus = "STARTED"
	TransferOrderStatusPartiallyReceived TransferOrderStatus = "PARTIALLY_RECEIVED"
	TransferOrderStatusCompleted         TransferOrderStatus = "COMPLETED"
	TransferOrderStatusCanceled          TransferOrderStatus = "CANCELED"
)

func NewTransferOrderStatusFromString(s string) (TransferOrderStatus, error) {
	switch s {
	case "DRAFT":
		return TransferOrderStatusDraft, nil
	case "STARTED":
		return TransferOrderStatusStarted, nil
	case "PARTIALLY_RECEIVED":
		return TransferOrderStatusPartiallyReceived, nil
	case "COMPLETED":
		return TransferOrderStatusCompleted, nil
	case "CANCELED":
		return TransferOrderStatusCanceled, nil
	}
	var t TransferOrderStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (t TransferOrderStatus) Ptr() *TransferOrderStatus {
	return &t
}

// Data model for updating a transfer order. All fields are optional.
type UpdateTransferOrderData struct {
	// The source [Location](entity:Location) that will send the items. Must be an active location
	// in your Square account with sufficient inventory of the requested items.
	SourceLocationID *string `json:"source_location_id,omitempty" url:"source_location_id,omitempty"`
	// The destination [Location](entity:Location) that will receive the items. Must be an active location
	// in your Square account.
	DestinationLocationID *string `json:"destination_location_id,omitempty" url:"destination_location_id,omitempty"`
	// Expected transfer date in RFC 3339 format (e.g. "2023-10-01T12:00:00Z").
	ExpectedAt *string `json:"expected_at,omitempty" url:"expected_at,omitempty"`
	// Optional notes about the transfer
	Notes *string `json:"notes,omitempty" url:"notes,omitempty"`
	// Shipment tracking number
	TrackingNumber *string `json:"tracking_number,omitempty" url:"tracking_number,omitempty"`
	// List of items being transferred
	LineItems []*UpdateTransferOrderLineData `json:"line_items,omitempty" url:"line_items,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UpdateTransferOrderData) GetSourceLocationID() *string {
	if u == nil {
		return nil
	}
	return u.SourceLocationID
}

func (u *UpdateTransferOrderData) GetDestinationLocationID() *string {
	if u == nil {
		return nil
	}
	return u.DestinationLocationID
}

func (u *UpdateTransferOrderData) GetExpectedAt() *string {
	if u == nil {
		return nil
	}
	return u.ExpectedAt
}

func (u *UpdateTransferOrderData) GetNotes() *string {
	if u == nil {
		return nil
	}
	return u.Notes
}

func (u *UpdateTransferOrderData) GetTrackingNumber() *string {
	if u == nil {
		return nil
	}
	return u.TrackingNumber
}

func (u *UpdateTransferOrderData) GetLineItems() []*UpdateTransferOrderLineData {
	if u == nil {
		return nil
	}
	return u.LineItems
}

func (u *UpdateTransferOrderData) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdateTransferOrderData) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdateTransferOrderData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdateTransferOrderData(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateTransferOrderData) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

// Represents a line item update in a transfer order
type UpdateTransferOrderLineData struct {
	// Line item id being updated. Required for updating/removing existing line items, but should not be set for new line items.
	UID *string `json:"uid,omitempty" url:"uid,omitempty"`
	// Catalog item variation being transferred
	//
	// Required for new line items, but otherwise is not updatable.
	ItemVariationID *string `json:"item_variation_id,omitempty" url:"item_variation_id,omitempty"`
	// Total quantity ordered
	QuantityOrdered *string `json:"quantity_ordered,omitempty" url:"quantity_ordered,omitempty"`
	// Flag to remove the line item during update. Must include `uid` in removal request
	Remove *bool `json:"remove,omitempty" url:"remove,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UpdateTransferOrderLineData) GetUID() *string {
	if u == nil {
		return nil
	}
	return u.UID
}

func (u *UpdateTransferOrderLineData) GetItemVariationID() *string {
	if u == nil {
		return nil
	}
	return u.ItemVariationID
}

func (u *UpdateTransferOrderLineData) GetQuantityOrdered() *string {
	if u == nil {
		return nil
	}
	return u.QuantityOrdered
}

func (u *UpdateTransferOrderLineData) GetRemove() *bool {
	if u == nil {
		return nil
	}
	return u.Remove
}

func (u *UpdateTransferOrderLineData) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdateTransferOrderLineData) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdateTransferOrderLineData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdateTransferOrderLineData(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateTransferOrderLineData) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

// Response for updating a transfer order
type UpdateTransferOrderResponse struct {
	// The updated transfer order
	TransferOrder *TransferOrder `json:"transfer_order,omitempty" url:"transfer_order,omitempty"`
	// Any errors that occurred during the request
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UpdateTransferOrderResponse) GetTransferOrder() *TransferOrder {
	if u == nil {
		return nil
	}
	return u.TransferOrder
}

func (u *UpdateTransferOrderResponse) GetErrors() []*Error {
	if u == nil {
		return nil
	}
	return u.Errors
}

func (u *UpdateTransferOrderResponse) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdateTransferOrderResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdateTransferOrderResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdateTransferOrderResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateTransferOrderResponse) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpdateTransferOrderRequest struct {
	// The ID of the transfer order to update
	TransferOrderID string `json:"-" url:"-"`
	// A unique string that identifies this UpdateTransferOrder request. Keys must contain only alphanumeric characters, dashes and underscores
	IdempotencyKey string `json:"idempotency_key" url:"-"`
	// The transfer order updates to apply
	TransferOrder *UpdateTransferOrderData `json:"transfer_order,omitempty" url:"-"`
	// Version for optimistic concurrency
	Version *int64 `json:"version,omitempty" url:"-"`
}
