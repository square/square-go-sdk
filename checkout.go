// Code generated by Fern. DO NOT EDIT.

package square

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/square/square-go-sdk/v2/internal"
)

type RetrieveLocationSettingsRequest struct {
	// The ID of the location for which to retrieve settings.
	LocationID string `json:"-" url:"-"`
}

type UpdateLocationSettingsRequest struct {
	// The ID of the location for which to retrieve settings.
	LocationID string `json:"-" url:"-"`
	// Describe your updates using the `location_settings` object. Make sure it contains only the fields that have changed.
	LocationSettings *CheckoutLocationSettings `json:"location_settings,omitempty" url:"-"`
}

type UpdateMerchantSettingsRequest struct {
	// Describe your updates using the `merchant_settings` object. Make sure it contains only the fields that have changed.
	MerchantSettings *CheckoutMerchantSettings `json:"merchant_settings,omitempty" url:"-"`
}

type CheckoutLocationSettings struct {
	// The ID of the location that these settings apply to.
	LocationID *string `json:"location_id,omitempty" url:"location_id,omitempty"`
	// Indicates whether customers are allowed to leave notes at checkout.
	CustomerNotesEnabled *bool `json:"customer_notes_enabled,omitempty" url:"customer_notes_enabled,omitempty"`
	// Policy information is displayed at the bottom of the checkout pages.
	// You can set a maximum of two policies.
	Policies []*CheckoutLocationSettingsPolicy `json:"policies,omitempty" url:"policies,omitempty"`
	// The branding settings for this location.
	Branding *CheckoutLocationSettingsBranding `json:"branding,omitempty" url:"branding,omitempty"`
	// The tip settings for this location.
	Tipping *CheckoutLocationSettingsTipping `json:"tipping,omitempty" url:"tipping,omitempty"`
	// The coupon settings for this location.
	Coupons *CheckoutLocationSettingsCoupons `json:"coupons,omitempty" url:"coupons,omitempty"`
	// The timestamp when the settings were last updated, in RFC 3339 format.
	// Examples for January 25th, 2020 6:25:34pm Pacific Standard Time:
	// UTC: 2020-01-26T02:25:34Z
	// Pacific Standard Time with UTC offset: 2020-01-25T18:25:34-08:00
	UpdatedAt *string `json:"updated_at,omitempty" url:"updated_at,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CheckoutLocationSettings) GetLocationID() *string {
	if c == nil {
		return nil
	}
	return c.LocationID
}

func (c *CheckoutLocationSettings) GetCustomerNotesEnabled() *bool {
	if c == nil {
		return nil
	}
	return c.CustomerNotesEnabled
}

func (c *CheckoutLocationSettings) GetPolicies() []*CheckoutLocationSettingsPolicy {
	if c == nil {
		return nil
	}
	return c.Policies
}

func (c *CheckoutLocationSettings) GetBranding() *CheckoutLocationSettingsBranding {
	if c == nil {
		return nil
	}
	return c.Branding
}

func (c *CheckoutLocationSettings) GetTipping() *CheckoutLocationSettingsTipping {
	if c == nil {
		return nil
	}
	return c.Tipping
}

func (c *CheckoutLocationSettings) GetCoupons() *CheckoutLocationSettingsCoupons {
	if c == nil {
		return nil
	}
	return c.Coupons
}

func (c *CheckoutLocationSettings) GetUpdatedAt() *string {
	if c == nil {
		return nil
	}
	return c.UpdatedAt
}

func (c *CheckoutLocationSettings) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CheckoutLocationSettings) UnmarshalJSON(data []byte) error {
	type unmarshaler CheckoutLocationSettings
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CheckoutLocationSettings(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CheckoutLocationSettings) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CheckoutLocationSettingsBranding struct {
	// Show the location logo on the checkout page.
	// See [HeaderType](#type-headertype) for possible values
	HeaderType *CheckoutLocationSettingsBrandingHeaderType `json:"header_type,omitempty" url:"header_type,omitempty"`
	// The HTML-supported hex color for the button on the checkout page (for example, "#FFFFFF").
	ButtonColor *string `json:"button_color,omitempty" url:"button_color,omitempty"`
	// The shape of the button on the checkout page.
	// See [ButtonShape](#type-buttonshape) for possible values
	ButtonShape *CheckoutLocationSettingsBrandingButtonShape `json:"button_shape,omitempty" url:"button_shape,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CheckoutLocationSettingsBranding) GetHeaderType() *CheckoutLocationSettingsBrandingHeaderType {
	if c == nil {
		return nil
	}
	return c.HeaderType
}

func (c *CheckoutLocationSettingsBranding) GetButtonColor() *string {
	if c == nil {
		return nil
	}
	return c.ButtonColor
}

func (c *CheckoutLocationSettingsBranding) GetButtonShape() *CheckoutLocationSettingsBrandingButtonShape {
	if c == nil {
		return nil
	}
	return c.ButtonShape
}

func (c *CheckoutLocationSettingsBranding) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CheckoutLocationSettingsBranding) UnmarshalJSON(data []byte) error {
	type unmarshaler CheckoutLocationSettingsBranding
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CheckoutLocationSettingsBranding(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CheckoutLocationSettingsBranding) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CheckoutLocationSettingsBrandingButtonShape string

const (
	CheckoutLocationSettingsBrandingButtonShapeSquared CheckoutLocationSettingsBrandingButtonShape = "SQUARED"
	CheckoutLocationSettingsBrandingButtonShapeRounded CheckoutLocationSettingsBrandingButtonShape = "ROUNDED"
	CheckoutLocationSettingsBrandingButtonShapePill    CheckoutLocationSettingsBrandingButtonShape = "PILL"
)

func NewCheckoutLocationSettingsBrandingButtonShapeFromString(s string) (CheckoutLocationSettingsBrandingButtonShape, error) {
	switch s {
	case "SQUARED":
		return CheckoutLocationSettingsBrandingButtonShapeSquared, nil
	case "ROUNDED":
		return CheckoutLocationSettingsBrandingButtonShapeRounded, nil
	case "PILL":
		return CheckoutLocationSettingsBrandingButtonShapePill, nil
	}
	var t CheckoutLocationSettingsBrandingButtonShape
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CheckoutLocationSettingsBrandingButtonShape) Ptr() *CheckoutLocationSettingsBrandingButtonShape {
	return &c
}

type CheckoutLocationSettingsBrandingHeaderType string

const (
	CheckoutLocationSettingsBrandingHeaderTypeBusinessName  CheckoutLocationSettingsBrandingHeaderType = "BUSINESS_NAME"
	CheckoutLocationSettingsBrandingHeaderTypeFramedLogo    CheckoutLocationSettingsBrandingHeaderType = "FRAMED_LOGO"
	CheckoutLocationSettingsBrandingHeaderTypeFullWidthLogo CheckoutLocationSettingsBrandingHeaderType = "FULL_WIDTH_LOGO"
)

func NewCheckoutLocationSettingsBrandingHeaderTypeFromString(s string) (CheckoutLocationSettingsBrandingHeaderType, error) {
	switch s {
	case "BUSINESS_NAME":
		return CheckoutLocationSettingsBrandingHeaderTypeBusinessName, nil
	case "FRAMED_LOGO":
		return CheckoutLocationSettingsBrandingHeaderTypeFramedLogo, nil
	case "FULL_WIDTH_LOGO":
		return CheckoutLocationSettingsBrandingHeaderTypeFullWidthLogo, nil
	}
	var t CheckoutLocationSettingsBrandingHeaderType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CheckoutLocationSettingsBrandingHeaderType) Ptr() *CheckoutLocationSettingsBrandingHeaderType {
	return &c
}

type CheckoutLocationSettingsCoupons struct {
	// Indicates whether coupons are enabled for this location.
	Enabled *bool `json:"enabled,omitempty" url:"enabled,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CheckoutLocationSettingsCoupons) GetEnabled() *bool {
	if c == nil {
		return nil
	}
	return c.Enabled
}

func (c *CheckoutLocationSettingsCoupons) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CheckoutLocationSettingsCoupons) UnmarshalJSON(data []byte) error {
	type unmarshaler CheckoutLocationSettingsCoupons
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CheckoutLocationSettingsCoupons(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CheckoutLocationSettingsCoupons) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CheckoutLocationSettingsPolicy struct {
	// A unique ID to identify the policy when making changes. You must set the UID for policy updates, but itâ€™s optional when setting new policies.
	UID *string `json:"uid,omitempty" url:"uid,omitempty"`
	// The title of the policy. This is required when setting the description, though you can update it in a different request.
	Title *string `json:"title,omitempty" url:"title,omitempty"`
	// The description of the policy.
	Description *string `json:"description,omitempty" url:"description,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CheckoutLocationSettingsPolicy) GetUID() *string {
	if c == nil {
		return nil
	}
	return c.UID
}

func (c *CheckoutLocationSettingsPolicy) GetTitle() *string {
	if c == nil {
		return nil
	}
	return c.Title
}

func (c *CheckoutLocationSettingsPolicy) GetDescription() *string {
	if c == nil {
		return nil
	}
	return c.Description
}

func (c *CheckoutLocationSettingsPolicy) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CheckoutLocationSettingsPolicy) UnmarshalJSON(data []byte) error {
	type unmarshaler CheckoutLocationSettingsPolicy
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CheckoutLocationSettingsPolicy(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CheckoutLocationSettingsPolicy) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CheckoutLocationSettingsTipping struct {
	// Set three custom percentage amounts that buyers can select at checkout. If Smart Tip is enabled, this only applies to transactions totaling $10 or more.
	Percentages []int `json:"percentages,omitempty" url:"percentages,omitempty"`
	// Enables Smart Tip Amounts. If Smart Tip Amounts is enabled, tipping works as follows:
	// If a transaction is less than $10, the available tipping options include No Tip, $1, $2, or $3.
	// If a transaction is $10 or more, the available tipping options include No Tip, 15%, 20%, or 25%.
	// You can set custom percentage amounts with the `percentages` field.
	SmartTippingEnabled *bool `json:"smart_tipping_enabled,omitempty" url:"smart_tipping_enabled,omitempty"`
	// Set the pre-selected percentage amounts that appear at checkout. If Smart Tip is enabled, this only applies to transactions totaling $10 or more.
	DefaultPercent *int `json:"default_percent,omitempty" url:"default_percent,omitempty"`
	// Show the Smart Tip Amounts for this location.
	SmartTips []*Money `json:"smart_tips,omitempty" url:"smart_tips,omitempty"`
	// Set the pre-selected whole amount that appears at checkout when Smart Tip is enabled and the transaction amount is less than $10.
	DefaultSmartTip *Money `json:"default_smart_tip,omitempty" url:"default_smart_tip,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CheckoutLocationSettingsTipping) GetPercentages() []int {
	if c == nil {
		return nil
	}
	return c.Percentages
}

func (c *CheckoutLocationSettingsTipping) GetSmartTippingEnabled() *bool {
	if c == nil {
		return nil
	}
	return c.SmartTippingEnabled
}

func (c *CheckoutLocationSettingsTipping) GetDefaultPercent() *int {
	if c == nil {
		return nil
	}
	return c.DefaultPercent
}

func (c *CheckoutLocationSettingsTipping) GetSmartTips() []*Money {
	if c == nil {
		return nil
	}
	return c.SmartTips
}

func (c *CheckoutLocationSettingsTipping) GetDefaultSmartTip() *Money {
	if c == nil {
		return nil
	}
	return c.DefaultSmartTip
}

func (c *CheckoutLocationSettingsTipping) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CheckoutLocationSettingsTipping) UnmarshalJSON(data []byte) error {
	type unmarshaler CheckoutLocationSettingsTipping
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CheckoutLocationSettingsTipping(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CheckoutLocationSettingsTipping) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CheckoutMerchantSettings struct {
	// The set of payment methods accepted for the merchant's account.
	PaymentMethods *CheckoutMerchantSettingsPaymentMethods `json:"payment_methods,omitempty" url:"payment_methods,omitempty"`
	// The timestamp when the settings were last updated, in RFC 3339 format.
	// Examples for January 25th, 2020 6:25:34pm Pacific Standard Time:
	// UTC: 2020-01-26T02:25:34Z
	// Pacific Standard Time with UTC offset: 2020-01-25T18:25:34-08:00
	UpdatedAt *string `json:"updated_at,omitempty" url:"updated_at,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CheckoutMerchantSettings) GetPaymentMethods() *CheckoutMerchantSettingsPaymentMethods {
	if c == nil {
		return nil
	}
	return c.PaymentMethods
}

func (c *CheckoutMerchantSettings) GetUpdatedAt() *string {
	if c == nil {
		return nil
	}
	return c.UpdatedAt
}

func (c *CheckoutMerchantSettings) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CheckoutMerchantSettings) UnmarshalJSON(data []byte) error {
	type unmarshaler CheckoutMerchantSettings
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CheckoutMerchantSettings(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CheckoutMerchantSettings) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CheckoutMerchantSettingsPaymentMethods struct {
	ApplePay         *CheckoutMerchantSettingsPaymentMethodsPaymentMethod    `json:"apple_pay,omitempty" url:"apple_pay,omitempty"`
	GooglePay        *CheckoutMerchantSettingsPaymentMethodsPaymentMethod    `json:"google_pay,omitempty" url:"google_pay,omitempty"`
	CashApp          *CheckoutMerchantSettingsPaymentMethodsPaymentMethod    `json:"cash_app,omitempty" url:"cash_app,omitempty"`
	AfterpayClearpay *CheckoutMerchantSettingsPaymentMethodsAfterpayClearpay `json:"afterpay_clearpay,omitempty" url:"afterpay_clearpay,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CheckoutMerchantSettingsPaymentMethods) GetApplePay() *CheckoutMerchantSettingsPaymentMethodsPaymentMethod {
	if c == nil {
		return nil
	}
	return c.ApplePay
}

func (c *CheckoutMerchantSettingsPaymentMethods) GetGooglePay() *CheckoutMerchantSettingsPaymentMethodsPaymentMethod {
	if c == nil {
		return nil
	}
	return c.GooglePay
}

func (c *CheckoutMerchantSettingsPaymentMethods) GetCashApp() *CheckoutMerchantSettingsPaymentMethodsPaymentMethod {
	if c == nil {
		return nil
	}
	return c.CashApp
}

func (c *CheckoutMerchantSettingsPaymentMethods) GetAfterpayClearpay() *CheckoutMerchantSettingsPaymentMethodsAfterpayClearpay {
	if c == nil {
		return nil
	}
	return c.AfterpayClearpay
}

func (c *CheckoutMerchantSettingsPaymentMethods) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CheckoutMerchantSettingsPaymentMethods) UnmarshalJSON(data []byte) error {
	type unmarshaler CheckoutMerchantSettingsPaymentMethods
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CheckoutMerchantSettingsPaymentMethods(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CheckoutMerchantSettingsPaymentMethods) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// The settings allowed for AfterpayClearpay.
type CheckoutMerchantSettingsPaymentMethodsAfterpayClearpay struct {
	// Afterpay is shown as an option for order totals falling within the configured range.
	OrderEligibilityRange *CheckoutMerchantSettingsPaymentMethodsAfterpayClearpayEligibilityRange `json:"order_eligibility_range,omitempty" url:"order_eligibility_range,omitempty"`
	// Afterpay is shown as an option for item totals falling within the configured range.
	ItemEligibilityRange *CheckoutMerchantSettingsPaymentMethodsAfterpayClearpayEligibilityRange `json:"item_eligibility_range,omitempty" url:"item_eligibility_range,omitempty"`
	// Indicates whether the payment method is enabled for the account.
	Enabled *bool `json:"enabled,omitempty" url:"enabled,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CheckoutMerchantSettingsPaymentMethodsAfterpayClearpay) GetOrderEligibilityRange() *CheckoutMerchantSettingsPaymentMethodsAfterpayClearpayEligibilityRange {
	if c == nil {
		return nil
	}
	return c.OrderEligibilityRange
}

func (c *CheckoutMerchantSettingsPaymentMethodsAfterpayClearpay) GetItemEligibilityRange() *CheckoutMerchantSettingsPaymentMethodsAfterpayClearpayEligibilityRange {
	if c == nil {
		return nil
	}
	return c.ItemEligibilityRange
}

func (c *CheckoutMerchantSettingsPaymentMethodsAfterpayClearpay) GetEnabled() *bool {
	if c == nil {
		return nil
	}
	return c.Enabled
}

func (c *CheckoutMerchantSettingsPaymentMethodsAfterpayClearpay) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CheckoutMerchantSettingsPaymentMethodsAfterpayClearpay) UnmarshalJSON(data []byte) error {
	type unmarshaler CheckoutMerchantSettingsPaymentMethodsAfterpayClearpay
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CheckoutMerchantSettingsPaymentMethodsAfterpayClearpay(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CheckoutMerchantSettingsPaymentMethodsAfterpayClearpay) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// A range of purchase price that qualifies.
type CheckoutMerchantSettingsPaymentMethodsAfterpayClearpayEligibilityRange struct {
	Min *Money `json:"min" url:"min"`
	Max *Money `json:"max" url:"max"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CheckoutMerchantSettingsPaymentMethodsAfterpayClearpayEligibilityRange) GetMin() *Money {
	if c == nil {
		return nil
	}
	return c.Min
}

func (c *CheckoutMerchantSettingsPaymentMethodsAfterpayClearpayEligibilityRange) GetMax() *Money {
	if c == nil {
		return nil
	}
	return c.Max
}

func (c *CheckoutMerchantSettingsPaymentMethodsAfterpayClearpayEligibilityRange) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CheckoutMerchantSettingsPaymentMethodsAfterpayClearpayEligibilityRange) UnmarshalJSON(data []byte) error {
	type unmarshaler CheckoutMerchantSettingsPaymentMethodsAfterpayClearpayEligibilityRange
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CheckoutMerchantSettingsPaymentMethodsAfterpayClearpayEligibilityRange(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CheckoutMerchantSettingsPaymentMethodsAfterpayClearpayEligibilityRange) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// The settings allowed for a payment method.
type CheckoutMerchantSettingsPaymentMethodsPaymentMethod struct {
	// Indicates whether the payment method is enabled for the account.
	Enabled *bool `json:"enabled,omitempty" url:"enabled,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CheckoutMerchantSettingsPaymentMethodsPaymentMethod) GetEnabled() *bool {
	if c == nil {
		return nil
	}
	return c.Enabled
}

func (c *CheckoutMerchantSettingsPaymentMethodsPaymentMethod) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CheckoutMerchantSettingsPaymentMethodsPaymentMethod) UnmarshalJSON(data []byte) error {
	type unmarshaler CheckoutMerchantSettingsPaymentMethodsPaymentMethod
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CheckoutMerchantSettingsPaymentMethodsPaymentMethod(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CheckoutMerchantSettingsPaymentMethodsPaymentMethod) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type RetrieveLocationSettingsResponse struct {
	// Any errors that occurred during the request.
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`
	// The location settings.
	LocationSettings *CheckoutLocationSettings `json:"location_settings,omitempty" url:"location_settings,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *RetrieveLocationSettingsResponse) GetErrors() []*Error {
	if r == nil {
		return nil
	}
	return r.Errors
}

func (r *RetrieveLocationSettingsResponse) GetLocationSettings() *CheckoutLocationSettings {
	if r == nil {
		return nil
	}
	return r.LocationSettings
}

func (r *RetrieveLocationSettingsResponse) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RetrieveLocationSettingsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler RetrieveLocationSettingsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RetrieveLocationSettingsResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *RetrieveLocationSettingsResponse) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RetrieveMerchantSettingsResponse struct {
	// Any errors that occurred during the request.
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`
	// The merchant settings.
	MerchantSettings *CheckoutMerchantSettings `json:"merchant_settings,omitempty" url:"merchant_settings,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *RetrieveMerchantSettingsResponse) GetErrors() []*Error {
	if r == nil {
		return nil
	}
	return r.Errors
}

func (r *RetrieveMerchantSettingsResponse) GetMerchantSettings() *CheckoutMerchantSettings {
	if r == nil {
		return nil
	}
	return r.MerchantSettings
}

func (r *RetrieveMerchantSettingsResponse) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RetrieveMerchantSettingsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler RetrieveMerchantSettingsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RetrieveMerchantSettingsResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *RetrieveMerchantSettingsResponse) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type UpdateLocationSettingsResponse struct {
	// Any errors that occurred when updating the location settings.
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`
	// The updated location settings.
	LocationSettings *CheckoutLocationSettings `json:"location_settings,omitempty" url:"location_settings,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UpdateLocationSettingsResponse) GetErrors() []*Error {
	if u == nil {
		return nil
	}
	return u.Errors
}

func (u *UpdateLocationSettingsResponse) GetLocationSettings() *CheckoutLocationSettings {
	if u == nil {
		return nil
	}
	return u.LocationSettings
}

func (u *UpdateLocationSettingsResponse) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdateLocationSettingsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdateLocationSettingsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdateLocationSettingsResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateLocationSettingsResponse) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpdateMerchantSettingsResponse struct {
	// Any errors that occurred when updating the merchant settings.
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`
	// The updated merchant settings.
	MerchantSettings *CheckoutMerchantSettings `json:"merchant_settings,omitempty" url:"merchant_settings,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UpdateMerchantSettingsResponse) GetErrors() []*Error {
	if u == nil {
		return nil
	}
	return u.Errors
}

func (u *UpdateMerchantSettingsResponse) GetMerchantSettings() *CheckoutMerchantSettings {
	if u == nil {
		return nil
	}
	return u.MerchantSettings
}

func (u *UpdateMerchantSettingsResponse) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdateMerchantSettingsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdateMerchantSettingsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdateMerchantSettingsResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateMerchantSettingsResponse) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}
