// Code generated by Fern. DO NOT EDIT.

package square

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/square/square-go-sdk/v2/internal"
)

type CreateJobRequest struct {
	// The job to create. The `title` field is required and `is_tip_eligible` defaults to true.
	Job *Job `json:"job,omitempty" url:"-"`
	// A unique identifier for the `CreateJob` request. Keys can be any valid string,
	// but must be unique for each request. For more information, see
	// [Idempotency](https://developer.squareup.com/docs/build-basics/common-api-patterns/idempotency).
	IdempotencyKey string `json:"idempotency_key" url:"-"`
}

type ListJobsRequest struct {
	// The pagination cursor returned by the previous call to this endpoint. Provide this
	// cursor to retrieve the next page of results for your original request. For more information,
	// see [Pagination](https://developer.squareup.com/docs/build-basics/common-api-patterns/pagination).
	Cursor *string `json:"-" url:"cursor,omitempty"`
}

type RetrieveJobRequest struct {
	// The ID of the job to retrieve.
	JobID string `json:"-" url:"-"`
}

type UpdateJobRequest struct {
	// The ID of the job to update.
	JobID string `json:"-" url:"-"`
	// The job with the updated fields, either `title`, `is_tip_eligible`, or both. Only changed fields need
	// to be included in the request. Optionally include `version` to enable optimistic concurrency control.
	Job *Job `json:"job,omitempty" url:"-"`
}

// Represents a [CreateJob](api-endpoint:Team-CreateJob) response. Either `job` or `errors`
// is present in the response.
type CreateJobResponse struct {
	// The new job.
	Job *Job `json:"job,omitempty" url:"job,omitempty"`
	// The errors that occurred during the request.
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CreateJobResponse) GetJob() *Job {
	if c == nil {
		return nil
	}
	return c.Job
}

func (c *CreateJobResponse) GetErrors() []*Error {
	if c == nil {
		return nil
	}
	return c.Errors
}

func (c *CreateJobResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateJobResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateJobResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateJobResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateJobResponse) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// Represents a job that can be assigned to [team members](entity:TeamMember). This object defines the
// job's title and tip eligibility. Compensation is defined in a [job assignment](entity:JobAssignment)
// in a team member's wage setting.
type Job struct {
	// **Read only** The unique Square-assigned ID of the job. If you need a job ID for an API request,
	// call [ListJobs](api-endpoint:Team-ListJobs) or use the ID returned when you created the job.
	// You can also get job IDs from a team member's wage setting.
	ID *string `json:"id,omitempty" url:"id,omitempty"`
	// The title of the job.
	Title *string `json:"title,omitempty" url:"title,omitempty"`
	// Indicates whether team members can earn tips for the job.
	IsTipEligible *bool `json:"is_tip_eligible,omitempty" url:"is_tip_eligible,omitempty"`
	// The timestamp when the job was created, in RFC 3339 format.
	CreatedAt *string `json:"created_at,omitempty" url:"created_at,omitempty"`
	// The timestamp when the job was last updated, in RFC 3339 format.
	UpdatedAt *string `json:"updated_at,omitempty" url:"updated_at,omitempty"`
	// **Read only** The current version of the job. Include this field in `UpdateJob` requests to enable
	// [optimistic concurrency](https://developer.squareup.com/docs/working-with-apis/optimistic-concurrency)
	// control and avoid overwrites from concurrent requests. Requests fail if the provided version doesn't
	// match the server version at the time of the request.
	Version *int `json:"version,omitempty" url:"version,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (j *Job) GetID() *string {
	if j == nil {
		return nil
	}
	return j.ID
}

func (j *Job) GetTitle() *string {
	if j == nil {
		return nil
	}
	return j.Title
}

func (j *Job) GetIsTipEligible() *bool {
	if j == nil {
		return nil
	}
	return j.IsTipEligible
}

func (j *Job) GetCreatedAt() *string {
	if j == nil {
		return nil
	}
	return j.CreatedAt
}

func (j *Job) GetUpdatedAt() *string {
	if j == nil {
		return nil
	}
	return j.UpdatedAt
}

func (j *Job) GetVersion() *int {
	if j == nil {
		return nil
	}
	return j.Version
}

func (j *Job) GetExtraProperties() map[string]interface{} {
	return j.extraProperties
}

func (j *Job) UnmarshalJSON(data []byte) error {
	type unmarshaler Job
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*j = Job(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *j)
	if err != nil {
		return err
	}
	j.extraProperties = extraProperties
	j.rawJSON = json.RawMessage(data)
	return nil
}

func (j *Job) String() string {
	if len(j.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(j.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(j); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", j)
}

// Represents a [ListJobs](api-endpoint:Team-ListJobs) response. Either `jobs` or `errors`
// is present in the response. If additional results are available, the `cursor` field is also present.
type ListJobsResponse struct {
	// The retrieved jobs. A single paged response contains up to 100 jobs.
	Jobs []*Job `json:"jobs,omitempty" url:"jobs,omitempty"`
	// An opaque cursor used to retrieve the next page of results. This field is present only
	// if the request succeeded and additional results are available. For more information, see
	// [Pagination](https://developer.squareup.com/docs/build-basics/common-api-patterns/pagination).
	Cursor *string `json:"cursor,omitempty" url:"cursor,omitempty"`
	// The errors that occurred during the request.
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListJobsResponse) GetJobs() []*Job {
	if l == nil {
		return nil
	}
	return l.Jobs
}

func (l *ListJobsResponse) GetCursor() *string {
	if l == nil {
		return nil
	}
	return l.Cursor
}

func (l *ListJobsResponse) GetErrors() []*Error {
	if l == nil {
		return nil
	}
	return l.Errors
}

func (l *ListJobsResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListJobsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListJobsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListJobsResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListJobsResponse) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

// Represents a [RetrieveJob](api-endpoint:Team-RetrieveJob) response. Either `job` or `errors`
// is present in the response.
type RetrieveJobResponse struct {
	// The retrieved job.
	Job *Job `json:"job,omitempty" url:"job,omitempty"`
	// The errors that occurred during the request.
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *RetrieveJobResponse) GetJob() *Job {
	if r == nil {
		return nil
	}
	return r.Job
}

func (r *RetrieveJobResponse) GetErrors() []*Error {
	if r == nil {
		return nil
	}
	return r.Errors
}

func (r *RetrieveJobResponse) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RetrieveJobResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler RetrieveJobResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RetrieveJobResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *RetrieveJobResponse) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

// Represents an [UpdateJob](api-endpoint:Team-UpdateJob) response. Either `job` or `errors`
// is present in the response.
type UpdateJobResponse struct {
	// The updated job.
	Job *Job `json:"job,omitempty" url:"job,omitempty"`
	// The errors that occurred during the request.
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UpdateJobResponse) GetJob() *Job {
	if u == nil {
		return nil
	}
	return u.Job
}

func (u *UpdateJobResponse) GetErrors() []*Error {
	if u == nil {
		return nil
	}
	return u.Errors
}

func (u *UpdateJobResponse) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdateJobResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdateJobResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdateJobResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateJobResponse) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}
