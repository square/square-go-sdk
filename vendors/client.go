// Code generated by Fern. DO NOT EDIT.

package vendors

import (
	context "context"
	v2 "github.com/square/square-go-sdk/v2"
	core "github.com/square/square-go-sdk/v2/core"
	internal "github.com/square/square-go-sdk/v2/internal"
	option "github.com/square/square-go-sdk/v2/option"
	http "net/http"
	os "os"
)

type Client struct {
	WithRawResponse *RawClient

	baseURL string
	caller  *internal.Caller
	header  http.Header
}

func NewClient(opts ...option.RequestOption) *Client {
	options := core.NewRequestOptions(opts...)
	if options.Token == "" {
		options.Token = os.Getenv("SQUARE_TOKEN")
	}
	if options.Version == "" {
		options.Version = os.Getenv("VERSION")
	}
	return &Client{
		WithRawResponse: NewRawClient(options),
		baseURL:         options.BaseURL,
		caller: internal.NewCaller(
			&internal.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
		header: options.ToHeader(),
	}
}

// Creates one or more [Vendor](entity:Vendor) objects to represent suppliers to a seller.
func (c *Client) BatchCreate(
	ctx context.Context,
	request *v2.BatchCreateVendorsRequest,
	opts ...option.RequestOption,
) (*v2.BatchCreateVendorsResponse, error) {
	response, err := c.WithRawResponse.BatchCreate(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Retrieves one or more vendors of specified [Vendor](entity:Vendor) IDs.
func (c *Client) BatchGet(
	ctx context.Context,
	request *v2.BatchGetVendorsRequest,
	opts ...option.RequestOption,
) (*v2.BatchGetVendorsResponse, error) {
	response, err := c.WithRawResponse.BatchGet(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Updates one or more of existing [Vendor](entity:Vendor) objects as suppliers to a seller.
func (c *Client) BatchUpdate(
	ctx context.Context,
	request *v2.BatchUpdateVendorsRequest,
	opts ...option.RequestOption,
) (*v2.BatchUpdateVendorsResponse, error) {
	response, err := c.WithRawResponse.BatchUpdate(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Creates a single [Vendor](entity:Vendor) object to represent a supplier to a seller.
func (c *Client) Create(
	ctx context.Context,
	request *v2.CreateVendorRequest,
	opts ...option.RequestOption,
) (*v2.CreateVendorResponse, error) {
	response, err := c.WithRawResponse.Create(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Searches for vendors using a filter against supported [Vendor](entity:Vendor) properties and a supported sorter.
func (c *Client) Search(
	ctx context.Context,
	request *v2.SearchVendorsRequest,
	opts ...option.RequestOption,
) (*v2.SearchVendorsResponse, error) {
	response, err := c.WithRawResponse.Search(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Retrieves the vendor of a specified [Vendor](entity:Vendor) ID.
func (c *Client) Get(
	ctx context.Context,
	request *v2.GetVendorsRequest,
	opts ...option.RequestOption,
) (*v2.GetVendorResponse, error) {
	response, err := c.WithRawResponse.Get(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Updates an existing [Vendor](entity:Vendor) object as a supplier to a seller.
func (c *Client) Update(
	ctx context.Context,
	request *v2.UpdateVendorsRequest,
	opts ...option.RequestOption,
) (*v2.UpdateVendorResponse, error) {
	response, err := c.WithRawResponse.Update(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}
