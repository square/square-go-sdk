// Code generated by Fern. DO NOT EDIT.

package customattributes

import (
	context "context"
	v2 "github.com/square/square-go-sdk/v2"
	bookings "github.com/square/square-go-sdk/v2/bookings"
	core "github.com/square/square-go-sdk/v2/core"
	internal "github.com/square/square-go-sdk/v2/internal"
	option "github.com/square/square-go-sdk/v2/option"
	http "net/http"
	os "os"
)

type Client struct {
	WithRawResponse *RawClient

	baseURL string
	caller  *internal.Caller
	header  http.Header
}

func NewClient(opts ...option.RequestOption) *Client {
	options := core.NewRequestOptions(opts...)
	if options.Token == "" {
		options.Token = os.Getenv("SQUARE_TOKEN")
	}
	if options.Version == "" {
		options.Version = os.Getenv("VERSION")
	}
	return &Client{
		WithRawResponse: NewRawClient(options),
		baseURL:         options.BaseURL,
		caller: internal.NewCaller(
			&internal.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
		header: options.ToHeader(),
	}
}

// Bulk deletes bookings custom attributes.
//
// To call this endpoint with buyer-level permissions, set `APPOINTMENTS_WRITE` for the OAuth scope.
// To call this endpoint with seller-level permissions, set `APPOINTMENTS_ALL_WRITE` and `APPOINTMENTS_WRITE` for the OAuth scope.
//
// For calls to this endpoint with seller-level permissions to succeed, the seller must have subscribed to *Appointments Plus*
// or *Appointments Premium*.
func (c *Client) BatchDelete(
	ctx context.Context,
	request *bookings.BulkDeleteBookingCustomAttributesRequest,
	opts ...option.RequestOption,
) (*v2.BulkDeleteBookingCustomAttributesResponse, error) {
	response, err := c.WithRawResponse.BatchDelete(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Bulk upserts bookings custom attributes.
//
// To call this endpoint with buyer-level permissions, set `APPOINTMENTS_WRITE` for the OAuth scope.
// To call this endpoint with seller-level permissions, set `APPOINTMENTS_ALL_WRITE` and `APPOINTMENTS_WRITE` for the OAuth scope.
//
// For calls to this endpoint with seller-level permissions to succeed, the seller must have subscribed to *Appointments Plus*
// or *Appointments Premium*.
func (c *Client) BatchUpsert(
	ctx context.Context,
	request *bookings.BulkUpsertBookingCustomAttributesRequest,
	opts ...option.RequestOption,
) (*v2.BulkUpsertBookingCustomAttributesResponse, error) {
	response, err := c.WithRawResponse.BatchUpsert(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Lists a booking's custom attributes.
//
// To call this endpoint with buyer-level permissions, set `APPOINTMENTS_READ` for the OAuth scope.
// To call this endpoint with seller-level permissions, set `APPOINTMENTS_ALL_READ` and `APPOINTMENTS_READ` for the OAuth scope.
func (c *Client) List(
	ctx context.Context,
	request *bookings.ListCustomAttributesRequest,
	opts ...option.RequestOption,
) (*core.Page[*v2.CustomAttribute], error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://connect.squareup.com",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/v2/bookings/%v/custom-attributes",
		request.BookingID,
	)
	queryParams, err := internal.QueryValues(request)
	if err != nil {
		return nil, err
	}
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)
	prepareCall := func(pageRequest *internal.PageRequest[*string]) *internal.CallParams {
		if pageRequest.Cursor != nil {
			queryParams.Set("cursor", *pageRequest.Cursor)
		}
		nextURL := endpointURL
		if len(queryParams) > 0 {
			nextURL += "?" + queryParams.Encode()
		}
		return &internal.CallParams{
			URL:             nextURL,
			Method:          http.MethodGet,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        pageRequest.Response,
		}
	}
	readPageResponse := func(response *v2.ListBookingCustomAttributesResponse) *internal.PageResponse[*string, *v2.CustomAttribute] {
		var zeroValue *string
		next := response.GetCursor()
		results := response.GetCustomAttributes()
		return &internal.PageResponse[*string, *v2.CustomAttribute]{
			Next:    next,
			Results: results,
			Done:    next == zeroValue,
		}
	}
	pager := internal.NewCursorPager(
		c.caller,
		prepareCall,
		readPageResponse,
	)
	return pager.GetPage(ctx, request.Cursor)
}

// Retrieves a bookings custom attribute.
//
// To call this endpoint with buyer-level permissions, set `APPOINTMENTS_READ` for the OAuth scope.
// To call this endpoint with seller-level permissions, set `APPOINTMENTS_ALL_READ` and `APPOINTMENTS_READ` for the OAuth scope.
func (c *Client) Get(
	ctx context.Context,
	request *bookings.GetCustomAttributesRequest,
	opts ...option.RequestOption,
) (*v2.RetrieveBookingCustomAttributeResponse, error) {
	response, err := c.WithRawResponse.Get(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Upserts a bookings custom attribute.
//
// To call this endpoint with buyer-level permissions, set `APPOINTMENTS_WRITE` for the OAuth scope.
// To call this endpoint with seller-level permissions, set `APPOINTMENTS_ALL_WRITE` and `APPOINTMENTS_WRITE` for the OAuth scope.
//
// For calls to this endpoint with seller-level permissions to succeed, the seller must have subscribed to *Appointments Plus*
// or *Appointments Premium*.
func (c *Client) Upsert(
	ctx context.Context,
	request *bookings.UpsertBookingCustomAttributeRequest,
	opts ...option.RequestOption,
) (*v2.UpsertBookingCustomAttributeResponse, error) {
	response, err := c.WithRawResponse.Upsert(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Deletes a bookings custom attribute.
//
// To call this endpoint with buyer-level permissions, set `APPOINTMENTS_WRITE` for the OAuth scope.
// To call this endpoint with seller-level permissions, set `APPOINTMENTS_ALL_WRITE` and `APPOINTMENTS_WRITE` for the OAuth scope.
//
// For calls to this endpoint with seller-level permissions to succeed, the seller must have subscribed to *Appointments Plus*
// or *Appointments Premium*.
func (c *Client) Delete(
	ctx context.Context,
	request *bookings.DeleteCustomAttributesRequest,
	opts ...option.RequestOption,
) (*v2.DeleteBookingCustomAttributeResponse, error) {
	response, err := c.WithRawResponse.Delete(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}
