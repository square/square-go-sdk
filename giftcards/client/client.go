// Code generated by Fern. DO NOT EDIT.

package client

import (
	context "context"
	v2 "github.com/square/square-go-sdk/v2"
	core "github.com/square/square-go-sdk/v2/core"
	activities "github.com/square/square-go-sdk/v2/giftcards/activities"
	internal "github.com/square/square-go-sdk/v2/internal"
	option "github.com/square/square-go-sdk/v2/option"
	http "net/http"
	os "os"
)

type Client struct {
	WithRawResponse *RawClient
	Activities      *activities.Client

	baseURL string
	caller  *internal.Caller
	header  http.Header
}

func NewClient(opts ...option.RequestOption) *Client {
	options := core.NewRequestOptions(opts...)
	if options.Token == "" {
		options.Token = os.Getenv("SQUARE_TOKEN")
	}
	if options.Version == "" {
		options.Version = os.Getenv("VERSION")
	}
	return &Client{
		Activities:      activities.NewClient(opts...),
		WithRawResponse: NewRawClient(options),
		baseURL:         options.BaseURL,
		caller: internal.NewCaller(
			&internal.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
		header: options.ToHeader(),
	}
}

// Lists all gift cards. You can specify optional filters to retrieve
// a subset of the gift cards. Results are sorted by `created_at` in ascending order.
func (c *Client) List(
	ctx context.Context,
	request *v2.ListGiftCardsRequest,
	opts ...option.RequestOption,
) (*core.Page[*v2.GiftCard], error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://connect.squareup.com",
	)
	endpointURL := baseURL + "/v2/gift-cards"
	queryParams, err := internal.QueryValues(request)
	if err != nil {
		return nil, err
	}
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)
	prepareCall := func(pageRequest *internal.PageRequest[*string]) *internal.CallParams {
		if pageRequest.Cursor != nil {
			queryParams.Set("cursor", *pageRequest.Cursor)
		}
		nextURL := endpointURL
		if len(queryParams) > 0 {
			nextURL += "?" + queryParams.Encode()
		}
		return &internal.CallParams{
			URL:             nextURL,
			Method:          http.MethodGet,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        pageRequest.Response,
		}
	}
	readPageResponse := func(response *v2.ListGiftCardsResponse) *internal.PageResponse[*string, *v2.GiftCard] {
		var zeroValue *string
		next := response.GetCursor()
		results := response.GetGiftCards()
		return &internal.PageResponse[*string, *v2.GiftCard]{
			Next:    next,
			Results: results,
			Done:    next == zeroValue,
		}
	}
	pager := internal.NewCursorPager(
		c.caller,
		prepareCall,
		readPageResponse,
	)
	return pager.GetPage(ctx, request.Cursor)
}

// Creates a digital gift card or registers a physical (plastic) gift card. The resulting gift card
// has a `PENDING` state. To activate a gift card so that it can be redeemed for purchases, call
// [CreateGiftCardActivity](api-endpoint:GiftCardActivities-CreateGiftCardActivity) and create an `ACTIVATE`
// activity with the initial balance. Alternatively, you can use [RefundPayment](api-endpoint:Refunds-RefundPayment)
// to refund a payment to the new gift card.
func (c *Client) Create(
	ctx context.Context,
	request *v2.CreateGiftCardRequest,
	opts ...option.RequestOption,
) (*v2.CreateGiftCardResponse, error) {
	response, err := c.WithRawResponse.Create(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Retrieves a gift card using the gift card account number (GAN).
func (c *Client) GetFromGan(
	ctx context.Context,
	request *v2.GetGiftCardFromGanRequest,
	opts ...option.RequestOption,
) (*v2.GetGiftCardFromGanResponse, error) {
	response, err := c.WithRawResponse.GetFromGan(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Retrieves a gift card using a secure payment token that represents the gift card.
func (c *Client) GetFromNonce(
	ctx context.Context,
	request *v2.GetGiftCardFromNonceRequest,
	opts ...option.RequestOption,
) (*v2.GetGiftCardFromNonceResponse, error) {
	response, err := c.WithRawResponse.GetFromNonce(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Links a customer to a gift card, which is also referred to as adding a card on file.
func (c *Client) LinkCustomer(
	ctx context.Context,
	request *v2.LinkCustomerToGiftCardRequest,
	opts ...option.RequestOption,
) (*v2.LinkCustomerToGiftCardResponse, error) {
	response, err := c.WithRawResponse.LinkCustomer(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Unlinks a customer from a gift card, which is also referred to as removing a card on file.
func (c *Client) UnlinkCustomer(
	ctx context.Context,
	request *v2.UnlinkCustomerFromGiftCardRequest,
	opts ...option.RequestOption,
) (*v2.UnlinkCustomerFromGiftCardResponse, error) {
	response, err := c.WithRawResponse.UnlinkCustomer(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Retrieves a gift card using the gift card ID.
func (c *Client) Get(
	ctx context.Context,
	request *v2.GetGiftCardsRequest,
	opts ...option.RequestOption,
) (*v2.GetGiftCardResponse, error) {
	response, err := c.WithRawResponse.Get(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}
