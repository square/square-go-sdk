// This file was auto-generated by Fern from our API Definition.

package activities

import (
	context "context"
	fmt "fmt"
	v40 "github.com/square/square-go-sdk/v40"
	core "github.com/square/square-go-sdk/v40/core"
	giftcards "github.com/square/square-go-sdk/v40/giftcards"
	internal "github.com/square/square-go-sdk/v40/internal"
	option "github.com/square/square-go-sdk/v40/option"
	http "net/http"
	os "os"
)

type Client struct {
	baseURL string
	caller  *internal.Caller
	header  http.Header
}

func NewClient(opts ...option.RequestOption) *Client {
	options := core.NewRequestOptions(opts...)
	if options.Token == "" {
		options.Token = os.Getenv("SQUARE_TOKEN")
	}
	if options.Version == "" {
		options.Version = os.Getenv("VERSION")
	}
	return &Client{
		baseURL: options.BaseURL,
		caller: internal.NewCaller(
			&internal.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
		header: options.ToHeader(),
	}
}

// Lists gift card activities. By default, you get gift card activities for all
// gift cards in the seller's account. You can optionally specify query parameters to
// filter the list. For example, you can get a list of gift card activities for a gift card,
// for all gift cards in a specific region, or for activities within a time window.
func (c *Client) List(
	ctx context.Context,
	request *giftcards.ActivitiesListRequest,
	opts ...option.RequestOption,
) (*core.Page[*v40.GiftCardActivity], error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://connect.squareup.com",
	)
	endpointURL := baseURL + "/v2/gift-cards/activities"
	queryParams, err := internal.QueryValues(request)
	if err != nil {
		return nil, err
	}
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)

	prepareCall := func(pageRequest *internal.PageRequest[*string]) *internal.CallParams {
		if pageRequest.Cursor != nil {
			queryParams.Set("cursor", fmt.Sprintf("%v", *pageRequest.Cursor))
		}
		nextURL := endpointURL
		if len(queryParams) > 0 {
			nextURL += "?" + queryParams.Encode()
		}
		return &internal.CallParams{
			URL:             nextURL,
			Method:          http.MethodGet,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        pageRequest.Response,
		}
	}
	readPageResponse := func(response *v40.ListGiftCardActivitiesResponse) *internal.PageResponse[*string, *v40.GiftCardActivity] {
		next := response.Cursor
		results := response.GiftCardActivities
		return &internal.PageResponse[*string, *v40.GiftCardActivity]{
			Next:    next,
			Results: results,
		}
	}
	pager := internal.NewCursorPager(
		c.caller,
		prepareCall,
		readPageResponse,
	)
	return pager.GetPage(ctx, request.Cursor)
}

// Creates a gift card activity to manage the balance or state of a [gift card](entity:GiftCard).
// For example, create an `ACTIVATE` activity to activate a gift card with an initial balance before first use.
func (c *Client) Create(
	ctx context.Context,
	request *giftcards.CreateGiftCardActivityRequest,
	opts ...option.RequestOption,
) (*v40.CreateGiftCardActivityResponse, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://connect.squareup.com",
	)
	endpointURL := baseURL + "/v2/gift-cards/activities"
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)
	headers.Set("Content-Type", "application/json")

	var response *v40.CreateGiftCardActivityResponse
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPost,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         request,
			Response:        &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}
