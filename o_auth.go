// This file was auto-generated by Fern from our API Definition.

package square

type OAuthAuthorizeRequest struct {
	// The Square-issued ID for your application, which is available on
	// the **OAuth** page for your application in the [Developer Dashboard](https://developer.squareup.com/apps).
	ClientID string `json:"-" url:"client_id"`
	// A space-separated list of the permissions that the application is requesting.
	// Default: "`MERCHANT_PROFILE_READ PAYMENTS_READ SETTLEMENTS_READ BANK_ACCOUNTS_READ`"
	Scope *OAuthPermission `json:"-" url:"scope,omitempty"`
	// The locale to present the permission request form in. Square detects
	// the appropriate locale automatically. Only provide this value if the
	// application can definitively determine the preferred locale.
	//
	// Currently supported values: `en-IE`, `en-US`, `en-CA`, `es-US`, `fr-CA`, and
	// `ja-JP`.
	Locale *string `json:"-" url:"locale,omitempty"`
	// If `false`, the user must log in to their Square account to
	// view the Permission Request form, even if they already have a valid user
	// session. This value has no effect in the Square Sandbox.
	// Default: `true`
	Session *bool `json:"-" url:"session,omitempty"`
	// When provided, `state` is passed to the configured redirect URL after
	// the Permission Request form is submitted. You can include `state` and verify
	// its value to help protect against cross-site request forgery.
	State *string `json:"-" url:"state,omitempty"`
	// When provided, the OAuth flow uses PKCE to authorize. The `code_challenge` will be associated
	// with the authorization_code and a `code_verifier` will need to passed in to obtain the access token.
	CodeChallenge *string `json:"-" url:"code_challenge,omitempty"`
	// The redirect URL assigned on the **OAuth** page for your application in the [Developer Dashboard](https://developer.squareup.com/apps).
	// This field is required to use a dynamic port at runtime (PKCE only). To use a dynamic port, use the literal "&lt;port&gt;"
	// as a placeholder for a port in the **Redirect URL** box in the [Developer Dashboard](https://developer.squareup.com/apps),
	// for example, "http://localhost:&lt;port&gt;". When you call the `Authorize` endpoint from an application, pass in the actual
	// port in this field. For example: `https://connect.squareup.com/oauth2/authorize?client_id={YOUR_APP_ID}&scope=MERCHANT_PROFILE_READ&redirect_uri=http://localhost:8000`
	RedirectURI *string `json:"-" url:"redirect_uri,omitempty"`
}

type ObtainTokenRequest struct {
	// The Square-issued ID of your application, which is available on the **OAuth** page in the
	// [Developer Dashboard](https://developer.squareup.com/apps).
	ClientID string `json:"client_id" url:"-"`
	// The Square-issued application secret for your application, which is available on the **OAuth** page
	// in the [Developer Dashboard](https://developer.squareup.com/apps). This parameter is only required when
	// you're not using the [OAuth PKCE (Proof Key for Code Exchange) flow](https://developer.squareup.com/docs/oauth-api/overview#pkce-flow).
	// The PKCE flow requires a `code_verifier` instead of a `client_secret` when `grant_type` is set to `authorization_code`.
	// If `grant_type` is set to `refresh_token` and the `refresh_token` is obtained uaing PKCE, the PKCE flow only requires `client_id`,
	// `grant_type`, and `refresh_token`.
	ClientSecret *string `json:"client_secret,omitempty" url:"-"`
	// The authorization code to exchange.
	// This code is required if `grant_type` is set to `authorization_code` to indicate that
	// the application wants to exchange an authorization code for an OAuth access token.
	Code *string `json:"code,omitempty" url:"-"`
	// The redirect URL assigned on the **OAuth** page for your application in the [Developer Dashboard](https://developer.squareup.com/apps).
	RedirectURI *string `json:"redirect_uri,omitempty" url:"-"`
	// Specifies the method to request an OAuth access token.
	// Valid values are `authorization_code`, `refresh_token`, and `migration_token`.
	GrantType string `json:"grant_type" url:"-"`
	// A valid refresh token for generating a new OAuth access token.
	//
	// A valid refresh token is required if `grant_type` is set to `refresh_token`
	// to indicate that the application wants a replacement for an expired OAuth access token.
	RefreshToken *string `json:"refresh_token,omitempty" url:"-"`
	// A legacy OAuth access token obtained using a Connect API version prior
	// to 2019-03-13. This parameter is required if `grant_type` is set to
	// `migration_token` to indicate that the application wants to get a replacement
	// OAuth access token. The response also returns a refresh token.
	// For more information, see [Migrate to Using Refresh Tokens](https://developer.squareup.com/docs/oauth-api/migrate-to-refresh-tokens).
	MigrationToken *string `json:"migration_token,omitempty" url:"-"`
	// A JSON list of strings representing the permissions that the application is requesting.
	// For example, "`["MERCHANT_PROFILE_READ","PAYMENTS_READ","BANK_ACCOUNTS_READ"]`".
	//
	// The access token returned in the response is granted the permissions
	// that comprise the intersection between the requested list of permissions and those
	// that belong to the provided refresh token.
	Scopes []string `json:"scopes,omitempty" url:"-"`
	// A Boolean indicating a request for a short-lived access token.
	//
	// The short-lived access token returned in the response expires in 24 hours.
	ShortLived *bool `json:"short_lived,omitempty" url:"-"`
	// Must be provided when using the PKCE OAuth flow if `grant_type` is set to `authorization_code`. The `code_verifier` is used to verify against the
	// `code_challenge` associated with the `authorization_code`.
	CodeVerifier *string `json:"code_verifier,omitempty" url:"-"`
}

type RenewTokenRequest struct {
	// The token you want to renew.
	AccessToken *string `json:"access_token,omitempty" url:"-"`
}

type RevokeTokenRequest struct {
	// The Square-issued ID for your application, which is available on the **OAuth** page in the
	// [Developer Dashboard](https://developer.squareup.com/apps).
	ClientID *string `json:"client_id,omitempty" url:"-"`
	// The access token of the merchant whose token you want to revoke.
	// Do not provide a value for `merchant_id` if you provide this parameter.
	AccessToken *string `json:"access_token,omitempty" url:"-"`
	// The ID of the merchant whose token you want to revoke.
	// Do not provide a value for `access_token` if you provide this parameter.
	MerchantID *string `json:"merchant_id,omitempty" url:"-"`
	// If `true`, terminate the given single access token, but do not
	// terminate the entire authorization.
	// Default: `false`
	RevokeOnlyAccessToken *bool `json:"revoke_only_access_token,omitempty" url:"-"`
}
