// This file was auto-generated by Fern from our API Definition.

package square

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/square/square-go-sdk/internal"
)

type ObtainTokenRequest struct {
	// The Square-issued ID of your application, which is available as the **Application ID**
	// on the **OAuth** page in the [Developer Console](https://developer.squareup.com/apps).
	//
	// Required for the code flow and PKCE flow for any grant type.
	ClientID string `json:"client_id" url:"-"`
	// The secret key for your application, which is available as the **Application secret**
	// on the **OAuth** page in the [Developer Console](https://developer.squareup.com/apps).
	//
	// Required for the code flow for any grant type. Don't confuse your client secret with your
	// personal access token.
	ClientSecret *string `json:"client_secret,omitempty" url:"-"`
	// The authorization code to exchange for an OAuth access token. This is the `code`
	// value that Square sent to your redirect URL in the authorization response.
	//
	// Required for the code flow and PKCE flow if `grant_type` is `authorization_code`.
	Code *string `json:"code,omitempty" url:"-"`
	// The redirect URL for your application, which you registered as the **Redirect URL**
	// on the **OAuth** page in the [Developer Console](https://developer.squareup.com/apps).
	//
	// Required for the code flow and PKCE flow if `grant_type` is `authorization_code` and
	// you provided the `redirect_uri` parameter in your authorization URL.
	RedirectURI *string `json:"redirect_uri,omitempty" url:"-"`
	// The method used to obtain an OAuth access token. The request must include the
	// credential that corresponds to the specified grant type. Valid values are:
	// - `authorization_code` - Requires the `code` field.
	// - `refresh_token` - Requires the `refresh_token` field.
	// - `migration_token` - LEGACY for access tokens obtained using a Square API version prior
	// to 2019-03-13. Requires the `migration_token` field.
	GrantType string `json:"grant_type" url:"-"`
	// A valid refresh token used to generate a new OAuth access token. This is a
	// refresh token that was returned in a previous `ObtainToken` response.
	//
	// Required for the code flow and PKCE flow if `grant_type` is `refresh_token`.
	RefreshToken *string `json:"refresh_token,omitempty" url:"-"`
	// __LEGACY__ A valid access token (obtained using a Square API version prior to 2019-03-13)
	// used to generate a new OAuth access token.
	//
	// Required if `grant_type` is `migration_token`. For more information, see
	// [Migrate to Using Refresh Tokens](https://developer.squareup.com/docs/oauth-api/migrate-to-refresh-tokens).
	MigrationToken *string `json:"migration_token,omitempty" url:"-"`
	// The list of permissions that are explicitly requested for the access token.
	// For example, ["MERCHANT_PROFILE_READ","PAYMENTS_READ","BANK_ACCOUNTS_READ"].
	//
	// The returned access token is limited to the permissions that are the intersection
	// of these requested permissions and those authorized by the provided `refresh_token`.
	//
	// Optional for the code flow and PKCE flow if `grant_type` is `refresh_token`.
	Scopes []string `json:"scopes,omitempty" url:"-"`
	// Indicates whether the returned access token should expire in 24 hours.
	//
	// Optional for the code flow and PKCE flow for any grant type. The default value is `false`.
	ShortLived *bool `json:"short_lived,omitempty" url:"-"`
	// The secret your application generated for the authorization request used to
	// obtain the authorization code. This is the source of the `code_challenge` hash you
	// provided in your authorization URL.
	//
	// Required for the PKCE flow if `grant_type` is `authorization_code`.
	CodeVerifier *string `json:"code_verifier,omitempty" url:"-"`
}

type RevokeTokenRequest struct {
	// The Square-issued ID for your application, which is available on the **OAuth** page in the
	// [Developer Dashboard](https://developer.squareup.com/apps).
	ClientID *string `json:"client_id,omitempty" url:"-"`
	// The access token of the merchant whose token you want to revoke.
	// Do not provide a value for `merchant_id` if you provide this parameter.
	AccessToken *string `json:"access_token,omitempty" url:"-"`
	// The ID of the merchant whose token you want to revoke.
	// Do not provide a value for `access_token` if you provide this parameter.
	MerchantID *string `json:"merchant_id,omitempty" url:"-"`
	// If `true`, terminate the given single access token, but do not
	// terminate the entire authorization.
	// Default: `false`
	RevokeOnlyAccessToken *bool `json:"revoke_only_access_token,omitempty" url:"-"`
}

// Represents an [ObtainToken](api-endpoint:OAuth-ObtainToken) response.
type ObtainTokenResponse struct {
	// An OAuth access token used to authorize Square API requests on behalf of the seller.
	// Include this token as a bearer token in the `Authorization` header of your API requests.
	//
	// OAuth access tokens expire in 30 days (except `short_lived` access tokens). You should call
	// `ObtainToken` and provide the returned `refresh_token` to get a new access token well before
	// the current one expires. For more information, see [OAuth API: Walkthrough](https://developer.squareup.com/docs/oauth-api/walkthrough).
	AccessToken *string `json:"access_token,omitempty" url:"access_token,omitempty"`
	// The type of access token. This value is always `bearer`.
	TokenType *string `json:"token_type,omitempty" url:"token_type,omitempty"`
	// The timestamp of when the `access_token` expires, in [ISO 8601](http://www.iso.org/iso/home/standards/iso8601.htm) format.
	ExpiresAt *string `json:"expires_at,omitempty" url:"expires_at,omitempty"`
	// The ID of the authorizing [merchant](entity:Merchant) (seller), which represents a business.
	MerchantID *string `json:"merchant_id,omitempty" url:"merchant_id,omitempty"`
	// __LEGACY__ The ID of merchant's subscription.
	// The ID is only present if the merchant signed up for a subscription plan during authorization.
	SubscriptionID *string `json:"subscription_id,omitempty" url:"subscription_id,omitempty"`
	// __LEGACY__ The ID of the subscription plan the merchant signed
	// up for. The ID is only present if the merchant signed up for a subscription plan during
	// authorization.
	PlanID *string `json:"plan_id,omitempty" url:"plan_id,omitempty"`
	// The OpenID token that belongs to this person. This token is only present if the
	// `OPENID` scope is included in the authorization request.
	//
	// Deprecated at version 2021-09-15. Square doesn't support OpenID or other single sign-on (SSO)
	// protocols on top of OAuth.
	IDToken *string `json:"id_token,omitempty" url:"id_token,omitempty"`
	// A refresh token that can be used in an `ObtainToken` request to generate a new access token.
	//
	// With the code flow:
	// - For the `authorization_code` grant type, the refresh token is multi-use and never expires.
	// - For the `refresh_token` grant type, the response returns the same refresh token.
	//
	// With the PKCE flow:
	// - For the `authorization_code` grant type, the refresh token is single-use and expires in 90 days.
	// - For the `refresh_token` grant type, the refresh token is a new single-use refresh token that expires in 90 days.
	//
	// For more information, see [Refresh, Revoke, and Limit the Scope of OAuth Tokens](https://developer.squareup.com/docs/oauth-api/refresh-revoke-limit-scope).
	RefreshToken *string `json:"refresh_token,omitempty" url:"refresh_token,omitempty"`
	// Indicates whether the access_token is short lived. If `true`, the access token expires
	// in 24 hours. If `false`, the access token expires in 30 days.
	ShortLived *bool `json:"short_lived,omitempty" url:"short_lived,omitempty"`
	// Any errors that occurred during the request.
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`
	// The timestamp of when the `refresh_token` expires, in [ISO 8601](http://www.iso.org/iso/home/standards/iso8601.htm)
	// format.
	//
	// This field is only returned for the PKCE flow.
	RefreshTokenExpiresAt *string `json:"refresh_token_expires_at,omitempty" url:"refresh_token_expires_at,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (o *ObtainTokenResponse) GetAccessToken() *string {
	if o == nil {
		return nil
	}
	return o.AccessToken
}

func (o *ObtainTokenResponse) GetTokenType() *string {
	if o == nil {
		return nil
	}
	return o.TokenType
}

func (o *ObtainTokenResponse) GetExpiresAt() *string {
	if o == nil {
		return nil
	}
	return o.ExpiresAt
}

func (o *ObtainTokenResponse) GetMerchantID() *string {
	if o == nil {
		return nil
	}
	return o.MerchantID
}

func (o *ObtainTokenResponse) GetSubscriptionID() *string {
	if o == nil {
		return nil
	}
	return o.SubscriptionID
}

func (o *ObtainTokenResponse) GetPlanID() *string {
	if o == nil {
		return nil
	}
	return o.PlanID
}

func (o *ObtainTokenResponse) GetIDToken() *string {
	if o == nil {
		return nil
	}
	return o.IDToken
}

func (o *ObtainTokenResponse) GetRefreshToken() *string {
	if o == nil {
		return nil
	}
	return o.RefreshToken
}

func (o *ObtainTokenResponse) GetShortLived() *bool {
	if o == nil {
		return nil
	}
	return o.ShortLived
}

func (o *ObtainTokenResponse) GetErrors() []*Error {
	if o == nil {
		return nil
	}
	return o.Errors
}

func (o *ObtainTokenResponse) GetRefreshTokenExpiresAt() *string {
	if o == nil {
		return nil
	}
	return o.RefreshTokenExpiresAt
}

func (o *ObtainTokenResponse) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *ObtainTokenResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ObtainTokenResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = ObtainTokenResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties
	o.rawJSON = json.RawMessage(data)
	return nil
}

func (o *ObtainTokenResponse) String() string {
	if len(o.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(o.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

// Defines the fields that are included in the response body of
// a request to the `RetrieveTokenStatus` endpoint.
type RetrieveTokenStatusResponse struct {
	// The list of scopes associated with an access token.
	Scopes []string `json:"scopes,omitempty" url:"scopes,omitempty"`
	// The date and time when the `access_token` expires, in RFC 3339 format. Empty if the token never expires.
	ExpiresAt *string `json:"expires_at,omitempty" url:"expires_at,omitempty"`
	// The Square-issued application ID associated with the access token. This is the same application ID used to obtain the token.
	ClientID *string `json:"client_id,omitempty" url:"client_id,omitempty"`
	// The ID of the authorizing merchant's business.
	MerchantID *string `json:"merchant_id,omitempty" url:"merchant_id,omitempty"`
	// Any errors that occurred during the request.
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *RetrieveTokenStatusResponse) GetScopes() []string {
	if r == nil {
		return nil
	}
	return r.Scopes
}

func (r *RetrieveTokenStatusResponse) GetExpiresAt() *string {
	if r == nil {
		return nil
	}
	return r.ExpiresAt
}

func (r *RetrieveTokenStatusResponse) GetClientID() *string {
	if r == nil {
		return nil
	}
	return r.ClientID
}

func (r *RetrieveTokenStatusResponse) GetMerchantID() *string {
	if r == nil {
		return nil
	}
	return r.MerchantID
}

func (r *RetrieveTokenStatusResponse) GetErrors() []*Error {
	if r == nil {
		return nil
	}
	return r.Errors
}

func (r *RetrieveTokenStatusResponse) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RetrieveTokenStatusResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler RetrieveTokenStatusResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RetrieveTokenStatusResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *RetrieveTokenStatusResponse) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RevokeTokenResponse struct {
	// If the request is successful, this is `true`.
	Success *bool `json:"success,omitempty" url:"success,omitempty"`
	// Any errors that occurred during the request.
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *RevokeTokenResponse) GetSuccess() *bool {
	if r == nil {
		return nil
	}
	return r.Success
}

func (r *RevokeTokenResponse) GetErrors() []*Error {
	if r == nil {
		return nil
	}
	return r.Errors
}

func (r *RevokeTokenResponse) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RevokeTokenResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler RevokeTokenResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RevokeTokenResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *RevokeTokenResponse) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}
