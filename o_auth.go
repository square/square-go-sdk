// This file was auto-generated by Fern from our API Definition.

package square

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/square/square-go-sdk/v2/internal"
)

type ObtainTokenRequest struct {
	// The Square-issued ID of your application, which is available on the **OAuth** page in the
	// [Developer Dashboard](https://developer.squareup.com/apps).
	ClientID string `json:"client_id" url:"-"`
	// The Square-issued application secret for your application, which is available on the **OAuth** page
	// in the [Developer Dashboard](https://developer.squareup.com/apps). This parameter is only required when
	// you're not using the [OAuth PKCE (Proof Key for Code Exchange) flow](https://developer.squareup.com/docs/oauth-api/overview#pkce-flow).
	// The PKCE flow requires a `code_verifier` instead of a `client_secret` when `grant_type` is set to `authorization_code`.
	// If `grant_type` is set to `refresh_token` and the `refresh_token` is obtained uaing PKCE, the PKCE flow only requires `client_id`,
	// `grant_type`, and `refresh_token`.
	ClientSecret *string `json:"client_secret,omitempty" url:"-"`
	// The authorization code to exchange.
	// This code is required if `grant_type` is set to `authorization_code` to indicate that
	// the application wants to exchange an authorization code for an OAuth access token.
	Code *string `json:"code,omitempty" url:"-"`
	// The redirect URL assigned on the **OAuth** page for your application in the [Developer Dashboard](https://developer.squareup.com/apps).
	RedirectURI *string `json:"redirect_uri,omitempty" url:"-"`
	// Specifies the method to request an OAuth access token.
	// Valid values are `authorization_code`, `refresh_token`, and `migration_token`.
	GrantType string `json:"grant_type" url:"-"`
	// A valid refresh token for generating a new OAuth access token.
	//
	// A valid refresh token is required if `grant_type` is set to `refresh_token`
	// to indicate that the application wants a replacement for an expired OAuth access token.
	RefreshToken *string `json:"refresh_token,omitempty" url:"-"`
	// A legacy OAuth access token obtained using a Connect API version prior
	// to 2019-03-13. This parameter is required if `grant_type` is set to
	// `migration_token` to indicate that the application wants to get a replacement
	// OAuth access token. The response also returns a refresh token.
	// For more information, see [Migrate to Using Refresh Tokens](https://developer.squareup.com/docs/oauth-api/migrate-to-refresh-tokens).
	MigrationToken *string `json:"migration_token,omitempty" url:"-"`
	// A JSON list of strings representing the permissions that the application is requesting.
	// For example, "`["MERCHANT_PROFILE_READ","PAYMENTS_READ","BANK_ACCOUNTS_READ"]`".
	//
	// The access token returned in the response is granted the permissions
	// that comprise the intersection between the requested list of permissions and those
	// that belong to the provided refresh token.
	Scopes []string `json:"scopes,omitempty" url:"-"`
	// A Boolean indicating a request for a short-lived access token.
	//
	// The short-lived access token returned in the response expires in 24 hours.
	ShortLived *bool `json:"short_lived,omitempty" url:"-"`
	// Must be provided when using the PKCE OAuth flow if `grant_type` is set to `authorization_code`. The `code_verifier` is used to verify against the
	// `code_challenge` associated with the `authorization_code`.
	CodeVerifier *string `json:"code_verifier,omitempty" url:"-"`
}

type RevokeTokenRequest struct {
	// The Square-issued ID for your application, which is available on the **OAuth** page in the
	// [Developer Dashboard](https://developer.squareup.com/apps).
	ClientID *string `json:"client_id,omitempty" url:"-"`
	// The access token of the merchant whose token you want to revoke.
	// Do not provide a value for `merchant_id` if you provide this parameter.
	AccessToken *string `json:"access_token,omitempty" url:"-"`
	// The ID of the merchant whose token you want to revoke.
	// Do not provide a value for `access_token` if you provide this parameter.
	MerchantID *string `json:"merchant_id,omitempty" url:"-"`
	// If `true`, terminate the given single access token, but do not
	// terminate the entire authorization.
	// Default: `false`
	RevokeOnlyAccessToken *bool `json:"revoke_only_access_token,omitempty" url:"-"`
}

type ObtainTokenResponse struct {
	// A valid OAuth access token.
	// Provide the access token in a header with every request to Connect API
	// endpoints. For more information, see [OAuth API: Walkthrough](https://developer.squareup.com/docs/oauth-api/walkthrough).
	AccessToken *string `json:"access_token,omitempty" url:"access_token,omitempty"`
	// This value is always _bearer_.
	TokenType *string `json:"token_type,omitempty" url:"token_type,omitempty"`
	// The date when the `access_token` expires, in [ISO 8601](http://www.iso.org/iso/home/standards/iso8601.htm) format.
	ExpiresAt *string `json:"expires_at,omitempty" url:"expires_at,omitempty"`
	// The ID of the authorizing merchant's business.
	MerchantID *string `json:"merchant_id,omitempty" url:"merchant_id,omitempty"`
	// __LEGACY FIELD__. The ID of a subscription plan the merchant signed up
	// for. The ID is only present if the merchant signed up for a subscription plan during authorization.
	SubscriptionID *string `json:"subscription_id,omitempty" url:"subscription_id,omitempty"`
	// __LEGACY FIELD__. The ID of the subscription plan the merchant signed
	// up for. The ID is only present if the merchant signed up for a subscription plan during
	// authorization.
	PlanID *string `json:"plan_id,omitempty" url:"plan_id,omitempty"`
	// The OpenID token belonging to this person. This token is only present if the
	// OPENID scope is included in the authorization request.
	IDToken *string `json:"id_token,omitempty" url:"id_token,omitempty"`
	// A refresh token.
	// For more information, see [Refresh, Revoke, and Limit the Scope of OAuth Tokens](https://developer.squareup.com/docs/oauth-api/refresh-revoke-limit-scope).
	RefreshToken *string `json:"refresh_token,omitempty" url:"refresh_token,omitempty"`
	// A Boolean indicating that the access token is a short-lived access token.
	// The short-lived access token returned in the response expires in 24 hours.
	ShortLived *bool `json:"short_lived,omitempty" url:"short_lived,omitempty"`
	// Any errors that occurred during the request.
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`
	// The date when the `refresh_token` expires, in [ISO 8601](http://www.iso.org/iso/home/standards/iso8601.htm) format.
	RefreshTokenExpiresAt *string `json:"refresh_token_expires_at,omitempty" url:"refresh_token_expires_at,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (o *ObtainTokenResponse) GetAccessToken() *string {
	if o == nil {
		return nil
	}
	return o.AccessToken
}

func (o *ObtainTokenResponse) GetTokenType() *string {
	if o == nil {
		return nil
	}
	return o.TokenType
}

func (o *ObtainTokenResponse) GetExpiresAt() *string {
	if o == nil {
		return nil
	}
	return o.ExpiresAt
}

func (o *ObtainTokenResponse) GetMerchantID() *string {
	if o == nil {
		return nil
	}
	return o.MerchantID
}

func (o *ObtainTokenResponse) GetSubscriptionID() *string {
	if o == nil {
		return nil
	}
	return o.SubscriptionID
}

func (o *ObtainTokenResponse) GetPlanID() *string {
	if o == nil {
		return nil
	}
	return o.PlanID
}

func (o *ObtainTokenResponse) GetIDToken() *string {
	if o == nil {
		return nil
	}
	return o.IDToken
}

func (o *ObtainTokenResponse) GetRefreshToken() *string {
	if o == nil {
		return nil
	}
	return o.RefreshToken
}

func (o *ObtainTokenResponse) GetShortLived() *bool {
	if o == nil {
		return nil
	}
	return o.ShortLived
}

func (o *ObtainTokenResponse) GetErrors() []*Error {
	if o == nil {
		return nil
	}
	return o.Errors
}

func (o *ObtainTokenResponse) GetRefreshTokenExpiresAt() *string {
	if o == nil {
		return nil
	}
	return o.RefreshTokenExpiresAt
}

func (o *ObtainTokenResponse) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *ObtainTokenResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ObtainTokenResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = ObtainTokenResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties
	o.rawJSON = json.RawMessage(data)
	return nil
}

func (o *ObtainTokenResponse) String() string {
	if len(o.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(o.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

// Defines the fields that are included in the response body of
// a request to the `RetrieveTokenStatus` endpoint.
type RetrieveTokenStatusResponse struct {
	// The list of scopes associated with an access token.
	Scopes []string `json:"scopes,omitempty" url:"scopes,omitempty"`
	// The date and time when the `access_token` expires, in RFC 3339 format. Empty if the token never expires.
	ExpiresAt *string `json:"expires_at,omitempty" url:"expires_at,omitempty"`
	// The Square-issued application ID associated with the access token. This is the same application ID used to obtain the token.
	ClientID *string `json:"client_id,omitempty" url:"client_id,omitempty"`
	// The ID of the authorizing merchant's business.
	MerchantID *string `json:"merchant_id,omitempty" url:"merchant_id,omitempty"`
	// Any errors that occurred during the request.
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *RetrieveTokenStatusResponse) GetScopes() []string {
	if r == nil {
		return nil
	}
	return r.Scopes
}

func (r *RetrieveTokenStatusResponse) GetExpiresAt() *string {
	if r == nil {
		return nil
	}
	return r.ExpiresAt
}

func (r *RetrieveTokenStatusResponse) GetClientID() *string {
	if r == nil {
		return nil
	}
	return r.ClientID
}

func (r *RetrieveTokenStatusResponse) GetMerchantID() *string {
	if r == nil {
		return nil
	}
	return r.MerchantID
}

func (r *RetrieveTokenStatusResponse) GetErrors() []*Error {
	if r == nil {
		return nil
	}
	return r.Errors
}

func (r *RetrieveTokenStatusResponse) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RetrieveTokenStatusResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler RetrieveTokenStatusResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RetrieveTokenStatusResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *RetrieveTokenStatusResponse) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RevokeTokenResponse struct {
	// If the request is successful, this is `true`.
	Success *bool `json:"success,omitempty" url:"success,omitempty"`
	// Any errors that occurred during the request.
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *RevokeTokenResponse) GetSuccess() *bool {
	if r == nil {
		return nil
	}
	return r.Success
}

func (r *RevokeTokenResponse) GetErrors() []*Error {
	if r == nil {
		return nil
	}
	return r.Errors
}

func (r *RevokeTokenResponse) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RevokeTokenResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler RevokeTokenResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RevokeTokenResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *RevokeTokenResponse) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}
