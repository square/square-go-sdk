// Code generated by Fern. DO NOT EDIT.

package subscriptions

import (
	context "context"
	v2 "github.com/square/square-go-sdk/v2"
	core "github.com/square/square-go-sdk/v2/core"
	internal "github.com/square/square-go-sdk/v2/internal"
	option "github.com/square/square-go-sdk/v2/option"
	http "net/http"
	os "os"
)

type Client struct {
	WithRawResponse *RawClient

	baseURL string
	caller  *internal.Caller
	header  http.Header
}

func NewClient(opts ...option.RequestOption) *Client {
	options := core.NewRequestOptions(opts...)
	if options.Token == "" {
		options.Token = os.Getenv("SQUARE_TOKEN")
	}
	if options.Version == "" {
		options.Version = os.Getenv("VERSION")
	}
	return &Client{
		WithRawResponse: NewRawClient(options),
		baseURL:         options.BaseURL,
		caller: internal.NewCaller(
			&internal.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
		header: options.ToHeader(),
	}
}

// Enrolls a customer in a subscription.
//
// If you provide a card on file in the request, Square charges the card for
// the subscription. Otherwise, Square sends an invoice to the customer's email
// address. The subscription starts immediately, unless the request includes
// the optional `start_date`. Each individual subscription is associated with a particular location.
//
// For more information, see [Create a subscription](https://developer.squareup.com/docs/subscriptions-api/manage-subscriptions#create-a-subscription).
func (c *Client) Create(
	ctx context.Context,
	request *v2.CreateSubscriptionRequest,
	opts ...option.RequestOption,
) (*v2.CreateSubscriptionResponse, error) {
	response, err := c.WithRawResponse.Create(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Schedules a plan variation change for all active subscriptions under a given plan
// variation. For more information, see [Swap Subscription Plan Variations](https://developer.squareup.com/docs/subscriptions-api/swap-plan-variations).
func (c *Client) BulkSwapPlan(
	ctx context.Context,
	request *v2.BulkSwapPlanRequest,
	opts ...option.RequestOption,
) (*v2.BulkSwapPlanResponse, error) {
	response, err := c.WithRawResponse.BulkSwapPlan(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Searches for subscriptions.
//
// Results are ordered chronologically by subscription creation date. If
// the request specifies more than one location ID,
// the endpoint orders the result
// by location ID, and then by creation date within each location. If no locations are given
// in the query, all locations are searched.
//
// You can also optionally specify `customer_ids` to search by customer.
// If left unset, all customers
// associated with the specified locations are returned.
// If the request specifies customer IDs, the endpoint orders results
// first by location, within location by customer ID, and within
// customer by subscription creation date.
func (c *Client) Search(
	ctx context.Context,
	request *v2.SearchSubscriptionsRequest,
	opts ...option.RequestOption,
) (*v2.SearchSubscriptionsResponse, error) {
	response, err := c.WithRawResponse.Search(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Retrieves a specific subscription.
func (c *Client) Get(
	ctx context.Context,
	request *v2.GetSubscriptionsRequest,
	opts ...option.RequestOption,
) (*v2.GetSubscriptionResponse, error) {
	response, err := c.WithRawResponse.Get(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Updates a subscription by modifying or clearing `subscription` field values.
// To clear a field, set its value to `null`.
func (c *Client) Update(
	ctx context.Context,
	request *v2.UpdateSubscriptionRequest,
	opts ...option.RequestOption,
) (*v2.UpdateSubscriptionResponse, error) {
	response, err := c.WithRawResponse.Update(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Deletes a scheduled action for a subscription.
func (c *Client) DeleteAction(
	ctx context.Context,
	request *v2.DeleteActionSubscriptionsRequest,
	opts ...option.RequestOption,
) (*v2.DeleteSubscriptionActionResponse, error) {
	response, err := c.WithRawResponse.DeleteAction(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Changes the [billing anchor date](https://developer.squareup.com/docs/subscriptions-api/subscription-billing#billing-dates)
// for a subscription.
func (c *Client) ChangeBillingAnchorDate(
	ctx context.Context,
	request *v2.ChangeBillingAnchorDateRequest,
	opts ...option.RequestOption,
) (*v2.ChangeBillingAnchorDateResponse, error) {
	response, err := c.WithRawResponse.ChangeBillingAnchorDate(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Schedules a `CANCEL` action to cancel an active subscription. This
// sets the `canceled_date` field to the end of the active billing period. After this date,
// the subscription status changes from ACTIVE to CANCELED.
func (c *Client) Cancel(
	ctx context.Context,
	request *v2.CancelSubscriptionsRequest,
	opts ...option.RequestOption,
) (*v2.CancelSubscriptionResponse, error) {
	response, err := c.WithRawResponse.Cancel(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Lists all [events](https://developer.squareup.com/docs/subscriptions-api/actions-events) for a specific subscription.
func (c *Client) ListEvents(
	ctx context.Context,
	request *v2.ListEventsSubscriptionsRequest,
	opts ...option.RequestOption,
) (*core.Page[*v2.SubscriptionEvent], error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://connect.squareup.com",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/v2/subscriptions/%v/events",
		request.SubscriptionID,
	)
	queryParams, err := internal.QueryValues(request)
	if err != nil {
		return nil, err
	}
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)
	prepareCall := func(pageRequest *internal.PageRequest[*string]) *internal.CallParams {
		if pageRequest.Cursor != nil {
			queryParams.Set("cursor", *pageRequest.Cursor)
		}
		nextURL := endpointURL
		if len(queryParams) > 0 {
			nextURL += "?" + queryParams.Encode()
		}
		return &internal.CallParams{
			URL:             nextURL,
			Method:          http.MethodGet,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        pageRequest.Response,
		}
	}
	readPageResponse := func(response *v2.ListSubscriptionEventsResponse) *internal.PageResponse[*string, *v2.SubscriptionEvent] {
		var zeroValue *string
		next := response.GetCursor()
		results := response.GetSubscriptionEvents()
		return &internal.PageResponse[*string, *v2.SubscriptionEvent]{
			Next:    next,
			Results: results,
			Done:    next == zeroValue,
		}
	}
	pager := internal.NewCursorPager(
		c.caller,
		prepareCall,
		readPageResponse,
	)
	return pager.GetPage(ctx, request.Cursor)
}

// Schedules a `PAUSE` action to pause an active subscription.
func (c *Client) Pause(
	ctx context.Context,
	request *v2.PauseSubscriptionRequest,
	opts ...option.RequestOption,
) (*v2.PauseSubscriptionResponse, error) {
	response, err := c.WithRawResponse.Pause(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Schedules a `RESUME` action to resume a paused or a deactivated subscription.
func (c *Client) Resume(
	ctx context.Context,
	request *v2.ResumeSubscriptionRequest,
	opts ...option.RequestOption,
) (*v2.ResumeSubscriptionResponse, error) {
	response, err := c.WithRawResponse.Resume(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Schedules a `SWAP_PLAN` action to swap a subscription plan variation in an existing subscription.
// For more information, see [Swap Subscription Plan Variations](https://developer.squareup.com/docs/subscriptions-api/swap-plan-variations).
func (c *Client) SwapPlan(
	ctx context.Context,
	request *v2.SwapPlanRequest,
	opts ...option.RequestOption,
) (*v2.SwapPlanResponse, error) {
	response, err := c.WithRawResponse.SwapPlan(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}
