// Code generated by Fern. DO NOT EDIT.

package transactions

import (
	context "context"
	v2 "github.com/square/square-go-sdk/v2"
	core "github.com/square/square-go-sdk/v2/core"
	internal "github.com/square/square-go-sdk/v2/internal"
	locations "github.com/square/square-go-sdk/v2/locations"
	option "github.com/square/square-go-sdk/v2/option"
	http "net/http"
	os "os"
)

type Client struct {
	WithRawResponse *RawClient

	baseURL string
	caller  *internal.Caller
	header  http.Header
}

func NewClient(opts ...option.RequestOption) *Client {
	options := core.NewRequestOptions(opts...)
	if options.Token == "" {
		options.Token = os.Getenv("SQUARE_TOKEN")
	}
	if options.Version == "" {
		options.Version = os.Getenv("VERSION")
	}
	return &Client{
		WithRawResponse: NewRawClient(options),
		baseURL:         options.BaseURL,
		caller: internal.NewCaller(
			&internal.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
		header: options.ToHeader(),
	}
}

// Lists transactions for a particular location.
//
// Transactions include payment information from sales and exchanges and refund
// information from returns and exchanges.
//
// Max results per [page](https://developer.squareup.com/docs/working-with-apis/pagination): 50
func (c *Client) List(
	ctx context.Context,
	request *locations.ListTransactionsRequest,
	opts ...option.RequestOption,
) (*v2.ListTransactionsResponse, error) {
	response, err := c.WithRawResponse.List(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Retrieves details for a single transaction.
func (c *Client) Get(
	ctx context.Context,
	request *locations.GetTransactionsRequest,
	opts ...option.RequestOption,
) (*v2.GetTransactionResponse, error) {
	response, err := c.WithRawResponse.Get(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Captures a transaction that was created with the [Charge](api-endpoint:Transactions-Charge)
// endpoint with a `delay_capture` value of `true`.
//
// See [Delayed capture transactions](https://developer.squareup.com/docs/payments/transactions/overview#delayed-capture)
// for more information.
func (c *Client) Capture(
	ctx context.Context,
	request *locations.CaptureTransactionsRequest,
	opts ...option.RequestOption,
) (*v2.CaptureTransactionResponse, error) {
	response, err := c.WithRawResponse.Capture(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Cancels a transaction that was created with the [Charge](api-endpoint:Transactions-Charge)
// endpoint with a `delay_capture` value of `true`.
//
// See [Delayed capture transactions](https://developer.squareup.com/docs/payments/transactions/overview#delayed-capture)
// for more information.
func (c *Client) Void(
	ctx context.Context,
	request *locations.VoidTransactionsRequest,
	opts ...option.RequestOption,
) (*v2.VoidTransactionResponse, error) {
	response, err := c.WithRawResponse.Void(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}
