// This file was auto-generated by Fern from our API Definition.

package client

import (
	context "context"
	v40 "github.com/square/square-go-sdk/v40"
	core "github.com/square/square-go-sdk/v40/core"
	internal "github.com/square/square-go-sdk/v40/internal"
	customattributedefinitions "github.com/square/square-go-sdk/v40/locations/customattributedefinitions"
	customattributes "github.com/square/square-go-sdk/v40/locations/customattributes"
	transactions "github.com/square/square-go-sdk/v40/locations/transactions"
	option "github.com/square/square-go-sdk/v40/option"
	http "net/http"
	os "os"
)

type Client struct {
	baseURL string
	caller  *internal.Caller
	header  http.Header

	CustomAttributeDefinitions *customattributedefinitions.Client
	CustomAttributes           *customattributes.Client
	Transactions               *transactions.Client
}

func NewClient(opts ...option.RequestOption) *Client {
	options := core.NewRequestOptions(opts...)
	if options.Token == "" {
		options.Token = os.Getenv("SQUARE_TOKEN")
	}
	if options.Version == "" {
		options.Version = os.Getenv("VERSION")
	}
	return &Client{
		baseURL: options.BaseURL,
		caller: internal.NewCaller(
			&internal.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
		header:                     options.ToHeader(),
		CustomAttributeDefinitions: customattributedefinitions.NewClient(opts...),
		CustomAttributes:           customattributes.NewClient(opts...),
		Transactions:               transactions.NewClient(opts...),
	}
}

// Provides details about all of the seller's [locations](https://developer.squareup.com/docs/locations-api),
// including those with an inactive status. Locations are listed alphabetically by `name`.
func (c *Client) List(
	ctx context.Context,
	opts ...option.RequestOption,
) (*v40.ListLocationsResponse, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://connect.squareup.com",
	)
	endpointURL := baseURL + "/v2/locations"
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)

	var response *v40.ListLocationsResponse
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodGet,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Creates a [location](https://developer.squareup.com/docs/locations-api).
// Creating new locations allows for separate configuration of receipt layouts, item prices,
// and sales reports. Developers can use locations to separate sales activity through applications
// that integrate with Square from sales activity elsewhere in a seller's account.
// Locations created programmatically with the Locations API last forever and
// are visible to the seller for their own management. Therefore, ensure that
// each location has a sensible and unique name.
func (c *Client) Create(
	ctx context.Context,
	request *v40.CreateLocationRequest,
	opts ...option.RequestOption,
) (*v40.CreateLocationResponse, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://connect.squareup.com",
	)
	endpointURL := baseURL + "/v2/locations"
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)
	headers.Set("Content-Type", "application/json")

	var response *v40.CreateLocationResponse
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPost,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         request,
			Response:        &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Retrieves details of a single location. Specify "main"
// as the location ID to retrieve details of the [main location](https://developer.squareup.com/docs/locations-api#about-the-main-location).
func (c *Client) Get(
	ctx context.Context,
	request *v40.LocationsGetRequest,
	opts ...option.RequestOption,
) (*v40.GetLocationResponse, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://connect.squareup.com",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/v2/locations/%v",
		request.LocationID,
	)
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)

	var response *v40.GetLocationResponse
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodGet,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Updates a [location](https://developer.squareup.com/docs/locations-api).
func (c *Client) Update(
	ctx context.Context,
	request *v40.UpdateLocationRequest,
	opts ...option.RequestOption,
) (*v40.UpdateLocationResponse, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://connect.squareup.com",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/v2/locations/%v",
		request.LocationID,
	)
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)
	headers.Set("Content-Type", "application/json")

	var response *v40.UpdateLocationResponse
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPut,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         request,
			Response:        &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Links a `checkoutId` to a `checkout_page_url` that customers are
// directed to in order to provide their payment information using a
// payment processing workflow hosted on connect.squareup.com.
//
// NOTE: The Checkout API has been updated with new features.
// For more information, see [Checkout API highlights](https://developer.squareup.com/docs/checkout-api#checkout-api-highlights).
func (c *Client) Checkouts(
	ctx context.Context,
	request *v40.CreateCheckoutRequest,
	opts ...option.RequestOption,
) (*v40.CreateCheckoutResponse, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://connect.squareup.com",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/v2/locations/%v/checkouts",
		request.LocationID,
	)
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)
	headers.Set("Content-Type", "application/json")

	var response *v40.CreateCheckoutResponse
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPost,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         request,
			Response:        &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}
