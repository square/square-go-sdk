// Code generated by Fern. DO NOT EDIT.

package actions

import (
	context "context"
	v2 "github.com/square/square-go-sdk/v2"
	core "github.com/square/square-go-sdk/v2/core"
	internal "github.com/square/square-go-sdk/v2/internal"
	option "github.com/square/square-go-sdk/v2/option"
	terminal "github.com/square/square-go-sdk/v2/terminal"
	http "net/http"
	os "os"
)

type Client struct {
	WithRawResponse *RawClient

	baseURL string
	caller  *internal.Caller
	header  http.Header
}

func NewClient(opts ...option.RequestOption) *Client {
	options := core.NewRequestOptions(opts...)
	if options.Token == "" {
		options.Token = os.Getenv("SQUARE_TOKEN")
	}
	if options.Version == "" {
		options.Version = os.Getenv("VERSION")
	}
	return &Client{
		WithRawResponse: NewRawClient(options),
		baseURL:         options.BaseURL,
		caller: internal.NewCaller(
			&internal.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
		header: options.ToHeader(),
	}
}

// Creates a Terminal action request and sends it to the specified device.
func (c *Client) Create(
	ctx context.Context,
	request *terminal.CreateTerminalActionRequest,
	opts ...option.RequestOption,
) (*v2.CreateTerminalActionResponse, error) {
	response, err := c.WithRawResponse.Create(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Retrieves a filtered list of Terminal action requests created by the account making the request. Terminal action requests are available for 30 days.
func (c *Client) Search(
	ctx context.Context,
	request *terminal.SearchTerminalActionsRequest,
	opts ...option.RequestOption,
) (*v2.SearchTerminalActionsResponse, error) {
	response, err := c.WithRawResponse.Search(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Retrieves a Terminal action request by `action_id`. Terminal action requests are available for 30 days.
func (c *Client) Get(
	ctx context.Context,
	request *terminal.GetActionsRequest,
	opts ...option.RequestOption,
) (*v2.GetTerminalActionResponse, error) {
	response, err := c.WithRawResponse.Get(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Cancels a Terminal action request if the status of the request permits it.
func (c *Client) Cancel(
	ctx context.Context,
	request *terminal.CancelActionsRequest,
	opts ...option.RequestOption,
) (*v2.CancelTerminalActionResponse, error) {
	response, err := c.WithRawResponse.Cancel(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}
