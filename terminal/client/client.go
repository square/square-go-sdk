// This file was auto-generated by Fern from our API Definition.

package client

import (
	context "context"
	http "net/http"
	os "os"

	squaregosdk "github.com/fern-demo/square-go-sdk"
	core "github.com/fern-demo/square-go-sdk/core"
	option "github.com/fern-demo/square-go-sdk/option"
	actions "github.com/fern-demo/square-go-sdk/terminal/actions"
	checkouts "github.com/fern-demo/square-go-sdk/terminal/checkouts"
	refunds "github.com/fern-demo/square-go-sdk/terminal/refunds"
)

type Client struct {
	baseURL string
	caller  *core.Caller
	header  http.Header

	Actions   *actions.Client
	Checkouts *checkouts.Client
	Refunds   *refunds.Client
}

func NewClient(opts ...option.RequestOption) *Client {
	options := core.NewRequestOptions(opts...)
	if options.Token == "" {
		options.Token = os.Getenv("SQUARE_TOKEN")
	}
	if options.Version == "" {
		options.Version = os.Getenv("VERSION")
	}
	return &Client{
		baseURL: options.BaseURL,
		caller: core.NewCaller(
			&core.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
		header:    options.ToHeader(),
		Actions:   actions.NewClient(opts...),
		Checkouts: checkouts.NewClient(opts...),
		Refunds:   refunds.NewClient(opts...),
	}
}

// Dismisses a Terminal action request if the status and type of the request permits it.
//
// See [Link and Dismiss Actions](https://developer.squareup.com/docs/terminal-api/advanced-features/custom-workflows/link-and-dismiss-actions) for more details.
func (c *Client) DismissTerminalAction(
	ctx context.Context,
	// Unique ID for the `TerminalAction` associated with the action to be dismissed.
	actionID string,
	opts ...option.RequestOption,
) (*squaregosdk.DismissTerminalActionResponse, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://connect.squareupsandbox.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := core.EncodeURL(baseURL+"/v2/terminals/actions/%v/dismiss", actionID)

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *squaregosdk.DismissTerminalActionResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPost,
			MaxAttempts:     options.MaxAttempts,
			Headers:         headers,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Dismisses a Terminal checkout request if the status and type of the request permits it.
func (c *Client) DismissTerminalCheckout(
	ctx context.Context,
	// Unique ID for the `TerminalCheckout` associated with the checkout to be dismissed.
	checkoutID string,
	opts ...option.RequestOption,
) (*squaregosdk.DismissTerminalCheckoutResponse, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://connect.squareupsandbox.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := core.EncodeURL(baseURL+"/v2/terminals/checkouts/%v/dismiss", checkoutID)

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *squaregosdk.DismissTerminalCheckoutResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPost,
			MaxAttempts:     options.MaxAttempts,
			Headers:         headers,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Dismisses a Terminal refund request if the status and type of the request permits it.
func (c *Client) DismissTerminalRefund(
	ctx context.Context,
	// Unique ID for the `TerminalRefund` associated with the refund to be dismissed.
	terminalRefundID string,
	opts ...option.RequestOption,
) (*squaregosdk.DismissTerminalRefundResponse, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://connect.squareupsandbox.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := core.EncodeURL(baseURL+"/v2/terminals/refunds/%v/dismiss", terminalRefundID)

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *squaregosdk.DismissTerminalRefundResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPost,
			MaxAttempts:     options.MaxAttempts,
			Headers:         headers,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}
