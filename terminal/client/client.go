// Code generated by Fern. DO NOT EDIT.

package client

import (
	context "context"
	v2 "github.com/square/square-go-sdk/v2"
	core "github.com/square/square-go-sdk/v2/core"
	internal "github.com/square/square-go-sdk/v2/internal"
	option "github.com/square/square-go-sdk/v2/option"
	actions "github.com/square/square-go-sdk/v2/terminal/actions"
	checkouts "github.com/square/square-go-sdk/v2/terminal/checkouts"
	refunds "github.com/square/square-go-sdk/v2/terminal/refunds"
	http "net/http"
	os "os"
)

type Client struct {
	WithRawResponse *RawClient
	Actions         *actions.Client
	Checkouts       *checkouts.Client
	Refunds         *refunds.Client

	baseURL string
	caller  *internal.Caller
	header  http.Header
}

func NewClient(opts ...option.RequestOption) *Client {
	options := core.NewRequestOptions(opts...)
	if options.Token == "" {
		options.Token = os.Getenv("SQUARE_TOKEN")
	}
	if options.Version == "" {
		options.Version = os.Getenv("VERSION")
	}
	return &Client{
		Actions:         actions.NewClient(opts...),
		Checkouts:       checkouts.NewClient(opts...),
		Refunds:         refunds.NewClient(opts...),
		WithRawResponse: NewRawClient(options),
		baseURL:         options.BaseURL,
		caller: internal.NewCaller(
			&internal.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
		header: options.ToHeader(),
	}
}

// Dismisses a Terminal action request if the status and type of the request permits it.
//
// See [Link and Dismiss Actions](https://developer.squareup.com/docs/terminal-api/advanced-features/custom-workflows/link-and-dismiss-actions) for more details.
func (c *Client) DismissTerminalAction(
	ctx context.Context,
	request *v2.DismissTerminalActionRequest,
	opts ...option.RequestOption,
) (*v2.DismissTerminalActionResponse, error) {
	response, err := c.WithRawResponse.DismissTerminalAction(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Dismisses a Terminal checkout request if the status and type of the request permits it.
func (c *Client) DismissTerminalCheckout(
	ctx context.Context,
	request *v2.DismissTerminalCheckoutRequest,
	opts ...option.RequestOption,
) (*v2.DismissTerminalCheckoutResponse, error) {
	response, err := c.WithRawResponse.DismissTerminalCheckout(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Dismisses a Terminal refund request if the status and type of the request permits it.
func (c *Client) DismissTerminalRefund(
	ctx context.Context,
	request *v2.DismissTerminalRefundRequest,
	opts ...option.RequestOption,
) (*v2.DismissTerminalRefundResponse, error) {
	response, err := c.WithRawResponse.DismissTerminalRefund(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}
