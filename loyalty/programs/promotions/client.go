// This file was auto-generated by Fern from our API Definition.

package promotions

import (
	context "context"
	fmt "fmt"
	v2 "github.com/square/square-go-sdk/v2"
	core "github.com/square/square-go-sdk/v2/core"
	internal "github.com/square/square-go-sdk/v2/internal"
	programs "github.com/square/square-go-sdk/v2/loyalty/programs"
	option "github.com/square/square-go-sdk/v2/option"
	http "net/http"
	os "os"
)

type Client struct {
	baseURL string
	caller  *internal.Caller
	header  http.Header
}

func NewClient(opts ...option.RequestOption) *Client {
	options := core.NewRequestOptions(opts...)
	if options.Token == "" {
		options.Token = os.Getenv("SQUARE_TOKEN")
	}
	if options.Version == "" {
		options.Version = os.Getenv("VERSION")
	}
	return &Client{
		baseURL: options.BaseURL,
		caller: internal.NewCaller(
			&internal.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
		header: options.ToHeader(),
	}
}

// Lists the loyalty promotions associated with a [loyalty program](entity:LoyaltyProgram).
// Results are sorted by the `created_at` date in descending order (newest to oldest).
func (c *Client) List(
	ctx context.Context,
	request *programs.ListPromotionsRequest,
	opts ...option.RequestOption,
) (*core.Page[*v2.LoyaltyPromotion], error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://connect.squareup.com",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/v2/loyalty/programs/%v/promotions",
		request.ProgramID,
	)
	queryParams, err := internal.QueryValues(request)
	if err != nil {
		return nil, err
	}
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)

	prepareCall := func(pageRequest *internal.PageRequest[*string]) *internal.CallParams {
		if pageRequest.Cursor != nil {
			queryParams.Set("cursor", fmt.Sprintf("%v", *pageRequest.Cursor))
		}
		nextURL := endpointURL
		if len(queryParams) > 0 {
			nextURL += "?" + queryParams.Encode()
		}
		return &internal.CallParams{
			URL:             nextURL,
			Method:          http.MethodGet,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        pageRequest.Response,
		}
	}
	readPageResponse := func(response *v2.ListLoyaltyPromotionsResponse) *internal.PageResponse[*string, *v2.LoyaltyPromotion] {
		var zeroValue *string
		next := response.Cursor
		results := response.LoyaltyPromotions
		return &internal.PageResponse[*string, *v2.LoyaltyPromotion]{
			Next:    next,
			Results: results,
			Done:    next == zeroValue,
		}
	}
	pager := internal.NewCursorPager(
		c.caller,
		prepareCall,
		readPageResponse,
	)
	return pager.GetPage(ctx, request.Cursor)
}

// Creates a loyalty promotion for a [loyalty program](entity:LoyaltyProgram). A loyalty promotion
// enables buyers to earn points in addition to those earned from the base loyalty program.
//
// This endpoint sets the loyalty promotion to the `ACTIVE` or `SCHEDULED` status, depending on the
// `available_time` setting. A loyalty program can have a maximum of 10 loyalty promotions with an
// `ACTIVE` or `SCHEDULED` status.
func (c *Client) Create(
	ctx context.Context,
	request *programs.CreateLoyaltyPromotionRequest,
	opts ...option.RequestOption,
) (*v2.CreateLoyaltyPromotionResponse, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://connect.squareup.com",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/v2/loyalty/programs/%v/promotions",
		request.ProgramID,
	)
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)
	headers.Set("Content-Type", "application/json")

	var response *v2.CreateLoyaltyPromotionResponse
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPost,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         request,
			Response:        &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Retrieves a loyalty promotion.
func (c *Client) Get(
	ctx context.Context,
	request *programs.GetPromotionsRequest,
	opts ...option.RequestOption,
) (*v2.GetLoyaltyPromotionResponse, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://connect.squareup.com",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/v2/loyalty/programs/%v/promotions/%v",
		request.PromotionID,
		request.ProgramID,
	)
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)

	var response *v2.GetLoyaltyPromotionResponse
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodGet,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Cancels a loyalty promotion. Use this endpoint to cancel an `ACTIVE` promotion earlier than the
// end date, cancel an `ACTIVE` promotion when an end date is not specified, or cancel a `SCHEDULED` promotion.
// Because updating a promotion is not supported, you can also use this endpoint to cancel a promotion before
// you create a new one.
//
// This endpoint sets the loyalty promotion to the `CANCELED` state
func (c *Client) Cancel(
	ctx context.Context,
	request *programs.CancelPromotionsRequest,
	opts ...option.RequestOption,
) (*v2.CancelLoyaltyPromotionResponse, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://connect.squareup.com",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/v2/loyalty/programs/%v/promotions/%v/cancel",
		request.PromotionID,
		request.ProgramID,
	)
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)

	var response *v2.CancelLoyaltyPromotionResponse
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPost,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}
