// Code generated by Fern. DO NOT EDIT.

package client

import (
	context "context"
	v2 "github.com/square/square-go-sdk/v2"
	core "github.com/square/square-go-sdk/v2/core"
	internal "github.com/square/square-go-sdk/v2/internal"
	accounts "github.com/square/square-go-sdk/v2/loyalty/accounts"
	client "github.com/square/square-go-sdk/v2/loyalty/programs/client"
	rewards "github.com/square/square-go-sdk/v2/loyalty/rewards"
	option "github.com/square/square-go-sdk/v2/option"
	http "net/http"
	os "os"
)

type Client struct {
	WithRawResponse *RawClient
	Accounts        *accounts.Client
	Programs        *client.Client
	Rewards         *rewards.Client

	baseURL string
	caller  *internal.Caller
	header  http.Header
}

func NewClient(opts ...option.RequestOption) *Client {
	options := core.NewRequestOptions(opts...)
	if options.Token == "" {
		options.Token = os.Getenv("SQUARE_TOKEN")
	}
	if options.Version == "" {
		options.Version = os.Getenv("VERSION")
	}
	return &Client{
		Accounts:        accounts.NewClient(opts...),
		Programs:        client.NewClient(opts...),
		Rewards:         rewards.NewClient(opts...),
		WithRawResponse: NewRawClient(options),
		baseURL:         options.BaseURL,
		caller: internal.NewCaller(
			&internal.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
		header: options.ToHeader(),
	}
}

// Searches for loyalty events.
//
// A Square loyalty program maintains a ledger of events that occur during the lifetime of a
// buyer's loyalty account. Each change in the point balance
// (for example, points earned, points redeemed, and points expired) is
// recorded in the ledger. Using this endpoint, you can search the ledger for events.
//
// Search results are sorted by `created_at` in descending order.
func (c *Client) SearchEvents(
	ctx context.Context,
	request *v2.SearchLoyaltyEventsRequest,
	opts ...option.RequestOption,
) (*v2.SearchLoyaltyEventsResponse, error) {
	response, err := c.WithRawResponse.SearchEvents(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}
