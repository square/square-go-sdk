// Code generated by Fern. DO NOT EDIT.

package accounts

import (
	context "context"
	v2 "github.com/square/square-go-sdk/v2"
	core "github.com/square/square-go-sdk/v2/core"
	internal "github.com/square/square-go-sdk/v2/internal"
	loyalty "github.com/square/square-go-sdk/v2/loyalty"
	option "github.com/square/square-go-sdk/v2/option"
	http "net/http"
	os "os"
)

type Client struct {
	WithRawResponse *RawClient

	baseURL string
	caller  *internal.Caller
	header  http.Header
}

func NewClient(opts ...option.RequestOption) *Client {
	options := core.NewRequestOptions(opts...)
	if options.Token == "" {
		options.Token = os.Getenv("SQUARE_TOKEN")
	}
	if options.Version == "" {
		options.Version = os.Getenv("VERSION")
	}
	return &Client{
		WithRawResponse: NewRawClient(options),
		baseURL:         options.BaseURL,
		caller: internal.NewCaller(
			&internal.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
		header: options.ToHeader(),
	}
}

// Creates a loyalty account. To create a loyalty account, you must provide the `program_id` and a `mapping` with the `phone_number` of the buyer.
func (c *Client) Create(
	ctx context.Context,
	request *loyalty.CreateLoyaltyAccountRequest,
	opts ...option.RequestOption,
) (*v2.CreateLoyaltyAccountResponse, error) {
	response, err := c.WithRawResponse.Create(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Searches for loyalty accounts in a loyalty program.
//
// You can search for a loyalty account using the phone number or customer ID associated with the account. To return all loyalty accounts, specify an empty `query` object or omit it entirely.
//
// Search results are sorted by `created_at` in ascending order.
func (c *Client) Search(
	ctx context.Context,
	request *loyalty.SearchLoyaltyAccountsRequest,
	opts ...option.RequestOption,
) (*v2.SearchLoyaltyAccountsResponse, error) {
	response, err := c.WithRawResponse.Search(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Retrieves a loyalty account.
func (c *Client) Get(
	ctx context.Context,
	request *loyalty.GetAccountsRequest,
	opts ...option.RequestOption,
) (*v2.GetLoyaltyAccountResponse, error) {
	response, err := c.WithRawResponse.Get(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Adds points earned from a purchase to a [loyalty account](entity:LoyaltyAccount).
//
// - If you are using the Orders API to manage orders, provide the `order_id`. Square reads the order
// to compute the points earned from both the base loyalty program and an associated
// [loyalty promotion](entity:LoyaltyPromotion). For purchases that qualify for multiple accrual
// rules, Square computes points based on the accrual rule that grants the most points.
// For purchases that qualify for multiple promotions, Square computes points based on the most
// recently created promotion. A purchase must first qualify for program points to be eligible for promotion points.
//
// - If you are not using the Orders API to manage orders, provide `points` with the number of points to add.
// You must first perform a client-side computation of the points earned from the loyalty program and
// loyalty promotion. For spend-based and visit-based programs, you can call [CalculateLoyaltyPoints](api-endpoint:Loyalty-CalculateLoyaltyPoints)
// to compute the points earned from the base loyalty program. For information about computing points earned from a loyalty promotion, see
// [Calculating promotion points](https://developer.squareup.com/docs/loyalty-api/loyalty-promotions#calculate-promotion-points).
func (c *Client) AccumulatePoints(
	ctx context.Context,
	request *loyalty.AccumulateLoyaltyPointsRequest,
	opts ...option.RequestOption,
) (*v2.AccumulateLoyaltyPointsResponse, error) {
	response, err := c.WithRawResponse.AccumulatePoints(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Adds points to or subtracts points from a buyer's account.
//
// Use this endpoint only when you need to manually adjust points. Otherwise, in your application flow, you call
// [AccumulateLoyaltyPoints](api-endpoint:Loyalty-AccumulateLoyaltyPoints)
// to add points when a buyer pays for the purchase.
func (c *Client) Adjust(
	ctx context.Context,
	request *loyalty.AdjustLoyaltyPointsRequest,
	opts ...option.RequestOption,
) (*v2.AdjustLoyaltyPointsResponse, error) {
	response, err := c.WithRawResponse.Adjust(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}
