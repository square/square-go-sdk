// This file was auto-generated by Fern from our API Definition.

package accounts

import (
	context "context"
	http "net/http"
	os "os"

	squaregosdk "github.com/fern-demo/square-go-sdk"
	core "github.com/fern-demo/square-go-sdk/core"
	loyalty "github.com/fern-demo/square-go-sdk/loyalty"
	option "github.com/fern-demo/square-go-sdk/option"
)

type Client struct {
	baseURL string
	caller  *core.Caller
	header  http.Header
}

func NewClient(opts ...option.RequestOption) *Client {
	options := core.NewRequestOptions(opts...)
	if options.Token == "" {
		options.Token = os.Getenv("SQUARE_TOKEN")
	}
	if options.Version == "" {
		options.Version = os.Getenv("VERSION")
	}
	return &Client{
		baseURL: options.BaseURL,
		caller: core.NewCaller(
			&core.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
		header: options.ToHeader(),
	}
}

// Creates a loyalty account. To create a loyalty account, you must provide the `program_id` and a `mapping` with the `phone_number` of the buyer.
func (c *Client) Create(
	ctx context.Context,
	request *loyalty.CreateLoyaltyAccountRequest,
	opts ...option.RequestOption,
) (*squaregosdk.CreateLoyaltyAccountResponse, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://connect.squareupsandbox.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := baseURL + "/v2/loyalty/accounts"

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *squaregosdk.CreateLoyaltyAccountResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPost,
			MaxAttempts:     options.MaxAttempts,
			Headers:         headers,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         request,
			Response:        &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Searches for loyalty accounts in a loyalty program.
//
// You can search for a loyalty account using the phone number or customer ID associated with the account. To return all loyalty accounts, specify an empty `query` object or omit it entirely.
//
// Search results are sorted by `created_at` in ascending order.
func (c *Client) Search(
	ctx context.Context,
	request *loyalty.SearchLoyaltyAccountsRequest,
	opts ...option.RequestOption,
) (*squaregosdk.SearchLoyaltyAccountsResponse, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://connect.squareupsandbox.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := baseURL + "/v2/loyalty/accounts/search"

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *squaregosdk.SearchLoyaltyAccountsResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPost,
			MaxAttempts:     options.MaxAttempts,
			Headers:         headers,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         request,
			Response:        &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Retrieves a loyalty account.
func (c *Client) Get(
	ctx context.Context,
	// The ID of the [loyalty account](entity:LoyaltyAccount) to retrieve.
	accountID string,
	opts ...option.RequestOption,
) (*squaregosdk.GetLoyaltyAccountResponse, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://connect.squareupsandbox.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := core.EncodeURL(baseURL+"/v2/loyalty/accounts/%v", accountID)

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *squaregosdk.GetLoyaltyAccountResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:             endpointURL,
			Method:          http.MethodGet,
			MaxAttempts:     options.MaxAttempts,
			Headers:         headers,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Adds points earned from a purchase to a [loyalty account]($m/LoyaltyAccount).
//
//   - If you are using the Orders API to manage orders, provide the `order_id`. Square reads the order
//     to compute the points earned from both the base loyalty program and an associated
//     [loyalty promotion]($m/LoyaltyPromotion). For purchases that qualify for multiple accrual
//     rules, Square computes points based on the accrual rule that grants the most points.
//     For purchases that qualify for multiple promotions, Square computes points based on the most
//     recently created promotion. A purchase must first qualify for program points to be eligible for promotion points.
//
//   - If you are not using the Orders API to manage orders, provide `points` with the number of points to add.
//     You must first perform a client-side computation of the points earned from the loyalty program and
//     loyalty promotion. For spend-based and visit-based programs, you can call [CalculateLoyaltyPoints]($e/Loyalty/CalculateLoyaltyPoints)
//     to compute the points earned from the base loyalty program. For information about computing points earned from a loyalty promotion, see
//     [Calculating promotion points](https://developer.squareup.com/docs/loyalty-api/loyalty-promotions#calculate-promotion-points).
func (c *Client) AccumulatePoints(
	ctx context.Context,
	// The ID of the target [loyalty account](entity:LoyaltyAccount).
	accountID string,
	request *loyalty.AccumulateLoyaltyPointsRequest,
	opts ...option.RequestOption,
) (*squaregosdk.AccumulateLoyaltyPointsResponse, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://connect.squareupsandbox.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := core.EncodeURL(baseURL+"/v2/loyalty/accounts/%v/accumulate", accountID)

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *squaregosdk.AccumulateLoyaltyPointsResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPost,
			MaxAttempts:     options.MaxAttempts,
			Headers:         headers,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         request,
			Response:        &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Adds points to or subtracts points from a buyer's account.
//
// Use this endpoint only when you need to manually adjust points. Otherwise, in your application flow, you call
// [AccumulateLoyaltyPoints]($e/Loyalty/AccumulateLoyaltyPoints)
// to add points when a buyer pays for the purchase.
func (c *Client) Adjust(
	ctx context.Context,
	// The ID of the target [loyalty account](entity:LoyaltyAccount).
	accountID string,
	request *loyalty.AdjustLoyaltyPointsRequest,
	opts ...option.RequestOption,
) (*squaregosdk.AdjustLoyaltyPointsResponse, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://connect.squareupsandbox.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := core.EncodeURL(baseURL+"/v2/loyalty/accounts/%v/adjust", accountID)

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *squaregosdk.AdjustLoyaltyPointsResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPost,
			MaxAttempts:     options.MaxAttempts,
			Headers:         headers,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         request,
			Response:        &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}
