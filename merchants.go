// This file was auto-generated by Fern from our API Definition.

package square

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/square/square-go-sdk/internal"
)

type MerchantsGetRequest struct {
	// The ID of the merchant to retrieve. If the string "me" is supplied as the ID,
	// then retrieve the merchant that is currently accessible to this call.
	MerchantID string `json:"-" url:"-"`
}

type MerchantsGetCustomAttributeDefinitionsRequest struct {
	// Filters the `CustomAttributeDefinition` results by their `visibility` values.
	VisibilityFilter *VisibilityFilter `json:"-" url:"visibility_filter,omitempty"`
	// The maximum number of results to return in a single paged response. This limit is advisory.
	// The response might contain more or fewer results. The minimum value is 1 and the maximum value is 100.
	// The default value is 20. For more information, see [Pagination](https://developer.squareup.com/docs/build-basics/common-api-patterns/pagination).
	Limit *int `json:"-" url:"limit,omitempty"`
	// The cursor returned in the paged response from the previous call to this endpoint.
	// Provide this cursor to retrieve the next page of results for your original request.
	// For more information, see [Pagination](https://developer.squareup.com/docs/build-basics/common-api-patterns/pagination).
	Cursor *string `json:"-" url:"cursor,omitempty"`
}

type MerchantsListRequest struct {
	// The cursor generated by the previous response.
	Cursor *int `json:"-" url:"cursor,omitempty"`
}

// The response object returned by the [RetrieveMerchant]($e/Merchants/RetrieveMerchant) endpoint.
type GetMerchantResponse struct {
	// Information on errors encountered during the request.
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`
	// The requested `Merchant` object.
	Merchant *Merchant `json:"merchant,omitempty" url:"merchant,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetMerchantResponse) GetErrors() []*Error {
	if g == nil {
		return nil
	}
	return g.Errors
}

func (g *GetMerchantResponse) GetMerchant() *Merchant {
	if g == nil {
		return nil
	}
	return g.Merchant
}

func (g *GetMerchantResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetMerchantResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetMerchantResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetMerchantResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetMerchantResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

// Represents a [ListMerchantCustomAttributeDefinitions]($e/MerchantCustomAttributes/ListMerchantCustomAttributeDefinitions) response.
// Either `custom_attribute_definitions`, an empty object, or `errors` is present in the response.
// If additional results are available, the `cursor` field is also present along with `custom_attribute_definitions`.
type ListMerchantCustomAttributeDefinitionsResponse struct {
	// The retrieved custom attribute definitions. If no custom attribute definitions are found,
	// Square returns an empty object (`{}`).
	CustomAttributeDefinitions []*CustomAttributeDefinition `json:"custom_attribute_definitions,omitempty" url:"custom_attribute_definitions,omitempty"`
	// The cursor to provide in your next call to this endpoint to retrieve the next page of
	// results for your original request. This field is present only if the request succeeded and
	// additional results are available. For more information, see [Pagination](https://developer.squareup.com/docs/build-basics/common-api-patterns/pagination).
	Cursor *string `json:"cursor,omitempty" url:"cursor,omitempty"`
	// Any errors that occurred during the request.
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListMerchantCustomAttributeDefinitionsResponse) GetCustomAttributeDefinitions() []*CustomAttributeDefinition {
	if l == nil {
		return nil
	}
	return l.CustomAttributeDefinitions
}

func (l *ListMerchantCustomAttributeDefinitionsResponse) GetCursor() *string {
	if l == nil {
		return nil
	}
	return l.Cursor
}

func (l *ListMerchantCustomAttributeDefinitionsResponse) GetErrors() []*Error {
	if l == nil {
		return nil
	}
	return l.Errors
}

func (l *ListMerchantCustomAttributeDefinitionsResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListMerchantCustomAttributeDefinitionsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListMerchantCustomAttributeDefinitionsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListMerchantCustomAttributeDefinitionsResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListMerchantCustomAttributeDefinitionsResponse) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

// The response object returned by the [ListMerchant]($e/Merchants/ListMerchants) endpoint.
type ListMerchantsResponse struct {
	// Information on errors encountered during the request.
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`
	// The requested `Merchant` entities.
	Merchant []*Merchant `json:"merchant,omitempty" url:"merchant,omitempty"`
	// If the response is truncated, the cursor to use in next request to fetch next set of objects.
	Cursor *int `json:"cursor,omitempty" url:"cursor,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListMerchantsResponse) GetErrors() []*Error {
	if l == nil {
		return nil
	}
	return l.Errors
}

func (l *ListMerchantsResponse) GetMerchant() []*Merchant {
	if l == nil {
		return nil
	}
	return l.Merchant
}

func (l *ListMerchantsResponse) GetCursor() *int {
	if l == nil {
		return nil
	}
	return l.Cursor
}

func (l *ListMerchantsResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListMerchantsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListMerchantsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListMerchantsResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListMerchantsResponse) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

// Represents a business that sells with Square.
type Merchant struct {
	// The Square-issued ID of the merchant.
	ID *string `json:"id,omitempty" url:"id,omitempty"`
	// The name of the merchant's overall business.
	BusinessName *string `json:"business_name,omitempty" url:"business_name,omitempty"`
	// The country code associated with the merchant, in the two-letter format of ISO 3166. For example, `US` or `JP`.
	// See [Country](#type-country) for possible values
	Country Country `json:"country" url:"country"`
	// The code indicating the [language preferences](https://developer.squareup.com/docs/build-basics/general-considerations/language-preferences) of the merchant, in [BCP 47 format](https://tools.ietf.org/html/bcp47#appendix-A). For example, `en-US` or `fr-CA`.
	LanguageCode *string `json:"language_code,omitempty" url:"language_code,omitempty"`
	// The currency associated with the merchant, in ISO 4217 format. For example, the currency code for US dollars is `USD`.
	// See [Currency](#type-currency) for possible values
	Currency *Currency `json:"currency,omitempty" url:"currency,omitempty"`
	// The merchant's status.
	// See [MerchantStatus](#type-merchantstatus) for possible values
	Status *MerchantStatus `json:"status,omitempty" url:"status,omitempty"`
	// The ID of the [main `Location`](https://developer.squareup.com/docs/locations-api#about-the-main-location) for this merchant.
	MainLocationID *string `json:"main_location_id,omitempty" url:"main_location_id,omitempty"`
	// The time when the merchant was created, in RFC 3339 format.
	// For more information, see [Working with Dates](https://developer.squareup.com/docs/build-basics/working-with-dates).
	CreatedAt *string `json:"created_at,omitempty" url:"created_at,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (m *Merchant) GetID() *string {
	if m == nil {
		return nil
	}
	return m.ID
}

func (m *Merchant) GetBusinessName() *string {
	if m == nil {
		return nil
	}
	return m.BusinessName
}

func (m *Merchant) GetCountry() Country {
	if m == nil {
		return ""
	}
	return m.Country
}

func (m *Merchant) GetLanguageCode() *string {
	if m == nil {
		return nil
	}
	return m.LanguageCode
}

func (m *Merchant) GetCurrency() *Currency {
	if m == nil {
		return nil
	}
	return m.Currency
}

func (m *Merchant) GetStatus() *MerchantStatus {
	if m == nil {
		return nil
	}
	return m.Status
}

func (m *Merchant) GetMainLocationID() *string {
	if m == nil {
		return nil
	}
	return m.MainLocationID
}

func (m *Merchant) GetCreatedAt() *string {
	if m == nil {
		return nil
	}
	return m.CreatedAt
}

func (m *Merchant) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *Merchant) UnmarshalJSON(data []byte) error {
	type unmarshaler Merchant
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = Merchant(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties
	m.rawJSON = json.RawMessage(data)
	return nil
}

func (m *Merchant) String() string {
	if len(m.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(m.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type MerchantStatus string

const (
	MerchantStatusActive   MerchantStatus = "ACTIVE"
	MerchantStatusInactive MerchantStatus = "INACTIVE"
)

func NewMerchantStatusFromString(s string) (MerchantStatus, error) {
	switch s {
	case "ACTIVE":
		return MerchantStatusActive, nil
	case "INACTIVE":
		return MerchantStatusInactive, nil
	}
	var t MerchantStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (m MerchantStatus) Ptr() *MerchantStatus {
	return &m
}
