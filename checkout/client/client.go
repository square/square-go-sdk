// Code generated by Fern. DO NOT EDIT.

package client

import (
	context "context"
	v2 "github.com/square/square-go-sdk/v2"
	paymentlinks "github.com/square/square-go-sdk/v2/checkout/paymentlinks"
	core "github.com/square/square-go-sdk/v2/core"
	internal "github.com/square/square-go-sdk/v2/internal"
	option "github.com/square/square-go-sdk/v2/option"
	http "net/http"
	os "os"
)

type Client struct {
	WithRawResponse *RawClient
	PaymentLinks    *paymentlinks.Client

	baseURL string
	caller  *internal.Caller
	header  http.Header
}

func NewClient(opts ...option.RequestOption) *Client {
	options := core.NewRequestOptions(opts...)
	if options.Token == "" {
		options.Token = os.Getenv("SQUARE_TOKEN")
	}
	if options.Version == "" {
		options.Version = os.Getenv("VERSION")
	}
	return &Client{
		PaymentLinks:    paymentlinks.NewClient(opts...),
		WithRawResponse: NewRawClient(options),
		baseURL:         options.BaseURL,
		caller: internal.NewCaller(
			&internal.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
		header: options.ToHeader(),
	}
}

// Retrieves the location-level settings for a Square-hosted checkout page.
func (c *Client) RetrieveLocationSettings(
	ctx context.Context,
	request *v2.RetrieveLocationSettingsRequest,
	opts ...option.RequestOption,
) (*v2.RetrieveLocationSettingsResponse, error) {
	response, err := c.WithRawResponse.RetrieveLocationSettings(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Updates the location-level settings for a Square-hosted checkout page.
func (c *Client) UpdateLocationSettings(
	ctx context.Context,
	request *v2.UpdateLocationSettingsRequest,
	opts ...option.RequestOption,
) (*v2.UpdateLocationSettingsResponse, error) {
	response, err := c.WithRawResponse.UpdateLocationSettings(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Retrieves the merchant-level settings for a Square-hosted checkout page.
func (c *Client) RetrieveMerchantSettings(
	ctx context.Context,
	opts ...option.RequestOption,
) (*v2.RetrieveMerchantSettingsResponse, error) {
	response, err := c.WithRawResponse.RetrieveMerchantSettings(
		ctx,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Updates the merchant-level settings for a Square-hosted checkout page.
func (c *Client) UpdateMerchantSettings(
	ctx context.Context,
	request *v2.UpdateMerchantSettingsRequest,
	opts ...option.RequestOption,
) (*v2.UpdateMerchantSettingsResponse, error) {
	response, err := c.WithRawResponse.UpdateMerchantSettings(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}
